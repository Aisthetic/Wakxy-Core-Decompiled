package com.ankamagames.wakfu.client.ui.theme;

import com.ankamagames.xulor2.core.*;
import java.util.*;
import com.ankamagames.framework.graphics.image.*;

public class WakfuThemeLoader implements ThemeLoader
{
    @Override
    public void initTheme(final DocumentParser documentParser) {
        documentParser.loadFontDefinition("narrow", "fonts/thaitahoma.ttf", "th,vi", 0, 0, 0);
        documentParser.loadFontDefinition("narrow", "fonts/droidsansfallbackfull.ttf", "ch,ja,jp,ko,tw", -2, 0, -1);
        documentParser.loadFontDefinition("narrow", "fonts/MARIALN.TTF", "default", 0, 0, 0);
        documentParser.loadFontDefinition("default", "fonts/thaitahoma.ttf", "th,vi", 1, 0, 0);
        documentParser.loadFontDefinition("default", "fonts/droidsansfallbackfull.ttf", "ch,ja,jp,ko,tw", 2, 0, -1);
        documentParser.loadFontDefinition("default", "fonts/WCI.TTF", "default", 0, 0, 0);
        documentParser.loadFontDefinition("name", "fonts/thaitahoma.ttf", "th,vi", 0, 0, 0);
        documentParser.loadFontDefinition("name", "fonts/droidsansfallbackfull.ttf", "ch,ja,jp,ko,tw", 0, 0, -1);
        documentParser.loadFontDefinition("name", "fonts/COPRGTL.TTF", "default", 0, 0, 0);
        documentParser.loadFontDefinition("title", "fonts/thaitahoma.ttf", "th,vi", 0, 0, 0);
        documentParser.loadFontDefinition("title", "fonts/fzlibian.ttf", "ch,ja,jp,ko,tw", 2, 0, -1);
        documentParser.loadFontDefinition("title", "fonts/COPRGTL.TTF", "default", 0, 0, 0);
        documentParser.loadFontDefinition("capitalized", "fonts/thaitahoma.ttf", "th,vi", 0, 0, 0);
        documentParser.loadFontDefinition("capitalized", "fonts/droidsansfallbackfull.ttf", "ch,ja,jp,ko,tw", 4, 0, 1);
        documentParser.loadFontDefinition("capitalized", "fonts/COPRGTL.TTF", "default", 0, 0, 0);
        documentParser.loadFontDefinition("fancy", "fonts/thaitahoma.ttf", "th,vi", 0, 0, 0);
        documentParser.loadFontDefinition("fancy", "fonts/fzlibian.ttf", "ch,ja,jp,ko,tw", 2, 0, -1);
        documentParser.loadFontDefinition("fancy", "fonts/LUCIDACALLY.TTF", "default", 0, 0, 0);
        documentParser.loadFontDefinition("heart", "fonts/HEART.TTF", "default", 0, 0, 0);
        documentParser.loadFontDefinition("styledOverhead", "fonts/thaitahoma.ttf", "th,vi", 0, 0, 0);
        documentParser.loadFontDefinition("styledOverhead", "fonts/fzlibian.ttf", "ch,ja,jp,ko,tw", 0, 0, -1);
        documentParser.loadFontDefinition("styledOverhead", "fonts/WCI.TTF", "default", 0, 0, 0);
        documentParser.loadFont("narrowFont14", "narrow", "-plain-14", false);
        documentParser.loadFont("narrowFont14Bold", "narrow", "-bold-14", false);
        documentParser.loadFont("narrowFont14Bordered", "narrow", "-bold-14", true);
        documentParser.loadFont("narrowFont16", "narrow", "-bold-16", false);
        documentParser.loadFont("narrowBoldFont16", "narrow", "-bold-16", false);
        documentParser.loadFont("narrowFont16Bordered", "narrow", "-bold-16", true);
        documentParser.loadFont("narrowFont18", "narrow", "-bold-18", false);
        documentParser.loadFont("narrowFont18Bordered", "narrow", "-bold-18", true);
        documentParser.loadFont("defaultSmallFont", "default", "-plain-9", false);
        documentParser.loadFont("defaultFont", "default", "-plain-10", false);
        documentParser.loadFont("defaultBorderedFont", "default", "-plain-10", true);
        documentParser.loadFont("defaultFont11", "default", "-plain-11", false);
        documentParser.loadFont("defaultFontBordered30", "default", "-bold-30", true);
        documentParser.loadFont("defaultBoldFont", "default", "-bold-10", false);
        documentParser.loadFont("defaultBoldBorderedFont", "default", "-bold-10", true);
        documentParser.loadFont("defaultBoldBorderedFont12", "default", "-bold-12", true);
        documentParser.loadFont("defaultBoldBorderedFont14", "default", "-bold-14", true);
        documentParser.loadFont("defaultBoldFont11", "default", "-bold-11", false);
        documentParser.loadFont("defaultSmallBoldFont", "default", "-bold-9", false);
        documentParser.loadFont("defaultTitleFont", "default", "-bold-14", false);
        documentParser.loadFont("defaultBold16", "default", "-bold-16", false);
        documentParser.loadFont("defaultBold22", "default", "-bold-22", false);
        documentParser.loadFont("defaultBold16Bordered", "default", "-bold-16", true);
        documentParser.loadFont("defaultBold26", "default", "-bold-26", false);
        documentParser.loadFont("heartBold16", "heart", "-bold-16", true);
        documentParser.loadFont("styledOverheadFont", "styledOverhead", "-bold-14", true);
        documentParser.loadFont("styleTitleNameFont12", "name", "-plain-12", false);
        documentParser.loadFont("styleTitleNameFont", "name", "-plain-14", false);
        documentParser.loadFont("styleBoldTitleNameFont12", "name", "-bold-12", false);
        documentParser.loadFont("styleBoldTitleNameFont", "name", "-bold-14", false);
        documentParser.loadFont("styleBoldTitleNameFont16", "name", "-bold-16", false);
        documentParser.loadFont("smallSetSubTitleFont", "capitalized", "-plain-10", false);
        documentParser.loadFont("smallTitleFont", "title", "-plain-10", false);
        documentParser.loadFont("styledLightFont", "title", "-plain-12", false);
        documentParser.loadFont("styledLightFont14", "title", "-plain-14", false);
        documentParser.loadFont("styledLightLargeFont20", "title", "-plain-20", false);
        documentParser.loadFont("styledLightLargeFont28", "title", "-plain-28", false);
        documentParser.loadFont("styledLightLargeFont34", "title", "-plain-34", false);
        documentParser.loadFont("styleBoldVerySmallTitleFont", "capitalized", "-bold-10", false);
        documentParser.loadFont("styleBoldBorderedVerySmallTitleFont", "capitalized", "-bold-10", true);
        documentParser.loadFont("styleBoldSmallTitleFont", "title", "-bold-12", false);
        documentParser.loadFont("styleBoldTitleFont", "title", "-bold-14", false);
        documentParser.loadFont("styledBoldFont16", "title", "-bold-16", false);
        documentParser.loadFont("styledBoldBorderedLargeFont", "title", "-boldbordered-20", false);
        documentParser.loadFont("backgroundFont14", "fancy", "-plain-14", false);
        documentParser.loadFont("backgroundBoldFont14", "fancy", "-bold-14", false);
        documentParser.loadCursor("cursors/defaultCursor.png", CursorFactory.CursorType.DEFAULT, 9, 2);
        final ArrayList<String> framesPath = new ArrayList<String>();
        framesPath.add("cursors/defaultCursor.png");
        framesPath.add("cursors/defaultHoveringCursor_01.png");
        documentParser.loadAnimatedCursor(CursorFactory.CursorType.HOVER, 11, 2, 500, framesPath);
        documentParser.loadCursor("cursors/textCursor.png", CursorFactory.CursorType.TEXT, 16, 16);
        documentParser.loadCursor("cursors/forbiddenCursor.png", CursorFactory.CursorType.FORBIDDEN, 16, 16);
        documentParser.loadCursor("cursors/horizontalResizeCursor.png", CursorFactory.CursorType.HORIZONTAL_RESIZE, 16, 16);
        documentParser.loadCursor("cursors/verticalResizeCursor.png", CursorFactory.CursorType.VERTICAL_RESIZE, 16, 16);
        documentParser.loadCursor("cursors/swResizeCursor.png", CursorFactory.CursorType.SW_RESIZE, 16, 16);
        documentParser.loadCursor("cursors/nwResizeCursor.png", CursorFactory.CursorType.NW_RESIZE, 16, 16);
        documentParser.loadCursor("cursors/hand.png", CursorFactory.CursorType.HAND, 9, 2);
        documentParser.loadCursor("cursors/moveCursor.png", CursorFactory.CursorType.MOVE, 16, 16);
        documentParser.loadCursor("cursors/shovel.png", CursorFactory.CursorType.CUSTOM1, 5, 31);
        documentParser.loadCursor("cursors/sword.png", CursorFactory.CursorType.CUSTOM2, 0, 0);
        documentParser.loadCursor("cursors/wand.png", CursorFactory.CursorType.CUSTOM3, 5, 0);
        documentParser.loadCursor("cursors/wheels.png", CursorFactory.CursorType.CUSTOM4, 3, 3);
        documentParser.loadCursor("cursors/hammer.png", CursorFactory.CursorType.CUSTOM5, 9, 2);
        documentParser.loadCursor("cursors/door.png", CursorFactory.CursorType.CUSTOM6, 3, 3);
        final ArrayList<String> framesPath2 = new ArrayList<String>();
        framesPath2.add("cursors/mouse_02.png");
        framesPath2.add("cursors/mouse_01.png");
        documentParser.loadAnimatedCursor(CursorFactory.CursorType.CUSTOM7, 11, 2, 500, framesPath2);
        documentParser.loadCursor("cursors/zoom.png", CursorFactory.CursorType.CUSTOM8, 10, 10);
        documentParser.loadCursor("cursors/openedHand.png", CursorFactory.CursorType.CUSTOM9, 16, 25);
        documentParser.loadCursor("cursors/closedHand.png", CursorFactory.CursorType.CUSTOM10, 16, 25);
        documentParser.loadCursor("cursors/closedHandCross.png", CursorFactory.CursorType.CUSTOM11, 16, 25);
        documentParser.loadCursor("cursors/nwArrow.png", CursorFactory.CursorType.CUSTOM12, 3, 3);
        documentParser.loadCursor("cursors/neArrow.png", CursorFactory.CursorType.CUSTOM13, 29, 3);
        documentParser.loadCursor("cursors/swArrow.png", CursorFactory.CursorType.CUSTOM14, 3, 29);
        documentParser.loadCursor("cursors/seArrow.png", CursorFactory.CursorType.CUSTOM15, 29, 29);
        documentParser.loadCursor("cursors/attackSword1.png", CursorFactory.CursorType.CUSTOM16, 6, 5);
        documentParser.loadCursor("cursors/attackSword3.png", CursorFactory.CursorType.CUSTOM17, 6, 5);
        documentParser.loadTooltip(2.5f, new Color(0.26666668f, 0.22745098f, 0.09803922f, 0.9490196f), new Color(0.6627451f, 0.6627451f, 0.6627451f, 1.0f), new Color(0.46666667f, 0.42745098f, 0.29803923f, 0.8f), "defaultFont");
        documentParser.loadTexture("xelor_0.tga", "images/xelor_0.tga", false);
        documentParser.loadTexture("worldEditor_0.tga", "images/worldEditor_0.tga", false);
        documentParser.loadTexture("webShop_0.tga", "images/webShop_0.tga", false);
        documentParser.loadTexture("tutorialBook_0.tga", "images/tutorialBook_0.tga", false);
        documentParser.loadTexture("timeline_0.tga", "images/timeline_0.tga", false);
        documentParser.loadTexture("steamer_0.tga", "images/steamer_0.tga", false);
        documentParser.loadTexture("scroll_0.tga", "images/scroll_0.tga", false);
        documentParser.loadTexture("sacrier_0.tga", "images/sacrier_0.tga", false);
        documentParser.loadTexture("quest_0.tga", "images/quest_0.tga", false);
        documentParser.loadTexture("preWorld_2.tga", "images/preWorld_2.tga", false);
        documentParser.loadTexture("preWorld_1.tga", "images/preWorld_1.tga", false);
        documentParser.loadTexture("preWorld_0.tga", "images/preWorld_0.tga", false);
        documentParser.loadTexture("passport_0.tga", "images/passport_0.tga", false);
        documentParser.loadTexture("osamodas_0.tga", "images/osamodas_0.tga", false);
        documentParser.loadTexture("mru_0.tga", "images/mru_0.tga", false);
        documentParser.loadTexture("market_0.tga", "images/market_0.tga", false);
        documentParser.loadTexture("map_0.tga", "images/map_0.tga", false);
        documentParser.loadTexture("jail_0.tga", "images/jail_0.tga", false);
        documentParser.loadTexture("interactiveDialog_0.tga", "images/interactiveDialog_0.tga", false);
        documentParser.loadTexture("guild_0.tga", "images/guild_0.tga", false);
        documentParser.loadTexture("government_0.tga", "images/government_0.tga", false);
        documentParser.loadTexture("gazette_0.tga", "images/gazette_0.tga", false);
        documentParser.loadTexture("encyclopedia_0.tga", "images/encyclopedia_0.tga", false);
        documentParser.loadTexture("emote_0.tga", "images/emote_0.tga", false);
        documentParser.loadTexture("ecaflip_0.tga", "images/ecaflip_0.tga", false);
        documentParser.loadTexture("dungeonLadder_0.tga", "images/dungeonLadder_0.tga", false);
        documentParser.loadTexture("dimensionalBag_0.tga", "images/dimensionalBag_0.tga", false);
        documentParser.loadTexture("default_1.tga", "images/default_1.tga", false);
        documentParser.loadTexture("default_0.tga", "images/default_0.tga", false);
        documentParser.loadTexture("death_0.tga", "images/death_0.tga", false);
        documentParser.loadTexture("craft_0.tga", "images/craft_0.tga", false);
        documentParser.loadTexture("companion_0.tga", "images/companion_0.tga", false);
        documentParser.loadTexture("blindBox_0.tga", "images/blindBox_0.tga", false);
        documentParser.loadTexture("arcadeDungeon_0.tga", "images/arcadeDungeon_0.tga", false);
        documentParser.loadTexture("aptitude_0.tga", "images/aptitude_0.tga", false);
        documentParser.loadTexture("achievements_0.tga", "images/achievements_0.tga", false);
    }
}
