package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class StateBarDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public StateBarDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "stateBarWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setNonBlocking(true);
        final WindowStickListener onStick = new WindowStickListener();
        onStick.setCallBackFunc("wakfu.windowStick:stickStateBar");
        element.setOnStick(onStick);
        element.setPack(true);
        element.onAttributesInitialized();
        final String id2 = "statePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(150, 0));
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(3, 3, 3, 3));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setScaled(true);
        element3.setDisplaySize(new Dimension(48, 48));
        element3.setNonBlocking(true);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.NORTH);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("describedRunningEffect");
        checkOut7.setLocal(true);
        checkOut7.setField("iconUrl");
        checkOut7.setAttribute("texture");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut8.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 3, 0, 0));
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.NORTH);
        checkOut10.setHorizontal(false);
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setStyle("smallDarkBackground");
        checkOut11.setPrefSize(new Dimension(0, 20));
        checkOut11.setExpandable(false);
        checkOut8.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut11.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(2, 0, 2, 0));
        appearance3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("whiteBold11");
        element5.setNonBlocking(true);
        checkOut11.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element5.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 5, 0, 5));
        appearance4.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("describedRunningEffect");
        checkOut14.setLocal(true);
        checkOut14.setAttribute("text");
        checkOut14.setField("nameAndLevel");
        element5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut15.setPrefSize(new Dimension(0, 20));
        checkOut15.setStyle("smallDarkBackground");
        checkOut8.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut15.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(2, 0, 2, 0));
        appearance5.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(0, 5, 0, 5));
        appearance5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.WEST);
        checkOut15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("describedRunningEffect");
        checkOut18.setLocal(true);
        checkOut18.setAttribute("visible");
        checkOut18.setField("remainingDurationText");
        checkOut15.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        checkOut18.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setStyle("whiteBold");
        element9.setText("%duration% ".replace("%duration%", Xulor.getInstance().getTranslatedString("duration")));
        element9.setNonBlocking(true);
        checkOut15.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("white");
        element10.setNonBlocking(true);
        checkOut15.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element10.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element10.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("describedRunningEffect");
        checkOut19.setLocal(true);
        checkOut19.setAttribute("text");
        checkOut19.setField("remainingDurationText");
        element10.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("describedRunningEffect");
        checkOut20.setLocal(true);
        checkOut20.setAttribute("visible");
        checkOut20.setField("remainingDurationText");
        element10.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut20.addBasicElement(element11);
        element11.onAttributesInitialized();
        final NotNullCondition element12 = new NotNullCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut15.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setStyle("smallDarkBackground");
        checkOut21.setPrefSize(new Dimension(0, 20));
        checkOut21.setExpandable(false);
        checkOut3.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("isInFight");
        checkOut22.setAttribute("visible");
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        checkOut22.addBasicElement(element13);
        element13.onAttributesInitialized();
        final AndCondition element14 = new AndCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final FalseCondition element15 = new FalseCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final TrueCondition element16 = new TrueCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element14.addBasicElement(element16);
        element16.onAttributesInitialized();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("describedRunningEffect");
        checkOut23.setLocal(true);
        checkOut23.setAttribute("comparedValue");
        checkOut23.setField("description");
        element16.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        checkOut23.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element16.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut21.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut21.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(2, 0, 2, 0));
        appearance7.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final Padding element19 = new Padding();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setInsets(new Insets(5, 5, 5, 5));
        appearance7.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        appearance7.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("narrow12");
        element20.setNonBlocking(true);
        element20.setMinWidth(1);
        element20.setMaxWidth(230);
        checkOut21.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element20.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element20.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut25 = ColorElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance8.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setName("describedRunningEffect");
        checkOut26.setLocal(true);
        checkOut26.setAttribute("text");
        checkOut26.setField("description");
        element20.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setExpandable(false);
        checkOut27.setStyle("smallDarkBackground");
        checkOut3.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final PropertyElement checkOut28 = PropertyElement.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setName("describedRunningEffect");
        checkOut28.setLocal(true);
        checkOut28.setAttribute("visible");
        checkOut28.setField("effects");
        checkOut27.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        checkOut28.addBasicElement(element21);
        element21.onAttributesInitialized();
        final NotNullCondition element22 = new NotNullCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut27.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut27.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut29 = Margin.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setInsets(new Insets(2, 0, 2, 0));
        appearance9.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(5, 5, 5, 5));
        appearance9.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance9.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("white11");
        element24.setMinWidth(1);
        element24.setMaxWidth(230);
        element24.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element24.setOnClick(onClick);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element24.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element24.setOnMouseExit(onMouseExit);
        checkOut27.addBasicElement(element24);
        element24.onAttributesInitialized();
        final PropertyElement checkOut30 = PropertyElement.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setName("describedRunningEffect");
        checkOut30.setLocal(true);
        checkOut30.setAttribute("text");
        checkOut30.setField("effects");
        element24.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final DecoratorAppearance appearance10 = element24.getAppearance();
        appearance10.setElementMap(elementMap);
        element24.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut31 = Margin.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setInsets(new Insets(0, 0, 0, 0));
        appearance10.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        appearance10.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut27.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment17.SOUTH);
        element25.setSize(new Dimension(-2, -2));
        element25.setInitValue(true);
        element25.setXOffset(100);
        element25.setYOffset(60);
        element.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final WindowMovePoint element26 = new WindowMovePoint();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element.addBasicElement(element26);
        element26.onAttributesInitialized();
        final Container checkOut32 = Container.checkOut();
        checkOut32.setElementMap(elementMap);
        element26.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        this.method0(checkOut32);
        this.method1(checkOut32);
        this.method2(checkOut32);
        checkOut32.onChildrenAdded();
        element26.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return null;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 3, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, -2));
        element.setAlign(Alignment17.SOUTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("stateBarContainerLeft");
        element2.setExpandable(false);
        element2.setNonBlocking(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("stateBarContainerCenter");
        element3.setScaled(true);
        element3.setExpandable(true);
        element3.setNonBlocking(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("stateBarContainerRight");
        element4.setExpandable(false);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(34, 42));
        element.setExpandable(false);
        element.setHorizontal(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(6);
        element.setPrefSize(new Dimension(34, 42));
        element.setNonBlocking(true);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(statePopup,stateBarWindow)");
        element.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("wakfu.popupInfos:closePopup");
        element.setOnItemOut(onItemOut);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.controlCenter:openRunningEffectDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("observedCharacter");
        checkOut.setAttribute("content");
        checkOut.setField("allStates");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("white2");
        checkOut4.setExpandable(false);
        checkOut4.setNonBlocking(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(32, 32));
        element8.setAlign(Alignment17.NORTH);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(2, 2, 2, 2));
        appearance2.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setExpandable(false);
        element11.setScaled(true);
        element11.setDisplaySize(new Dimension(24, 24));
        element11.setNonBlocking(true);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setSize(new Dimension(100.0f, 100.0f));
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element11.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setField("iconUrl");
        element13.setAttribute("texture");
        checkOut5.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("backgroundPopupLight");
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("visible");
        element14.setField("stackSize");
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final GreaterCondition element16 = new GreaterCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setValue("1");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element17 = new Padding();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setInsets(new Insets(2, 2, 2, 2));
        appearance3.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.SOUTH_EAST);
        element18.setSize(new Dimension(-2, -2));
        element18.setXOffset(3);
        element18.setYOffset(-3);
        checkOut6.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("White10Bordered");
        element19.setExpandable(false);
        element19.setNonBlocking(true);
        element19.setMaxWidth(30);
        element19.setEnableAutoZoomShrink(true);
        checkOut6.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("text");
        element20.setField("stackSize");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("backgroundPopupLight");
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setSize(new Dimension(-2, -2));
        element21.setAlign(Alignment17.SOUTH);
        checkOut7.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("visible");
        element22.setField("remainingDuration");
        checkOut7.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final NotNullCondition element24 = new NotNullCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut7.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element25 = new Padding();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setInsets(new Insets(0, 3, 0, 3));
        appearance5.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        appearance5.onChildrenAdded();
        final TextView element26 = new TextView();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("white");
        element26.setExpandable(false);
        element26.setNonBlocking(true);
        checkOut7.addBasicElement(element26);
        element26.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element26.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.CENTER);
        element26.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("remainingDuration");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
