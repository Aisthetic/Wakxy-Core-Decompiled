package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import java.awt.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.appearance.*;

public class SetDetailPopup implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public SetDetailPopup() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "setContainerPopup";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        checkOut.setPrefSize(new Dimension(260, 0));
        checkOut.setStyle("popup");
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bigTitle");
        element.setExpandable(false);
        element.setMinWidth(260);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("itemPopupDetail");
        checkOut3.setAttribute("text");
        checkOut3.setField("nameAndNumber");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final List element3 = new List();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setPrefSize(new Dimension(205, 0));
        element3.setCellSize(new Dimension(20.0f, 41));
        element3.setHorizontal(false);
        element3.setAutoIdealSize(true);
        element3.setIdealSizeMaxColumns(5);
        element3.setIdealSizeMinColumns(5);
        element3.setIdealSizeMaxRows(3);
        element3.setIdealSizeMinRows(1);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("itemPopupDetail");
        checkOut6.setField("items");
        checkOut6.setAttribute("content");
        element3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        element5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(100.0f, 100.0f));
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("style");
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setValue("itemVirtualBackground");
        element12.setElseValue("itemBackground");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final AndCondition element13 = new AndCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final FalseCondition element14 = new FalseCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("comparedValue");
        element15.setField("isInInventory");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final FalseCondition element16 = new FalseCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element13.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("comparedValue");
        element17.setField("isEquiped");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut8.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(2, 2, 2, 2));
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setNonBlocking(true);
        element18.setDisplaySize(new Dimension(32, 32));
        checkOut8.addBasicElement(element18);
        element18.onAttributesInitialized();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap);
        element18.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("texture");
        element19.setField("iconUrl");
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setStyle("itemDisabled");
        element9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(100.0f, 100.0f));
        checkOut11.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("visible");
        checkOut11.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final AndCondition element23 = new AndCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final TrueCondition element24 = new TrueCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("comparedValue");
        element25.setField("isInInventory");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final FalseCondition element26 = new FalseCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element23.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("comparedValue");
        element27.setField("isEquiped");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setAttribute("visible");
        checkOut13.setName("itemPopupDetail");
        checkOut13.setField("characteristic");
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final ConditionResult element28 = new ConditionResult();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setValue("false");
        element28.setElseValue("true");
        checkOut13.addBasicElement(element28);
        element28.onAttributesInitialized();
        final EqualCondition element29 = new EqualCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setValue("");
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setHorizontal(false);
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut15.setStyle("lineSeparator2");
        checkOut15.setPrefSize(new Dimension(50, 1));
        checkOut12.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut15.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(5, 20, 5, 20));
        appearance3.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final Label element30 = new Label();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setExpandable(false);
        element30.setText("%bonusPenalties%".replace("%bonusPenalties%", Xulor.getInstance().getTranslatedString("bonusPenalties")));
        element30.setStyle("11BoldLight");
        checkOut12.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element30.getAppearance();
        appearance4.setElementMap(elementMap);
        element30.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 5, 5, 0));
        appearance4.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance4.onChildrenAdded();
        element30.onChildrenAdded();
        final TextView element31 = new TextView();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setExpandable(false);
        element31.setStyle("white11");
        element31.setMinWidth(190);
        checkOut12.addBasicElement(element31);
        element31.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element31.getAppearance();
        appearance5.setElementMap(elementMap);
        element31.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 20, 0, 0));
        appearance5.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("itemPopupDetail");
        checkOut19.setAttribute("text");
        checkOut19.setField("characteristic");
        element31.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("itemPopupDetail");
        checkOut21.setAttribute("visible");
        checkOut21.setField("bonusByEquiped");
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setValue("false");
        element32.setElseValue("true");
        checkOut21.addBasicElement(element32);
        element32.onAttributesInitialized();
        final EqualCondition element33 = new EqualCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setValue("");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHorizontal(false);
        checkOut20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setExpandable(false);
        checkOut23.setStyle("lineSeparator2");
        checkOut23.setPrefSize(new Dimension(50, 1));
        checkOut20.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut23.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut23.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(5, 20, 5, 20));
        appearance6.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final Label element34 = new Label();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setExpandable(false);
        element34.setText("%set.bonus%".replace("%set.bonus%", Xulor.getInstance().getTranslatedString("set.bonus")));
        element34.setStyle("11BoldLight");
        checkOut20.addBasicElement(element34);
        element34.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element34.getAppearance();
        appearance7.setElementMap(elementMap);
        element34.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(0, 5, 5, 0));
        appearance7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance7.onChildrenAdded();
        element34.onChildrenAdded();
        final TextView element35 = new TextView();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setExpandable(false);
        element35.setStyle("white11");
        element35.setMinWidth(190);
        checkOut20.addBasicElement(element35);
        element35.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element35.getAppearance();
        appearance8.setElementMap(elementMap);
        element35.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(0, 20, 0, 0));
        appearance8.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setName("itemPopupDetail");
        checkOut27.setAttribute("text");
        checkOut27.setField("bonusByEquiped");
        element35.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        element35.onChildrenAdded();
        checkOut20.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
