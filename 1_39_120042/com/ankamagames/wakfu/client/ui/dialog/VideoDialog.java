package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.appearance.*;

public class VideoDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public VideoDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "videoDialog";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setNonBlocking(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setNonBlocking(true);
        element9.setText("%dialog.video.title%".replace("%dialog.video.title%", Xulor.getInstance().getTranslatedString("dialog.video.title")));
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut8.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut10);
        }
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final BorderLayout element10 = new BorderLayout();
        element10.onCheckOut();
        checkOut11.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final String id3 = "video";
        final VideoWidget checkOut12 = VideoWidget.checkOut();
        checkOut12.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut12);
        }
        checkOut12.setVideoPath("http://streamhttp.ankama.com/2012/06/teotl_new_version/TEOTL_24-05-2012_1080p.mov_640x360_300k.flv");
        checkOut12.setPrefSize(new Dimension(300, 200));
        final ValueChangedListener onTimeChange = new ValueChangedListener();
        onTimeChange.setCallBackFunc("wakfu.video:updateSlider(video,timeSlider)");
        checkOut12.setOnTimeChange(onTimeChange);
        checkOut12.setKeepRatio(true);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final BorderLayoutData checkOut13 = BorderLayoutData.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setData(BorderLayoutData.Values.CENTER);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut12.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBorder element11 = new PlainBorder();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setInsets(new Insets(1, 1, 1, 1));
        element11.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance6.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PlainBackground element12 = new PlainBackground();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance6.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final BorderLayoutData checkOut15 = BorderLayoutData.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setData(BorderLayoutData.Values.SOUTH);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setExpandable(false);
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final String id4 = "playButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, button);
        }
        button.setPrefSize(new Dimension(50, 0));
        button.setStyle("small");
        button.setText("%dialog.video.play%".replace("%dialog.video.play%", Xulor.getInstance().getTranslatedString("dialog.video.play")));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.video:play(video,playButton)");
        button.setOnClick(onClick);
        checkOut17.addBasicElement(button);
        button.onAttributesInitialized();
        final DecoratorAppearance appearance7 = button.getAppearance();
        appearance7.setElementMap(elementMap);
        button.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 0, 0, 0));
        appearance7.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance7.onChildrenAdded();
        button.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final String id5 = "timeSlider";
        final Slider slider = new Slider();
        slider.onCheckOut();
        slider.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, slider);
        }
        slider.setHorizontal(true);
        slider.setStyle("volume");
        final MouseDraggedInListener onMouseDragIn = new MouseDraggedInListener();
        onMouseDragIn.setCallBackFunc("wakfu.video:seek(video,timeSlider)");
        slider.setOnMouseDragIn(onMouseDragIn);
        final MouseDraggedOutListener onMouseDragOut = new MouseDraggedOutListener();
        onMouseDragOut.setCallBackFunc("wakfu.video:seek(video,timeSlider)");
        slider.setOnMouseDragOut(onMouseDragOut);
        checkOut14.addBasicElement(slider);
        slider.onAttributesInitialized();
        final DecoratorAppearance appearance8 = slider.getAppearance();
        appearance8.setElementMap(elementMap);
        slider.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final PlainBorder element13 = new PlainBorder();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setInsets(new Insets(1, 1, 1, 1));
        element13.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance8.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PlainBackground element14 = new PlainBackground();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setColor(new Color(0.7f, 0.7f, 0.7f, 1.0f));
        appearance8.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        appearance8.onChildrenAdded();
        slider.onChildrenAdded();
        final WindowResizePoint element15 = new WindowResizePoint();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setPointAlign(Alignment9.SOUTH_EAST);
        element15.setExpandable(false);
        checkOut14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.SOUTH_EAST);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Image element17 = new Image();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("WRPSouthEast");
        element17.setNonBlocking(true);
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut11.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final BorderLayoutData checkOut21 = BorderLayoutData.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setData(BorderLayoutData.Values.EAST);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        checkOut20.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        element.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setSize(new Dimension(100.0f, 100.0f));
        checkOut22.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final Button element19 = new Button();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("close");
        element19.setExpandable(false);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("unloadDialog");
        element19.setOnClick(onClick2);
        element.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(-2, -2));
        element20.setAlign(Alignment17.NORTH_EAST);
        element20.setXOffset(-18);
        element20.setYOffset(-12);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setSize(new Dimension(600, 300));
        element21.setInitValue(true);
        element.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
