package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.appearance.*;

public class ClimateBonusDetailDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public ClimateBonusDetailDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Window window = new Window();
        window.onCheckOut();
        window.setElementMap(elementMap);
        window.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setInitValue(true);
        window.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        window.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final WindowMovePoint element3 = new WindowMovePoint();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        window.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("challengeCurrent");
        checkOut.setPrefSize(new Dimension(250, 0));
        element3.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(15, 32, 28, 32));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setLocal(true);
        checkOut5.setName("climateDetail");
        checkOut5.setAttribute("visible");
        checkOut5.setField("temperatureIconUrl");
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(5, 6, 6, 5));
        appearance2.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element10.setDisplaySize(new Dimension(32, 32));
        element10.setExpandable(false);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        final RowLayoutData element11 = new RowLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.CENTER);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element10.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setLocal(true);
        checkOut7.setName("climateDetail");
        checkOut7.setAttribute("texture");
        checkOut7.setField("temperatureIconUrl");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setLocal(true);
        checkOut9.setName("climateDetail");
        checkOut9.setAttribute("visible");
        checkOut9.setField("rainIconUrl");
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut9.addBasicElement(element12);
        element12.onAttributesInitialized();
        final NotNullCondition element13 = new NotNullCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final RowLayoutData element14 = new RowLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment9.CENTER);
        checkOut8.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut8.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element15 = new Padding();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setInsets(new Insets(5, 6, 6, 5));
        appearance3.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setNonBlocking(true);
        element16.setDisplaySize(new Dimension(32, 32));
        element16.setExpandable(false);
        checkOut8.addBasicElement(element16);
        element16.onAttributesInitialized();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.CENTER);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap);
        element16.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setLocal(true);
        checkOut11.setAttribute("texture");
        checkOut11.setName("climateDetail");
        checkOut11.setField("rainIconUrl");
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setNonBlocking(true);
        element18.setStyle("styledBold12");
        element18.setExpandable(true);
        element18.setMinWidth(10);
        element18.setMaxWidth(200);
        checkOut3.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 3, 0, 3));
        appearance4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setLocal(true);
        checkOut13.setAttribute("text");
        checkOut13.setName("climateDetail");
        checkOut13.setField("name");
        element18.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut14.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(5, 0, 0, 0));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(false);
        checkOut16.setAlign(Alignment9.NORTH);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setStyle("encyclopediaSplashTitle");
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut17.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element19 = new Padding();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setInsets(new Insets(5, 10, 7, 5));
        appearance6.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        appearance6.onChildrenAdded();
        final Label element20 = new Label();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setNonBlocking(true);
        element20.setStyle("smallTitle");
        element20.setText("%description%".replace("%description%", Xulor.getInstance().getTranslatedString("description")));
        checkOut17.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element20.getAppearance();
        appearance7.setElementMap(elementMap);
        element20.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut18.setName("text");
        appearance7.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance7.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final String id = "requirementsContent";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textView);
        }
        textView.setStyle("bold");
        textView.setExpandable(false);
        textView.setMinWidth(1);
        textView.setMaxWidth(235);
        textView.setNonBlocking(true);
        checkOut14.addBasicElement(textView);
        textView.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setLocal(true);
        checkOut19.setAttribute("text");
        checkOut19.setName("climateDetail");
        checkOut19.setField("description");
        textView.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final DecoratorAppearance appearance8 = textView.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        textView.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 10, 0, 10));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance8.onChildrenAdded();
        textView.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut.onChildrenAdded();
        element3.onChildrenAdded();
        final Button element21 = new Button();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("close");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element21.setOnClick(onClick);
        window.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.NORTH_EAST);
        element22.setXOffset(-28);
        element22.setYOffset(-9);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        window.onChildrenAdded();
        return window;
    }
}
