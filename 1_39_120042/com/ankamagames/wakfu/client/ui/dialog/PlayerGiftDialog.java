package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class PlayerGiftDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public PlayerGiftDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "window";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setText("%playerGift.title%".replace("%playerGift.title%", Xulor.getInstance().getTranslatedString("playerGift.title")));
        element9.setNonBlocking(true);
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut9.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut11);
        }
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut11.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element11 = new Padding();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        appearance6.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setStyle("ScrollString");
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.EAST);
        element12.setSize(new Dimension(10, 100.0f));
        element12.setXOffset(-15);
        checkOut12.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut12.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(30, 0, 40, 0));
        appearance7.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final String id3 = "selectedCraft";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        checkOut11.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setLocal(true);
        checkOut14.setName("craft");
        checkOut14.setAttribute("value");
        data.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        data.onChildrenAdded();
        final ScrollContainer element13 = new ScrollContainer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("Encyclopedia");
        element13.setExpandable(false);
        element13.setHorizontalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        element13.setVerticalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_DISPLAY);
        element13.setPageJumpRatio(0.3f);
        checkOut11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setSize(new Dimension(100.0f, 100.0f));
        element14.setAlign(Alignment17.CENTER);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance8 = element13.getAppearance();
        appearance8.setElementMap(elementMap);
        element13.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(17, 3, 20, 0));
        appearance8.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Padding element15 = new Padding();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setInsets(new Insets(0, 18, 0, 4));
        appearance8.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setStyle("tiledScroll");
        checkOut16.setExpandable(false);
        checkOut16.setPrefSize(new Dimension(415, 0));
        element13.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.CENTER);
        checkOut16.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut16.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element17 = new Padding();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setInsets(new Insets(10, 0, 10, 0));
        appearance9.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 0, 0, 10));
        appearance9.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance9.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHorizontal(false);
        checkOut18.setAlign(Alignment9.NORTH);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setExpandable(false);
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance10 = checkOut19.getAppearance();
        appearance10.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 5, 0, 0));
        appearance10.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance10.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("playerGift");
        checkOut21.setField("selectedPackage");
        checkOut21.setAttribute("visible");
        checkOut19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ConditionResult element18 = new ConditionResult();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        checkOut21.addBasicElement(element18);
        element18.onAttributesInitialized();
        final NotNullCondition element19 = new NotNullCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHorizontal(false);
        checkOut19.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setExpandable(false);
        checkOut19.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.WEST);
        checkOut23.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance11 = checkOut23.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut23.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(0, 20, 0, 5));
        appearance11.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance11.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setStyle("encyclopediaSplash");
        checkOut25.setExpandable(false);
        checkOut25.setPrefSize(new Dimension(64, 64));
        checkOut23.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.NORTH);
        checkOut25.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setDisplaySize(new Dimension(48, 48));
        element22.setExpandable(false);
        checkOut25.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setName("playerGift");
        checkOut26.setField("selectedPackage");
        checkOut26.setAttribute("visible");
        element22.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        checkOut26.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut26.onChildrenAdded();
        final PixmapElement checkOut27 = PixmapElement.checkOut();
        checkOut27.setElementMap(elementMap);
        element22.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final PropertyElement checkOut28 = PropertyElement.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setName("playerGift");
        checkOut28.setField("selectedPackage/iconUrl");
        checkOut28.setAttribute("texture");
        checkOut27.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        checkOut27.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut25.onChildrenAdded();
        final Container checkOut29 = Container.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setStyle("backgroundPopupLight");
        checkOut29.setExpandable(false);
        checkOut23.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.NORTH);
        checkOut29.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance12 = checkOut29.getAppearance();
        appearance12.setElementMap(elementMap);
        appearance12.setModulationColor(new Color(1.0f, 0.0f, 0.0f, 0.7f));
        checkOut29.addBasicElement(appearance12);
        appearance12.onAttributesInitialized();
        final Padding element27 = new Padding();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setInsets(new Insets(4, 4, 4, 4));
        appearance12.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        appearance12.onChildrenAdded();
        final TextView element28 = new TextView();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("whiteBold11");
        element28.setExpandable(false);
        element28.setMinWidth(1);
        element28.setMaxWidth(315);
        element28.setText("Super cadeau de bienvenue qui poutre sa m\u00e8re, la race de sa grand-m\u00e8re");
        checkOut29.addBasicElement(element28);
        element28.onAttributesInitialized();
        final PropertyElement checkOut30 = PropertyElement.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setName("playerGift");
        checkOut30.setField("selectedPackage/title");
        checkOut30.setAttribute("text");
        element28.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final DecoratorAppearance appearance13 = element28.getAppearance();
        appearance13.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance13).setAlign(Alignment9.WEST);
        element28.addBasicElement(appearance13);
        appearance13.onAttributesInitialized();
        final ColorElement checkOut31 = ColorElement.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut31.setName("text");
        appearance13.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        appearance13.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut29.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("darkBold");
        element29.setExpandable(false);
        element29.setMinWidth(1);
        element29.setMaxWidth(385);
        element29.setText("H\u00e9 oui ! Ha ha ha ! Ce cadeau de bienvenue vous est offert par GIFI ! Encore un bijou de technologie qui nous lib\u00e8re des tracas du quotidien !! Il nous est pr\u00e9sent\u00e9 par Micheline... Merci Micheline, vous pouvez y aller.");
        checkOut19.addBasicElement(element29);
        element29.onAttributesInitialized();
        this.method0(element29);
        this.method1(element29);
        this.method2(element29);
        element29.onChildrenAdded();
        this.method3(checkOut19);
        checkOut19.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element13.onChildrenAdded();
        this.method4(checkOut11);
        checkOut11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        this.method5(checkOut2);
        checkOut2.onChildrenAdded();
        this.method6(element);
        this.method7(element);
        this.method8(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(5, 20, 5, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("playerGift");
        checkOut.setField("selectedPackage/description");
        checkOut.setAttribute("text");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(100.0f, 40));
        element.setExpandable(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(1);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 10, 0, 10));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("playerGift");
        checkOut.setField("selectedPackage/gifts");
        checkOut.setAttribute("content");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final String id = "gift";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("value");
        data.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(itemDescPopup)");
        checkOut2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut2.setOnPopupHide(onPopupHide);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.playerGift:openItemDetails(gift,window)");
        checkOut2.setOnClick(onClick);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("nonBlocking");
        element5.setField("allowControls");
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final FalseCondition element7 = new FalseCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final String id2 = "itemDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("visible");
        element8.setField("allowControls");
        checkOut3.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("PopupInformation");
        element9.setExpandable(false);
        element9.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        checkOut3.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "gift";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        checkOut2.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("value");
        data2.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        data2.onChildrenAdded();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("TiledScrollCenter");
        checkOut4.setPrefSize(new Dimension(0, 48));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setSize(new Dimension(100.0f, 48));
        checkOut4.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("TiledScrollTop");
        element13.setDisplaySize(new Dimension(200, 3));
        checkOut2.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.NORTH_WEST);
        element14.setSize(new Dimension(100.0f, -2));
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("TiledScrollBottom");
        element15.setDisplaySize(new Dimension(200, 3));
        checkOut2.addBasicElement(element15);
        element15.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.SOUTH_WEST);
        element16.setSize(new Dimension(100.0f, -2));
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(100.0f, -2));
        checkOut5.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("encyclopediaSplash");
        checkOut6.setExpandable(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setDisplaySize(new Dimension(32, 32));
        element18.setExpandable(false);
        checkOut6.addBasicElement(element18);
        element18.onAttributesInitialized();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element18.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("texture");
        element19.setField("iconUrl");
        checkOut7.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("darkBold");
        element20.setExpandable(false);
        element20.setMinWidth(1);
        element20.setMaxWidth(280);
        checkOut5.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element20.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element20.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 15, 0, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("name");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final Spacer element22 = new Spacer();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        checkOut5.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final Button element23 = new Button();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setNetEnabledId("giftLock");
        element23.setStyle("mru34");
        element23.setExpandable(false);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.playerGift:consumeOneGift(gift)");
        element23.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(consumeOneDescPopup)");
        element23.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element23.setOnPopupHide(onPopupHide2);
        checkOut5.addBasicElement(element23);
        element23.onAttributesInitialized();
        final String id4 = "consumeOneDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element23.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("white");
        element24.setEnableShrinking(false);
        element24.setText("%gift.consumeOne%".replace("%gift.consumeOne%", Xulor.getInstance().getTranslatedString("gift.consumeOne")));
        checkOut9.addBasicElement(element24);
        element24.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element24.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element24.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element23.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("enabled");
        element26.setField("allowControls");
        element23.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaPane");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(454, 565));
        element.setXOffset(-10);
        element.setYOffset(1);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 59, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(40, 0, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Button element3 = new Button();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("upWhiteArrow");
        element3.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.playerGift:packageListOffset(packageList,-1)");
        element3.setOnClick(onClick);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("playerGift");
        checkOut6.setField("numPackages");
        checkOut6.setAttribute("visible");
        element3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        final GreaterCondition element5 = new GreaterCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setValue("5");
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "giftGroup";
        final RadioGroup radioGroup = new RadioGroup();
        radioGroup.onCheckOut();
        radioGroup.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, radioGroup);
        }
        checkOut3.addBasicElement(radioGroup);
        radioGroup.onAttributesInitialized();
        radioGroup.onChildrenAdded();
        final String id2 = "packageList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, list);
        }
        list.setSelectionable(false);
        list.setScrollMode(List.ListScrollMode.CIRCULAR);
        list.setHorizontal(false);
        list.setCellSize(new Dimension(69, 80));
        list.setNonBlocking(false);
        list.setAutoIdealSize(true);
        list.setIdealSizeMinRows(1);
        list.setIdealSizeMaxRows(5);
        list.setIdealSizeMinColumns(1);
        list.setIdealSizeMaxColumns(1);
        list.setScrollBar(false);
        list.setScrollOnMouseWheel(true);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.playerGift:selectGiftPackage");
        list.setOnItemClick(onItemClick);
        checkOut3.addBasicElement(list);
        list.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("playerGift");
        checkOut7.setField("giftPackages");
        checkOut7.setAttribute("content");
        list.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final ItemRenderer element6 = new ItemRenderer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        list.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ItemCondition element8 = new ItemCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final NotNullCondition element9 = new NotNullCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        element6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final RadioButton element11 = new RadioButton();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("bigLeftWindow");
        element11.setGroupId("giftGroup");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(giftPkgDescPopup)");
        element11.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element11.setOnPopupHide(onPopupHide);
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("selected");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final EqualCondition element14 = new EqualCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("playerGift");
        checkOut9.setField("selectedPackage");
        checkOut9.setAttribute("value");
        element14.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final String id3 = "giftPkgDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element11.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(10, 0));
        checkOut10.setStyle("popup");
        popupElement.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("white");
        element15.setEnableShrinking(false);
        element15.setMinWidth(1);
        element15.setMaxWidth(250);
        checkOut10.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("title");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance2 = element15.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element15.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut10.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(69, 58));
        element17.setAlign(Alignment17.SOUTH);
        element11.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("title");
        element11.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element11.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setDisplaySize(new Dimension(48, 48));
        element19.setNonBlocking(true);
        checkOut8.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(-2, -2));
        element20.setAlign(Alignment17.NORTH);
        element20.setXOffset(-1);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final PixmapElement checkOut11 = PixmapElement.checkOut();
        checkOut11.setElementMap(elementMap);
        element19.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("texture");
        element21.setField("iconUrl");
        checkOut11.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element6.onChildrenAdded();
        list.onChildrenAdded();
        final Button element22 = new Button();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("downWhiteArrow");
        element22.setExpandable(false);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.playerGift:packageListOffset(packageList,1)");
        element22.setOnClick(onClick2);
        checkOut3.addBasicElement(element22);
        element22.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("playerGift");
        checkOut12.setField("numPackages");
        checkOut12.setAttribute("visible");
        element22.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        checkOut12.addBasicElement(element23);
        element23.onAttributesInitialized();
        final GreaterCondition element24 = new GreaterCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setValue("5");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.playerGift:openCloseDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.CENTER);
        element.setResizeOnce(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
