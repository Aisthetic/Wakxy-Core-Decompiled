package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.layout.*;

public class SystemBarDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public SystemBarDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPack(true);
        checkOut.onAttributesInitialized();
        final String id = "statePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setPrefSize(new Dimension(150, 0));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(3, 3, 3, 3));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setExpandable(false);
        element2.setScaled(true);
        element2.setDisplaySize(new Dimension(48, 48));
        element2.setNonBlocking(true);
        checkOut6.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.NORTH);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedRunningEffect");
        checkOut8.setLocal(true);
        checkOut8.setField("iconUrl");
        checkOut8.setAttribute("texture");
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut9.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 3, 0, 0));
        appearance2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.NORTH);
        checkOut11.setHorizontal(false);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setStyle("smallDarkBackground");
        checkOut12.setPrefSize(new Dimension(0, 20));
        checkOut12.setExpandable(false);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut12.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(2, 0, 2, 0));
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance3.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("whiteBold11");
        element4.setNonBlocking(true);
        checkOut12.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element4.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element4.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 5, 0, 5));
        appearance4.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("describedRunningEffect");
        checkOut15.setLocal(true);
        checkOut15.setAttribute("text");
        checkOut15.setField("nameAndLevel");
        element4.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setExpandable(false);
        checkOut16.setPrefSize(new Dimension(0, 20));
        checkOut16.setStyle("smallDarkBackground");
        checkOut9.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut16.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(2, 0, 2, 0));
        appearance5.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(0, 5, 0, 5));
        appearance5.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("describedRunningEffect");
        checkOut19.setLocal(true);
        checkOut19.setAttribute("visible");
        checkOut19.setField("remainingDurationText");
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut19.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setStyle("whiteBold");
        element8.setText("%duration% ".replace("%duration%", Xulor.getInstance().getTranslatedString("duration")));
        element8.setNonBlocking(true);
        checkOut16.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white");
        element9.setNonBlocking(true);
        checkOut16.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element9.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element9.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("describedRunningEffect");
        checkOut20.setLocal(true);
        checkOut20.setAttribute("text");
        checkOut20.setField("remainingDurationText");
        element9.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("describedRunningEffect");
        checkOut21.setLocal(true);
        checkOut21.setAttribute("visible");
        checkOut21.setField("remainingDurationText");
        element9.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        checkOut21.addBasicElement(element10);
        element10.onAttributesInitialized();
        final NotNullCondition element11 = new NotNullCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut16.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setStyle("smallDarkBackground");
        checkOut22.setPrefSize(new Dimension(0, 20));
        checkOut22.setExpandable(false);
        checkOut4.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("isInFight");
        checkOut23.setAttribute("visible");
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut23.addBasicElement(element12);
        element12.onAttributesInitialized();
        final AndCondition element13 = new AndCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final FalseCondition element14 = new FalseCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TrueCondition element15 = new TrueCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("describedRunningEffect");
        checkOut24.setLocal(true);
        checkOut24.setAttribute("comparedValue");
        checkOut24.setField("description");
        element15.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        checkOut24.addBasicElement(element16);
        element16.onAttributesInitialized();
        final NotNullCondition element17 = new NotNullCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut24.onChildrenAdded();
        element15.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut22.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(2, 0, 2, 0));
        appearance7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final Padding element18 = new Padding();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setInsets(new Insets(5, 5, 5, 5));
        appearance7.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        appearance7.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("narrow12");
        element19.setNonBlocking(true);
        element19.setMinWidth(1);
        element19.setMaxWidth(230);
        checkOut22.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element19.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element19.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut26 = ColorElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance8.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setName("describedRunningEffect");
        checkOut27.setLocal(true);
        checkOut27.setAttribute("text");
        checkOut27.setField("description");
        element19.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setExpandable(false);
        checkOut28.setStyle("smallDarkBackground");
        checkOut4.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setName("describedRunningEffect");
        checkOut29.setLocal(true);
        checkOut29.setAttribute("visible");
        checkOut29.setField("effects");
        checkOut28.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        checkOut29.addBasicElement(element20);
        element20.onAttributesInitialized();
        final NotNullCondition element21 = new NotNullCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut29.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut28.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut28.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setInsets(new Insets(2, 0, 2, 0));
        appearance9.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final Padding element22 = new Padding();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setInsets(new Insets(5, 5, 5, 5));
        appearance9.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        appearance9.onChildrenAdded();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("white11");
        element23.setMinWidth(1);
        element23.setMaxWidth(230);
        element23.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element23.setOnClick(onClick);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element23.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element23.setOnMouseExit(onMouseExit);
        checkOut28.addBasicElement(element23);
        element23.onAttributesInitialized();
        final PropertyElement checkOut31 = PropertyElement.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setName("describedRunningEffect");
        checkOut31.setLocal(true);
        checkOut31.setAttribute("text");
        checkOut31.setField("effects");
        element23.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final DecoratorAppearance appearance10 = element23.getAppearance();
        appearance10.setElementMap(elementMap);
        element23.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut32 = Margin.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setInsets(new Insets(0, 0, 0, 0));
        appearance10.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        appearance10.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut28.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment17.NORTH_EAST);
        element24.setSize(new Dimension(-2, -2));
        checkOut.addBasicElement(element24);
        element24.onAttributesInitialized();
        final PropertyElement checkOut33 = PropertyElement.checkOut();
        checkOut33.setElementMap(elementMap);
        checkOut33.setAttribute("xOffset");
        checkOut33.setName("isInGame");
        element24.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("-305");
        element25.setElseValue("0");
        checkOut33.addBasicElement(element25);
        element25.onAttributesInitialized();
        final TrueCondition element26 = new TrueCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut33.onChildrenAdded();
        element24.onChildrenAdded();
        this.method0(checkOut);
        this.method1(checkOut);
        this.method2(checkOut);
        this.method3(checkOut);
        this.method4(checkOut);
        this.method5(checkOut);
        this.method6(checkOut);
        this.method7(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 2));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "stateBarWindow";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(34, 47));
        list.setExpandable(false);
        list.setHorizontal(false);
        list.setAutoIdealSize(true);
        list.setIdealSizeMinColumns(1);
        list.setIdealSizeMaxColumns(6);
        list.setNonBlocking(true);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(statePopup,stateBarWindow)");
        list.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("wakfu.popupInfos:closePopup");
        list.setOnItemOut(onItemOut);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.controlCenter:openRunningEffectDescription");
        list.setOnItemClick(onItemClick);
        basicElement.addBasicElement(list);
        list.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("observedCharacter");
        checkOut.setAttribute("content");
        checkOut.setField("allStates");
        list.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        list.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = list.getAppearance();
        appearance.setElementMap(elementMap);
        list.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        list.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut4.setHorizontal(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final String id2 = "borderContainer";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut5);
        }
        checkOut5.setStyle("white2");
        checkOut5.setExpandable(false);
        checkOut5.setNonBlocking(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(4, 4, 4, 4));
        appearance2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setScaled(true);
        element9.setDisplaySize(new Dimension(24, 24));
        element9.setNonBlocking(true);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setSize(new Dimension(100.0f, 100.0f));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element9.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setField("iconUrl");
        element11.setAttribute("texture");
        checkOut6.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element9.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("backgroundPopupLight");
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("stackSize");
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final GreaterCondition element14 = new GreaterCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setValue("1");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut7.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element15 = new Padding();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setInsets(new Insets(2, 2, 2, 2));
        appearance3.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.SOUTH_EAST);
        element16.setSize(new Dimension(-2, -2));
        element16.setXOffset(3);
        element16.setYOffset(-3);
        checkOut7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Label element17 = new Label();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("White10Bordered");
        element17.setExpandable(false);
        element17.setNonBlocking(true);
        element17.setMaxWidth(22);
        element17.setEnableAutoZoomShrink(true);
        checkOut7.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element17.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element17.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("stackSize");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("backgroundPopupLight");
        checkOut8.setExpandable(false);
        checkOut3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayoutData element19 = new RowLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment9.CENTER);
        checkOut8.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("visible");
        element20.setField("remainingDuration");
        checkOut8.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final NotNullCondition element22 = new NotNullCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut8.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(0, 3, 0, 3));
        appearance5.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance5.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("White10Bordered");
        element24.setExpandable(false);
        element24.setNonBlocking(true);
        element24.setMaxWidth(22);
        element24.setEnableAutoZoomShrink(true);
        element24.setMultiline(false);
        checkOut8.addBasicElement(element24);
        element24.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element24.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.CENTER);
        element24.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("text");
        element25.setField("remainingDuration");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        list.onChildrenAdded();
        return list;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu:moderatorRequestUserRequest");
        element.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(moderationPopup)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "moderationPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_EAST);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("PopupInformation");
        element3.setText("Process next user request");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("numModeratorHelpRequestText");
        checkOut3.setAttribute("text");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("isAdmin");
        checkOut4.setAttribute("visible");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("comparedValue");
        checkOut5.setName("isInGame");
        element7.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element7.onChildrenAdded();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("comparedValue");
        checkOut6.setName("isInGame");
        element8.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element8.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("[M]");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu:moderation");
        element.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(moderationPopup)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "moderationPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_EAST);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("PopupInformation");
        element3.setText("Moderation");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("isAdmin");
        checkOut3.setAttribute("visible");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("comparedValue");
        checkOut4.setName("isInGame");
        element7.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element7.onChildrenAdded();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("comparedValue");
        checkOut5.setName("isInGame");
        element8.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element8.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("[X]");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu:hackClientRights");
        element.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descHackRights)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "descHackRights";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_EAST);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("PopupInformation");
        element3.setText("Hack client rights");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("text");
        checkOut3.setName("rightsHackMode");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("[hack=on]");
        element4.setElseValue("[hack=off]");
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("isAdmin");
        checkOut4.setAttribute("visible");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final AndCondition element7 = new AndCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final NotNullCondition element9 = new NotNullCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("comparedValue");
        checkOut5.setName("isInGame");
        element9.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element9.onChildrenAdded();
        final TrueCondition element10 = new TrueCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element7.addBasicElement(element10);
        element10.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("comparedValue");
        checkOut6.setName("isInGame");
        element10.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element10.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("[A]");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu:openAdminMonitorPanel");
        element.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descAdminPanel)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "descAdminPanel";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_EAST);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("PopupInformation");
        element3.setText("Admin Panel");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("isAdmin");
        checkOut3.setAttribute("visible");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("comparedValue");
        checkOut4.setName("isInGame");
        element7.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element7.onChildrenAdded();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("comparedValue");
        checkOut5.setName("isInGame");
        element8.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element8.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("[o_o]");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu:openAdminCharacterEditor");
        element.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCharactereditor)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "descCharactereditor";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_EAST);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("PopupInformation");
        element3.setText("Character Editor");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("isAdmin");
        checkOut3.setAttribute("visible");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("comparedValue");
        checkOut4.setName("isInGame");
        element7.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element7.onChildrenAdded();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("comparedValue");
        checkOut5.setName("isInGame");
        element8.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element8.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
