package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.framework.graphics.image.*;
import java.awt.*;
import com.ankamagames.baseImpl.graphics.isometric.text.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.component.*;

public class DragoMapDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public DragoMapDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "mapWindow";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        checkOut.setNonBlocking(false);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element = new PlainBackground();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setColor(new Color(0.0f, 0.0f, 0.0f, 0.7f));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        element2.setAlign(Alignment17.CENTER);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(-2, -2));
        element5.setAlign(Alignment17.CENTER);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(-2, -2));
        element7.setAlign(Alignment17.CENTER);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(100, 50, 100, 50));
        appearance2.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id2 = "map";
        final MapWidget mapWidget = new MapWidget();
        mapWidget.onCheckOut();
        mapWidget.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, mapWidget);
        }
        mapWidget.setIsoMap(true);
        mapWidget.setTooltipHotPoint(BackgroundedTextHotPointPosition.SOUTH);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.dragoMap:onMousePress");
        mapWidget.setOnMousePress(onMousePress);
        final MouseReleasedListener onMouseRelease = new MouseReleasedListener();
        onMouseRelease.setCallBackFunc("wakfu.dragoMap:onMouseRelease");
        mapWidget.setOnMouseRelease(onMouseRelease);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.dragoMap:onMouseEnter");
        mapWidget.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.dragoMap:onMouseExit");
        mapWidget.setOnMouseExit(onMouseExit);
        final MapMoveListener onMapMove = new MapMoveListener();
        onMapMove.setCallBackFunc("wakfu.dragoMap:onMapMove");
        mapWidget.setOnMapMove(onMapMove);
        final MapClickListener onMapClick = new MapClickListener();
        onMapClick.setCallBackFunc("wakfu.dragoMap:onMapClick(map)");
        mapWidget.setOnMapClick(onMapClick);
        final MapDoubleClickListener onMapDoubleClick = new MapDoubleClickListener();
        onMapDoubleClick.setCallBackFunc("wakfu.dragoMap:adminTP");
        mapWidget.setOnMapDoubleClick(onMapDoubleClick);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.dragoMap:onMapItemClick");
        mapWidget.setOnItemClick(onItemClick);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.dragoMap:onMapItemOver");
        mapWidget.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("wakfu.dragoMap:onMapItemOut");
        mapWidget.setOnItemOut(onItemOut);
        mapWidget.setExpandable(false);
        checkOut3.addBasicElement(mapWidget);
        mapWidget.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("mapPath");
        checkOut4.setName("map");
        checkOut4.setField("map");
        mapWidget.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("mapId");
        checkOut5.setName("map");
        checkOut5.setField("mapId");
        mapWidget.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("content");
        checkOut6.setName("map");
        checkOut6.setField("landmarks/points");
        mapWidget.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("compassContent");
        checkOut7.setName("map");
        checkOut7.setField("landmarks/compass");
        mapWidget.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("knownMaps");
        checkOut8.setName("map");
        checkOut8.setField("availableMapsCoords");
        mapWidget.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(-2, -2));
        element9.setAlign(Alignment17.CENTER);
        mapWidget.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance3 = mapWidget.getAppearance();
        appearance3.setElementMap(elementMap);
        appearance3.setShape(WidgetShape.LOSANGE);
        mapWidget.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        mapWidget.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(100.0f, 100.0f));
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setXPerc(new Percentage(80.0));
        element12.setYPerc(new Percentage(80.0));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final StaticLayout element13 = new StaticLayout();
        element13.onCheckOut();
        element13.setAdaptToContentSize(true);
        checkOut10.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("mapButtons");
        checkOut10.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(5, 0, 0, 0));
        appearance5.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setSize(new Dimension(-2, -2));
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final String id3 = "closeMapButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, button);
        }
        button.setStyle("mapClose");
        button.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        button.setOnClick(onClick);
        button.setPrefSize(new Dimension(35, 20));
        checkOut10.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setSize(new Dimension(-2, -2));
        element16.setAlign(Alignment17.CENTER);
        element16.setXOffset(44);
        element16.setYOffset(-15);
        button.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        button.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(-2, -2));
        element17.setXPerc(new Percentage(11.0));
        element17.setYPerc(new Percentage(11.0));
        checkOut12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final StaticLayout element18 = new StaticLayout();
        element18.onCheckOut();
        element18.setAdaptToContentSize(true);
        checkOut12.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("filterBackground");
        element19.setScaled(true);
        element19.setDisplaySize(new Dimension(330, 175));
        checkOut12.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element19.getAppearance();
        appearance6.setElementMap(elementMap);
        element19.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(5, 0, 0, 0));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(-2, -2));
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final List element21 = new List();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setCellSize(new Dimension(58, 29));
        element21.setListLayoutMode(List.ListLayoutMode.ISOMETRIC);
        element21.setIsoColumnCount(1);
        element21.setIsoPositiveFactor(false);
        element21.setExpandable(false);
        checkOut12.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setSize(new Dimension(-2, -2));
        element22.setAlign(Alignment17.NORTH);
        element22.setXOffset(-20);
        element22.setYOffset(-2);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance7 = element21.getAppearance();
        appearance7.setElementMap(elementMap);
        element21.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 30, 0, 0));
        appearance7.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("content");
        checkOut15.setName("landMark.filters");
        checkOut15.setField("typeFilterList");
        element21.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ItemRenderer element23 = new ItemRenderer();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ItemCondition element25 = new ItemCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final NotNullCondition element26 = new NotNullCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final String id4 = "typeFilter";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, data);
        }
        element23.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("value");
        element27.setField("id");
        data.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        data.onChildrenAdded();
        final StaticLayout element28 = new StaticLayout();
        element28.onCheckOut();
        element23.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final String id5 = "filter";
        final ToggleButton toggleButton = new ToggleButton();
        toggleButton.onCheckOut();
        toggleButton.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, toggleButton);
        }
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.dragoMap:setTypeFilter(typeFilter)");
        toggleButton.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(filterDescPopup,filter)");
        toggleButton.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        toggleButton.setOnPopupHide(onPopupHide);
        element23.addBasicElement(toggleButton);
        toggleButton.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setSize(new Dimension(-2, -2));
        element29.setAlign(Alignment17.CENTER);
        toggleButton.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final String id6 = "filterDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement);
        }
        popupElement.setAlign(Alignment9.SOUTH);
        popupElement.setHotSpotPosition(Alignment9.NORTH);
        toggleButton.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        popupElement.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final BorderLayoutData checkOut17 = BorderLayoutData.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setData(BorderLayoutData.Values.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("White11");
        checkOut16.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element30.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlignment(Alignment9.WEST);
        element30.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("name");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut16.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element32 = new RowLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment9.CENTER);
        toggleButton.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("style");
        element33.setField("style");
        toggleButton.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("selected");
        element34.setField("selected");
        toggleButton.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        toggleButton.onChildrenAdded();
        element23.onChildrenAdded();
        element21.onChildrenAdded();
        this.method0(checkOut12);
        checkOut12.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method1(checkOut);
        this.method2(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "territoryFilter";
        final ToggleButton toggleButton = new ToggleButton();
        toggleButton.onCheckOut();
        toggleButton.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, toggleButton);
        }
        toggleButton.setStyle("filterTerritory");
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.dragoMap:setDisplayTerritories");
        toggleButton.setOnSelectionChange(onSelectionChange);
        toggleButton.setExpandable(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(filterDescPopup,territoryFilter)");
        toggleButton.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        toggleButton.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(toggleButton);
        toggleButton.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.SOUTH_EAST);
        element.setYOffset(24);
        element.setXOffset(-40);
        toggleButton.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("map");
        checkOut.setAttribute("selected");
        checkOut.setField("displayTerritories");
        toggleButton.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final String id2 = "filterDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.SOUTH);
        popupElement.setHotSpotPosition(Alignment9.NORTH);
        toggleButton.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("White11");
        element2.setText("%map.territories%".replace("%map.territories%", Xulor.getInstance().getTranslatedString("map.territories")));
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        toggleButton.onChildrenAdded();
        return toggleButton;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("new");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 15, 5, 15));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setSize(new Dimension(-2, -2));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(66, 66));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(protectorDescPopup)");
        checkOut2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut2.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setNeedsScissor(true);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setSize(new Dimension(46, 46));
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final AnimatedElementViewer element5 = new AnimatedElementViewer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setOffsetY(-7.0f);
        element5.setOffsetX(1.0f);
        element5.setScale(0.75f);
        element5.setAnimName("AnimStatique-Neutre");
        element5.setDirection(1);
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element6 = new PlainBackground();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setColor(new Color(0.0f, 0.0f, 0.0f, 0.5f));
        appearance2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("protector");
        checkOut4.setAttribute("animatedElement");
        checkOut4.setField("animation");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("protector");
        checkOut5.setAttribute("animName");
        checkOut5.setField("animName");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("protectorSimpleFrameOver");
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        element7.setXOffset(1);
        element7.setYOffset(-1);
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("protector");
        checkOut7.setAttribute("visible");
        checkOut7.setField("currentProtector");
        checkOut2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final OrCondition element9 = new OrCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final TrueCondition element11 = new TrueCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("protector");
        checkOut8.setAttribute("comparedValue");
        checkOut8.setField("isStatic");
        element11.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element11.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final String id = "protectorDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.SOUTH);
        popupElement.setHotSpotPosition(Alignment9.NORTH);
        checkOut2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("White11");
        checkOut9.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("text");
        checkOut10.setName("map");
        checkOut10.setField("currentProtectorDescription");
        element12.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.NORTH_WEST);
        element13.setSize(new Dimension(81, 81));
        element13.setYOffset(-1);
        element13.setXOffset(2);
        checkOut2.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(0, 48));
        checkOut.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut11.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(5, 3, 5, 3));
        appearance4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("title");
        checkOut11.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.CENTER);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("text");
        checkOut14.setName("map");
        checkOut14.setField("currentMapName");
        element14.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element14.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("title");
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.CENTER);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("text");
        checkOut15.setName("map");
        checkOut15.setField("currentTerritoryName");
        element15.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setDisplaySize(new Dimension(48, 48));
        checkOut.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element16.getAppearance();
        appearance7.setElementMap(elementMap);
        element16.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(5, 0, 5, 5));
        appearance7.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setAttribute("visible");
        checkOut17.setName("map");
        checkOut17.setField("currentTerritoryIconUrl");
        element16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        checkOut17.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final PixmapElement checkOut18 = PixmapElement.checkOut();
        checkOut18.setElementMap(elementMap);
        element16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("texture");
        checkOut19.setName("map");
        checkOut19.setField("currentTerritoryIconUrl");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, -2));
        element.setAlign(Alignment17.SOUTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("BigTitle");
        element2.setText("%map.position%".replace("%map.position%", Xulor.getInstance().getTranslatedString("map.position")));
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        element2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setStyle("11Light");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element3.getAppearance();
        appearance3.setElementMap(elementMap);
        element3.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 3, 0, 0));
        appearance3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("map");
        checkOut6.setAttribute("text");
        checkOut6.setField("displayedPosition");
        element3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
