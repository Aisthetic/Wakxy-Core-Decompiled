package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class WebShopArticleDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public WebShopArticleDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "window";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setNonBlocking(true);
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setName("webShop.article");
        checkOut8.setAttribute("text");
        checkOut8.setField("name");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut10.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut12);
        }
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final String id3 = "session";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        checkOut12.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("webShop");
        checkOut13.setAttribute("value");
        data.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        data.onChildrenAdded();
        final String id4 = "article";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, data2);
        }
        checkOut12.addBasicElement(data2);
        data2.onAttributesInitialized();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setLocal(true);
        checkOut14.setName("webShop.article");
        checkOut14.setAttribute("value");
        data2.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        data2.onChildrenAdded();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setHorizontal(false);
        checkOut12.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final StackList element10 = new StackList();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        checkOut12.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element10.getAppearance();
        appearance6.setElementMap(elementMap);
        element10.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(5, 15, 0, 15));
        appearance6.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance6.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        element10.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("webShop");
        checkOut18.setAttribute("content");
        checkOut18.setField("wallet");
        element10.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemCondition element13 = new ItemCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setKey("currencyId");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final EqualCondition element14 = new EqualCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setLocal(true);
        checkOut19.setName("webShop.article");
        checkOut19.setAttribute("value");
        checkOut19.setField("currencyId");
        element14.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setStyle("white");
        element11.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(true);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("bold");
        element15.setMinWidth(1);
        element15.setMaxWidth(100);
        element15.setText("%webShop.availableCash%".replace("%webShop.availableCash%", Xulor.getInstance().getTranslatedString("webShop.availableCash")));
        checkOut20.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance7 = element15.getAppearance();
        appearance7.setElementMap(elementMap);
        element15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(0, 10, 0, 0));
        appearance7.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance7.onChildrenAdded();
        element15.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setMinWidth(1);
        element17.setMaxWidth(100);
        checkOut20.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("text");
        element19.setField("description");
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element17.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setMinWidth(1);
        element20.setMaxWidth(100);
        element20.setStyle("title");
        element20.setExpandable(false);
        checkOut20.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element20.getAppearance();
        appearance8.setElementMap(elementMap);
        element20.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 0, 0, 4));
        appearance8.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.CENTER);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("text");
        element22.setField("value");
        element20.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element20.onChildrenAdded();
        final Image element23 = new Image();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setExpandable(false);
        checkOut20.addBasicElement(element23);
        element23.onAttributesInitialized();
        final RowLayoutData element24 = new RowLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment9.CENTER);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final PixmapElement checkOut24 = PixmapElement.checkOut();
        checkOut24.setElementMap(elementMap);
        element23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("texture");
        element25.setField("currency");
        checkOut24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        checkOut24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element11.onChildrenAdded();
        final ItemRenderer element26 = new ItemRenderer();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element10.addBasicElement(element26);
        element26.onAttributesInitialized();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setVisible(false);
        element26.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        element26.onChildrenAdded();
        element10.onChildrenAdded();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut12.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setStyle("tiledScroll");
        checkOut27.setExpandable(false);
        checkOut27.setPrefSize(new Dimension(400, 0));
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setSize(new Dimension(100.0f, 100.0f));
        element28.setAlign(Alignment17.CENTER);
        checkOut27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut27.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut27.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element29 = new Padding();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setInsets(new Insets(5, 0, 5, 0));
        appearance9.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final Margin checkOut28 = Margin.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setInsets(new Insets(20, 20, 19, 20));
        appearance9.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        appearance9.onChildrenAdded();
        final RowLayout checkOut29 = RowLayout.checkOut();
        checkOut29.setHorizontal(false);
        checkOut29.setAlign(Alignment9.NORTH);
        checkOut27.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setStyle("EncyclopediaSplashTitle");
        checkOut30.setPrefSize(new Dimension(0, 30));
        checkOut30.setExpandable(false);
        checkOut27.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final RowLayoutData element30 = new RowLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment9.CENTER);
        checkOut30.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final DecoratorAppearance appearance10 = checkOut30.getAppearance();
        appearance10.setElementMap(elementMap);
        checkOut30.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Padding element31 = new Padding();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setInsets(new Insets(0, 0, 3, 0));
        appearance10.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final Margin checkOut31 = Margin.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setInsets(new Insets(0, 0, 10, 0));
        appearance10.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        appearance10.onChildrenAdded();
        final RowLayout checkOut32 = RowLayout.checkOut();
        checkOut32.setAlign(Alignment9.CENTER);
        checkOut30.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        this.method0(checkOut30);
        this.method1(checkOut30);
        this.method2(checkOut30);
        checkOut30.onChildrenAdded();
        this.method3(checkOut27);
        this.method4(checkOut27);
        this.method5(checkOut27);
        this.method6(checkOut27);
        this.method7(checkOut27);
        this.method8(checkOut27);
        checkOut27.onChildrenAdded();
        this.method9(checkOut26);
        checkOut26.onChildrenAdded();
        checkOut12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method10(element);
        this.method11(element);
        this.method12(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(83, 39));
        element.setStyle("NationLeftDecorator");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("StyledBold16White");
        element.setNonBlocking(true);
        element.setExpandable(false);
        element.setText("%description%".replace("%description%", Xulor.getInstance().getTranslatedString("description")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(83, 39));
        element.setStyle("NationRightDecorator");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("TiledScrollBottom");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ScrollContainer element = new ScrollContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setVerticalScrollBarPosition(1.0f);
        element.setMaxSize(new Dimension(200, 200));
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(7, 15, 7, 15));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("darkbold11");
        element2.setMinWidth(1);
        element2.setMaxWidth(200);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("webShop.article");
        checkOut2.setAttribute("text");
        checkOut2.setField("description");
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("TiledScrollBottom");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(170, 52));
        element.setPrefSize(new Dimension(340, 0));
        element.setExpandable(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(2);
        element.setIdealSizeMaxColumns(2);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("webShop.article");
        checkOut.setLocal(true);
        checkOut.setField("contents");
        checkOut.setAttribute("content");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(7, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.WEST);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final String id = "articleContent";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("value");
        data.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openItemDescription(articleContent)");
        checkOut5.setOnClick(onClick);
        checkOut5.setNonBlocking(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("IconEmptyEmote");
        element9.setNonBlocking(true);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(-2, -2));
        element10.setAlign(Alignment17.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDisplaySize(new Dimension(48, 48));
        element11.setNonBlocking(true);
        checkOut5.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setSize(new Dimension(-2, -2));
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element11.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("texture");
        element13.setField("iconUrl");
        checkOut7.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element11.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setNonBlocking(true);
        checkOut5.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element14.getAppearance();
        appearance3.setElementMap(elementMap);
        element14.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        checkOut9.setName("text");
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setSize(new Dimension(-2, -2));
        element15.setAlign(Alignment17.SOUTH_EAST);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("quantity");
        element14.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("visible");
        element17.setField("quantity");
        element14.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ConditionResult element18 = new ConditionResult();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final GreaterCondition element19 = new GreaterCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setValue("1");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("styledBoldDark10");
        element20.setMinWidth(1);
        element20.setMaxWidth(115);
        element20.setExpandable(false);
        checkOut3.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("name");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance4 = element20.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.NORTH);
        element20.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(10, 0, 0, 0));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 20));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.EAST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("BorderedLight26");
        element2.setMinWidth(1);
        element2.setMaxWidth(300);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut3 = ColorElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("webShop.article");
        checkOut5.setLocal(true);
        checkOut5.setField("price");
        checkOut5.setAttribute("text");
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("webShop.article");
        checkOut7.setLocal(true);
        checkOut7.setField("currency");
        checkOut7.setAttribute("texture");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 15));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.EAST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Button element2 = new Button();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("yellowWebShop1");
        element2.setText("%cancel%".replace("%cancel%", Xulor.getInstance().getTranslatedString("cancel")));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element2.setOnClick(onClick);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.SOUTH);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("enabled");
        checkOut3.setName("webShop");
        checkOut3.setField("ready");
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        final Button element4 = new Button();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("yellowWebShop2");
        element4.setText("%buy%".replace("%buy%", Xulor.getInstance().getTranslatedString("buy")));
        element4.setPixmapAlign(Alignment4.EAST);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.webShop:quickBuy(session,article);unloadDialog");
        element4.setOnClick(onClick2);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("webShop.article");
        checkOut4.setAttribute("text");
        checkOut4.setField("isARental");
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setValue("%rent%".replace("%rent%", Xulor.getInstance().getTranslatedString("rent")));
        element5.setElseValue("%buy%".replace("%buy%", Xulor.getInstance().getTranslatedString("buy")));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final RowLayoutData element7 = new RowLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.SOUTH);
        element4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("webShopPurse");
        element8.setDisplaySize(new Dimension(16, 16));
        element4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("enabled");
        checkOut5.setName("webShop");
        checkOut5.setField("ready");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final AndCondition element10 = new AndCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final TrueCondition element11 = new TrueCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final TrueCondition element12 = new TrueCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("webShop.article");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("comparedValue");
        checkOut6.setField("hasEnoughMoney");
        element12.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaPane");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.EAST);
        element.setResizeOnce(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
