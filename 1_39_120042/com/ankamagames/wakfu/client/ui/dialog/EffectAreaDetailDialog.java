package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import java.awt.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;

public class EffectAreaDetailDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public EffectAreaDetailDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "mainWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInitValue(true);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final WindowMovePoint element4 = new WindowMovePoint();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("popup");
        checkOut.setPack(true);
        element4.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "stateDetailPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final ElementMap parentElementMap = elementMap;
        final ElementMap elementMap2 = this.env.createElementMap(((elementMap != null) ? elementMap.getId() : "") + ".itemDetailPopupInc");
        elementMap2.setParentElementMap(parentElementMap);
        this.elementMaps.push(elementMap2);
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap2);
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap2);
        checkOut4.setExpandable(false);
        checkOut4.setVisible(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap2);
        checkOut5.setName("describedIcon");
        checkOut5.setAttribute("visible");
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap2);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap2);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap2);
        element8.setStyle("white11");
        element8.setMultiline(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap2);
        checkOut6.setName("describedIcon");
        checkOut6.setAttribute("text");
        element8.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap2);
        checkOut7.setExpandable(false);
        checkOut2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap2);
        checkOut8.setName("describedState");
        checkOut8.setAttribute("visible");
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap2);
        checkOut8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap2);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap2);
        checkOut7.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap2);
        element11.setExpandable(false);
        element11.setDisplaySize(new Dimension(32, 32));
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final RowLayoutData element12 = new RowLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap2);
        element12.setAlign(Alignment9.WEST);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PixmapElement checkOut12 = PixmapElement.checkOut();
        checkOut12.setElementMap(elementMap2);
        element11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap2);
        checkOut13.setName("describedState");
        checkOut13.setAttribute("texture");
        checkOut13.setField("iconUrl");
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap2);
        checkOut10.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut14.getAppearance();
        appearance.setElementMap(elementMap2);
        checkOut14.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap2);
        checkOut15.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(false);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap2);
        checkOut17.setExpandable(false);
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap2);
        element13.setStyle("bigTitle");
        element13.setExpandable(false);
        element13.setMinWidth(190);
        element13.setNonBlocking(true);
        checkOut17.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element13.getAppearance();
        appearance2.setElementMap(elementMap2);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.NORTH_WEST);
        element13.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap2);
        checkOut19.setName("describedState");
        checkOut19.setAttribute("text");
        checkOut19.setField("nameWithFormat");
        element13.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element13.onChildrenAdded();
        final Spacer element14 = new Spacer();
        element14.onCheckOut();
        element14.setElementMap(elementMap2);
        checkOut17.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap2);
        element15.setStyle("11light");
        element15.setExpandable(false);
        checkOut17.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element15.getAppearance();
        appearance3.setElementMap(elementMap2);
        element15.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap2);
        checkOut20.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap2);
        checkOut21.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance3.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap2);
        checkOut22.setAttribute("visible");
        checkOut22.setName("describedState");
        checkOut22.setField("maxLevelValue");
        element15.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap2);
        checkOut22.addBasicElement(element16);
        element16.onAttributesInitialized();
        final GreaterCondition element17 = new GreaterCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap2);
        element17.setValue("1");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap2);
        checkOut23.setName("describedState");
        checkOut23.setAttribute("text");
        checkOut23.setField("level");
        element15.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap2);
        element18.setStyle("stateCumulable");
        checkOut14.addBasicElement(element18);
        element18.onAttributesInitialized();
        final RowLayoutData element19 = new RowLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap2);
        element19.setAlign(Alignment9.WEST);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap2);
        checkOut24.setName("describedState");
        checkOut24.setAttribute("visible");
        checkOut24.setField("isCumulable");
        element18.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap2);
        checkOut7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final RowLayout checkOut26 = RowLayout.checkOut();
        checkOut26.setHorizontal(false);
        checkOut25.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap2);
        checkOut27.setName("describedState");
        checkOut27.setAttribute("visible");
        checkOut27.setField("description");
        checkOut25.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap2);
        checkOut27.addBasicElement(element20);
        element20.onAttributesInitialized();
        final AndCondition element21 = new AndCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap2);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final NotNullCondition element22 = new NotNullCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap2);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final NotEqualCondition element23 = new NotEqualCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap2);
        element23.setValue("");
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut27.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap2);
        checkOut28.setExpandable(false);
        checkOut28.setStyle("lineSeparator2");
        checkOut28.setPrefSize(new Dimension(50, 1));
        checkOut25.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut28.getAppearance();
        appearance4.setElementMap(elementMap2);
        checkOut28.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut29 = Margin.checkOut();
        checkOut29.setElementMap(elementMap2);
        checkOut29.setInsets(new Insets(5, 20, 5, 20));
        appearance4.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap2);
        element24.setExpandable(false);
        element24.setStyle("narrow12");
        element24.setMinWidth(230);
        checkOut25.addBasicElement(element24);
        element24.onAttributesInitialized();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap2);
        element25.setAlign(Alignment9.WEST);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final DecoratorAppearance appearance5 = element24.getAppearance();
        appearance5.setElementMap(elementMap2);
        element24.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap2);
        checkOut30.setInsets(new Insets(0, 10, 0, 0));
        appearance5.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final ColorElement checkOut31 = ColorElement.checkOut();
        checkOut31.setElementMap(elementMap2);
        checkOut31.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance5.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut32 = PropertyElement.checkOut();
        checkOut32.setElementMap(elementMap2);
        checkOut32.setName("describedState");
        checkOut32.setAttribute("text");
        checkOut32.setField("description");
        element24.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut25.onChildrenAdded();
        final Container checkOut33 = Container.checkOut();
        checkOut33.setElementMap(elementMap2);
        checkOut7.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final RowLayout checkOut34 = RowLayout.checkOut();
        checkOut34.setHorizontal(false);
        checkOut33.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        checkOut34.onChildrenAdded();
        final PropertyElement checkOut35 = PropertyElement.checkOut();
        checkOut35.setElementMap(elementMap2);
        checkOut35.setName("describedState");
        checkOut35.setAttribute("visible");
        checkOut35.setField("effectDescription");
        checkOut33.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap2);
        checkOut35.addBasicElement(element26);
        element26.onAttributesInitialized();
        final AndCondition element27 = new AndCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap2);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final NotNullCondition element28 = new NotNullCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap2);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final NotEqualCondition element29 = new NotEqualCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap2);
        element29.setValue("");
        element27.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut35.onChildrenAdded();
        final Container checkOut36 = Container.checkOut();
        checkOut36.setElementMap(elementMap2);
        checkOut36.setExpandable(false);
        checkOut36.setStyle("lineSeparator2");
        checkOut36.setPrefSize(new Dimension(50, 1));
        checkOut33.addBasicElement(checkOut36);
        checkOut36.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut36.getAppearance();
        appearance6.setElementMap(elementMap2);
        checkOut36.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut37 = Margin.checkOut();
        checkOut37.setElementMap(elementMap2);
        checkOut37.setInsets(new Insets(5, 20, 5, 20));
        appearance6.addBasicElement(checkOut37);
        checkOut37.onAttributesInitialized();
        checkOut37.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut36.onChildrenAdded();
        final StackList element30 = new StackList();
        element30.onCheckOut();
        element30.setElementMap(elementMap2);
        element30.setHorizontal(false);
        checkOut33.addBasicElement(element30);
        element30.onAttributesInitialized();
        final PropertyElement checkOut38 = PropertyElement.checkOut();
        checkOut38.setElementMap(elementMap2);
        checkOut38.setName("describedState");
        checkOut38.setAttribute("content");
        checkOut38.setField("effectDescription");
        element30.addBasicElement(checkOut38);
        checkOut38.onAttributesInitialized();
        checkOut38.onChildrenAdded();
        final ItemRenderer element31 = new ItemRenderer();
        element31.onCheckOut();
        element31.setElementMap(elementMap2);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        this.method0(element31);
        this.method1(element31);
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut33.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.elementMaps.pop();
        final ElementMap elementMap3 = this.elementMaps.peek();
        popupElement.onChildrenAdded();
        this.method2(checkOut);
        checkOut.onChildrenAdded();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemCondition element2 = new ItemCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white11");
        element.setMinWidth(230);
        element.setMaxWidth(230);
        element.setExpandable(false);
        element.setEnableOnlySelectablePartInteraction(true);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "container";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.WEST);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setDisplaySize(new Dimension(32, 32));
        element.setNonBlocking(true);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("describedState");
        checkOut6.setAttribute("texture");
        checkOut6.setField("iconUrl");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut7.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut7.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("bigTitle");
        element3.setExpandable(false);
        element3.setMinWidth(190);
        element3.setNonBlocking(true);
        checkOut10.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.NORTH_WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setLocal(true);
        checkOut12.setName("describedState");
        checkOut12.setAttribute("text");
        checkOut12.setField("nameWithFormat");
        element3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element3.onChildrenAdded();
        final Spacer element4 = new Spacer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut10.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("11light");
        element5.setExpandable(false);
        element5.setPrefSize(new Dimension(40, 0));
        checkOut10.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance3.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setLocal(true);
        checkOut15.setName("describedState");
        checkOut15.setAttribute("text");
        checkOut15.setField("level");
        element5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Button element6 = new Button();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("close");
        element6.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element6.setOnClick(onClick);
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final RowLayoutData element7 = new RowLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.NORTH);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setLocal(true);
        checkOut18.setName("describedState");
        checkOut18.setAttribute("visible");
        checkOut18.setField("effectDescription");
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut18.addBasicElement(element8);
        element8.onAttributesInitialized();
        final AndCondition element9 = new AndCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final NotEqualCondition element11 = new NotEqualCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setValue("");
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setExpandable(false);
        checkOut19.setStyle("lineSeparator2");
        checkOut19.setPrefSize(new Dimension(50, 1));
        checkOut19.setNonBlocking(true);
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut19.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(5, 20, 5, 20));
        appearance4.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final StackList element12 = new StackList();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setHorizontal(false);
        checkOut16.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setLocal(true);
        checkOut21.setName("describedState");
        checkOut21.setAttribute("content");
        checkOut21.setField("effectDescription");
        element12.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final ItemRenderer element13 = new ItemRenderer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemCondition element15 = new ItemCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final NotNullCondition element16 = new NotNullCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        element13.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white11");
        element17.setMinWidth(230);
        element17.setMaxWidth(230);
        element17.setExpandable(false);
        element17.setEnableOnlySelectablePartInteraction(true);
        element17.setNonBlocking(false);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.itemDetails:processText(container,stateDetailPopup)");
        element17.setOnClick(onClick2);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.itemDetails:processText(container,stateDetailPopup)");
        element17.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element17.setOnMouseExit(onMouseExit);
        checkOut22.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element17.getAppearance();
        appearance5.setElementMap(elementMap);
        element17.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut22.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut16.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
