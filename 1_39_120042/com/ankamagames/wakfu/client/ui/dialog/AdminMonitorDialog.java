package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.*;

public class AdminMonitorDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public AdminMonitorDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "equipInventWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPrefSize(new Dimension(200, 200));
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setInitValue(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(400, 250));
        element3.setAlign(Alignment17.NORTH_WEST);
        element3.setXOffset(100);
        element3.setYOffset(-100);
        element3.setInitValue(true);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setStyle("itemInventoryBarBackground");
        checkOut.setPrefSize(new Dimension(18, 100));
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayout element4 = new BorderLayout();
        element4.onCheckOut();
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final WindowMovePoint element5 = new WindowMovePoint();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        element5.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final BorderLayout element6 = new BorderLayout();
        element6.onCheckOut();
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        element6.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setText("Admin Monitor");
        element7.setOrientation(Orientation.NORTH);
        element7.setNonBlocking(true);
        element7.setStyle("bold");
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.CENTER);
        element7.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("brownInventoryBackground");
        checkOut5.setNonBlocking(false);
        element.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut5.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(15, 0, 10, 7));
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 5, 8));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut7.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut10.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("whiteTitle");
        element10.setText("Statistics");
        checkOut10.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.NORTH);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance3 = element10.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element10.onChildrenAdded();
        final Button element12 = new Button();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("close");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element12.setOnClick(onClick);
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.NORTH_EAST);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut7.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final BorderLayout element14 = new BorderLayout();
        element14.onCheckOut();
        checkOut11.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ScrollContainer element15 = new ScrollContainer();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setPrefSize(new Dimension(0, 100));
        element15.setVerticalScrollBarPosition(1.0f);
        element15.setHorizontalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        element15.setVerticalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.WHEN_NEEDED);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final BorderLayoutData checkOut12 = BorderLayoutData.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setData(BorderLayoutData.Values.CENTER);
        element15.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final StackList element16 = new StackList();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setHorizontal(false);
        element16.setInnerExpandable(false);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut13.setAlign(Alignment9.NORTH);
        element16.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("statistics");
        checkOut14.setAttribute("content");
        checkOut14.setField("categories");
        element16.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final ItemRenderer element17 = new ItemRenderer();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        element17.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut15.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 10, 20, 10));
        appearance4.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        checkOut15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut15.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("whiteTitle");
        checkOut18.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element18.getAppearance();
        appearance5.setElementMap(elementMap);
        element18.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setField("name");
        element19.setAttribute("text");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final String id2 = "innerContainer";
        final StackList list = new StackList();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, list);
        }
        list.setHorizontal(false);
        list.setInnerExpandable(false);
        checkOut15.addBasicElement(list);
        list.onAttributesInitialized();
        final String id3 = "categoryView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        list.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("value");
        data.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        data.onChildrenAdded();
        final DecoratorAppearance appearance6 = list.getAppearance();
        appearance6.setElementMap(elementMap);
        list.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 5, 0, 0));
        appearance6.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance6.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut21.setAlign(Alignment9.NORTH);
        list.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("content");
        element21.setField("elements");
        list.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final ItemRenderer element22 = new ItemRenderer();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        list.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ItemCondition element24 = new ItemCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setField("type");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final EqualCondition element25 = new EqualCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("0");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setNonBlocking(false);
        element22.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final ToolTipElement element26 = new ToolTipElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        checkOut22.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("tooltipText");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final TextView element28 = new TextView();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("whiteBold");
        element28.setNonBlocking(true);
        checkOut22.addBasicElement(element28);
        element28.onAttributesInitialized();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element29.setField("name");
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("white");
        element30.setNonBlocking(true);
        checkOut22.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element30.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.EAST);
        element30.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("value");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut22.onChildrenAdded();
        element22.onChildrenAdded();
        final ItemRenderer element32 = new ItemRenderer();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        list.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ConditionResult element33 = new ConditionResult();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final ItemCondition element34 = new ItemCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setField("type");
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        final EqualCondition element35 = new EqualCondition();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setValue("1");
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        element32.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut23.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut23.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final PlainBorder element36 = new PlainBorder();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element36.setInsets(new Insets(1, 1, 1, 1));
        appearance8.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHorizontal(false);
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final List element37 = new List();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setHorizontal(false);
        element37.setAutoIdealSize(true);
        checkOut23.addBasicElement(element37);
        element37.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element37.getAppearance();
        appearance9.setElementMap(elementMap);
        element37.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final PlainBorder element38 = new PlainBorder();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setInsets(new Insets(1, 0, 2, 0));
        element38.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance9.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        appearance9.onChildrenAdded();
        final ItemElement element39 = new ItemElement();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setAttribute("cellSize");
        element39.setField("cellSize");
        element37.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final ItemElement element40 = new ItemElement();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAttribute("content");
        element40.setField("fieldNames");
        element37.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        this.method0(element37);
        element37.onChildrenAdded();
        this.method1(checkOut23);
        checkOut23.onChildrenAdded();
        element32.onChildrenAdded();
        list.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut7.onChildrenAdded();
        this.method2(checkOut5);
        checkOut5.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("whiteBold");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element3 = new PlainBorder();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(0, 1, 0, 0));
        element3.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.CENTER);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("text");
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ToolTipElement element5 = new ToolTipElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(false);
        element.setAutoIdealSize(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("cellSize");
        element2.setField("cellSize");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("content");
        element3.setField("rows");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final ItemRenderer element4 = new ItemRenderer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        element4.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ToolTipElement element5 = new ToolTipElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("tooltipText");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("white");
        element7.setNonBlocking(true);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance = element7.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        element7.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element8 = new PlainBorder();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element8.setInsets(new Insets(0, 1, 1, 0));
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("value");
        element7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut.onChildrenAdded();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final WindowResizePoint element = new WindowResizePoint();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setPointAlign(Alignment9.SOUTH_EAST);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descChatWindowResizePopup)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.SOUTH_EAST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("WRPSouthEast");
        element3.setNonBlocking(true);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final String id = "descChatWindowResizePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("PopupInformation");
        element4.setText("%desc.window.resize%".replace("%desc.window.resize%", Xulor.getInstance().getTranslatedString("desc.window.resize")));
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance = element4.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
