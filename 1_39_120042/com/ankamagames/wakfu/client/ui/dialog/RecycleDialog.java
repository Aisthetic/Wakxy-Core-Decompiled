package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;

public class RecycleDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public RecycleDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "recycleWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setNonBlocking(true);
        element9.setText("%recycle%".replace("%recycle%", Xulor.getInstance().getTranslatedString("recycle")));
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut8.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut10);
        }
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut12.setAlign(Alignment9.NORTH);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(5, 5, 0, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut13.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setStyle("caracs");
        checkOut13.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.CENTER);
        element11.setSize(new Dimension(100.0f, 100.0f));
        checkOut15.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut15.getAppearance();
        appearance7.setElementMap(elementMap);
        appearance7.setModulationColor(new Color(0.9f, 0.9f, 0.9f, 1.0f));
        checkOut15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 0, 0, 0));
        appearance7.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final ScrollContainer element12 = new ScrollContainer();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setPrefSize(new Dimension(375, 280));
        element12.setExpandable(false);
        checkOut13.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.CENTER);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element13.setXOffset(3);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance8 = element12.getAppearance();
        appearance8.setElementMap(elementMap);
        element12.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(7, 5, 5, 0));
        appearance8.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance8.onChildrenAdded();
        final List element14 = new List();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setCellSize(new Dimension(40, 40));
        element14.setScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        element14.setHorizontal(false);
        element14.setAutoIdealSize(true);
        element14.setIdealSizeMaxColumns(9);
        element14.setIdealSizeMinColumns(9);
        element14.setSelectionTogglable(false);
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.WEST);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("content");
        checkOut18.setName("localPlayer");
        checkOut18.setField("bags/recyclableItemsView/bagInventory");
        element14.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("recycleRunning");
        checkOut19.setAttribute("enableDND");
        element14.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        checkOut19.addBasicElement(element16);
        element16.onAttributesInitialized();
        final FalseCondition element17 = new FalseCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final ItemRenderer element18 = new ItemRenderer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        final DropListener onDrop = new DropListener();
        onDrop.setCallBackFunc("wakfu.recycle:dropIngredient");
        element18.setOnDrop(onDrop);
        final ItemDoubleClickListener onItemDoubleClick = new ItemDoubleClickListener();
        onItemDoubleClick.setCallBackFunc("wakfu.recycle:addIngredient");
        element18.setOnItemDoubleClick(onItemDoubleClick);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.recycle:openItemDetailWindow(recycleWindow)");
        element18.setOnItemClick(onItemClick);
        final DropOutListener onDropOut = new DropOutListener();
        onDropOut.setCallBackFunc("wakfu.recycle:inventoryDropOutItem");
        element18.setOnDropOut(onDropOut);
        element14.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ItemCondition element20 = new ItemCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final NotNullCondition element21 = new NotNullCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final String id3 = "currentItem";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        element18.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("value");
        data.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        element18.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayout element23 = new StaticLayout();
        element23.onCheckOut();
        checkOut20.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final String id4 = "itemContainer";
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, checkOut21);
        }
        checkOut21.setNonBlocking(false);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.recycle:changeItemBackground(currentItem,itemPopup)");
        checkOut21.setOnMouseExit(onMouseExit);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.recycle:changeItemBackground(currentItem,itemPopup)");
        checkOut21.setOnMouseEnter(onMouseEnter);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("style");
        element24.setField("usedInCurrentRecipe");
        checkOut21.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("itemSetSelectedBackground");
        element25.setElseValue("itemBackground");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final TrueCondition element26 = new TrueCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final StaticLayoutData element27 = new StaticLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAlign(Alignment17.CENTER);
        element27.setSize(new Dimension(43, 43));
        checkOut21.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final String id5 = "itemPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut21.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setPrefSize(new Dimension(10, 0));
        checkOut22.setStyle("popup");
        popupElement.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final BorderLayoutData checkOut23 = BorderLayoutData.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setData(BorderLayoutData.Values.CENTER);
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("visible");
        element28.setField("name");
        checkOut22.addBasicElement(element28);
        element28.onAttributesInitialized();
        final ConditionResult element29 = new ConditionResult();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final NotCondition element30 = new NotCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final EqualCondition element31 = new EqualCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setValue("");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHorizontal(false);
        checkOut24.setAlign(Alignment9.NORTH);
        checkOut22.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final Label element32 = new Label();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("PopupInformation");
        element32.setExpandable(false);
        checkOut22.addBasicElement(element32);
        element32.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element32.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlignment(Alignment9.WEST);
        element32.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        appearance9.onChildrenAdded();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("text");
        element33.setField("name");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        final TextView element34 = new TextView();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setStyle("PopupInformation");
        element34.setExpandable(false);
        element34.setText("%doubleClickToAddOne%".replace("%doubleClickToAddOne%", Xulor.getInstance().getTranslatedString("doubleClickToAddOne")));
        checkOut22.addBasicElement(element34);
        element34.onAttributesInitialized();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("visible");
        checkOut25.setName("recycleRunning");
        element34.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        checkOut25.addBasicElement(element35);
        element35.onAttributesInitialized();
        final FalseCondition element36 = new FalseCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        checkOut25.onChildrenAdded();
        this.method0(element34);
        element34.onChildrenAdded();
        checkOut22.onChildrenAdded();
        popupElement.onChildrenAdded();
        this.method1(checkOut21);
        checkOut21.onChildrenAdded();
        this.method2(checkOut20);
        checkOut20.onChildrenAdded();
        element18.onChildrenAdded();
        this.method3(element14);
        element14.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut13.onChildrenAdded();
        this.method4(checkOut11);
        checkOut11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method9(element);
        this.method10(element);
        this.method11(element);
        this.method12(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DragNDropContainer element = new DragNDropContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final DragListener onDrag = new DragListener();
        onDrag.setCallBackFunc("wakfu.recycle:inventoryDragItem(currentItem)");
        element.setOnDrag(onDrag);
        final DropListener onDrop = new DropListener();
        onDrop.setCallBackFunc("wakfu.recycle:inventoryDropOutItem");
        element.setOnDrop(onDrop);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("dragEnabled");
        checkOut.setName("recycleRunning");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final FalseCondition element3 = new FalseCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setNonBlocking(true);
        element5.setDisplaySize(new Dimension(38, 38));
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut2 = PixmapElement.checkOut();
        checkOut2.setElementMap(elementMap);
        element5.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("texture");
        element7.setField("iconUrl");
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.CENTER);
        element8.setSize(new Dimension(40, 40));
        checkOut3.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("visible");
        checkOut4.setName("recycleRunning");
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element9 = new PlainBackground();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        appearance.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element10.setStyle("White10Bordered");
        element.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("visible");
        element11.setField("quantity");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final GreaterCondition element13 = new GreaterCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("1");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.SOUTH_WEST);
        element10.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance2 = element10.getAppearance();
        appearance2.setElementMap(elementMap);
        element10.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 6, 6, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("quantity");
        element10.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element10.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(true);
        checkOut.setStyle("ItemBackgroundPerfectVariant");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(43, 43));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("isPerfect");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final DropListener onDrop = new DropListener();
        onDrop.setCallBackFunc("wakfu.recycle:dropIngredient");
        element.setOnDrop(onDrop);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NullCondition element4 = new NullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DragNDropContainer element5 = new DragNDropContainer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        final DropListener onDrop2 = new DropListener();
        onDrop2.setCallBackFunc("wakfu.recycle:inventoryDropOutItem");
        element5.setOnDrop(onDrop2);
        element5.setDragEnabled(false);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final String id = "itemBackgroundContainer";
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut2);
        }
        checkOut2.setStyle("itemBackground");
        element5.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.CENTER);
        element7.setSize(new Dimension(43, 43));
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("white");
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 90));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(7, 12, 7, 12));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.NORTH_WEST);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final String id = "ingredientList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(45, 45));
        list.setPrefSize(new Dimension(180, 90));
        checkOut2.addBasicElement(list);
        list.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("content");
        checkOut3.setName("recycleStack");
        list.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("recycleRunning");
        checkOut4.setAttribute("enableDND");
        list.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        final FalseCondition element5 = new FalseCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final ItemRenderer element6 = new ItemRenderer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        final DropOutListener onDropOut = new DropOutListener();
        onDropOut.setCallBackFunc("wakfu.recycle:itemDropOut");
        element6.setOnDropOut(onDropOut);
        final ItemDoubleClickListener onItemDoubleClick = new ItemDoubleClickListener();
        onItemDoubleClick.setCallBackFunc("wakfu.recycle:removeIngredient");
        element6.setOnItemDoubleClick(onItemDoubleClick);
        list.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ItemCondition element8 = new ItemCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final NotNullCondition element9 = new NotNullCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("itemBackground");
        checkOut6.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descIngredient)");
        checkOut6.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut6.setOnPopupHide(onPopupHide);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.recycle:changeItemBackground()");
        checkOut6.setOnMouseExit(onMouseExit);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.recycle:changeItemBackground()");
        checkOut6.setOnMouseEnter(onMouseEnter);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.CENTER);
        checkOut6.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final String id2 = "descIngredient";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut6.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setPrefSize(new Dimension(10, 0));
        checkOut7.setStyle("popup");
        popupElement.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final BorderLayoutData checkOut8 = BorderLayoutData.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setData(BorderLayoutData.Values.CENTER);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut9.setAlign(Alignment9.NORTH);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("white");
        element12.setExpandable(false);
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element12.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element12.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("name");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("white");
        element14.setText("(%desc.missingIngredient%)".replace("%desc.missingIngredient%", Xulor.getInstance().getTranslatedString("desc.missingIngredient")));
        element14.setExpandable(false);
        checkOut7.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element14.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element14.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("visible");
        element15.setField("isPossessed");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final FalseCondition element17 = new FalseCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("PopupInformation");
        element18.setExpandable(false);
        element18.setText("%doubleClickToRemoveOne%".replace("%doubleClickToRemoveOne%", Xulor.getInstance().getTranslatedString("doubleClickToRemoveOne")));
        checkOut7.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut7.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DragNDropContainer element19 = new DragNDropContainer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        final DropListener onDrop = new DropListener();
        onDrop.setCallBackFunc("wakfu.recycle:dropItem");
        element19.setOnDrop(onDrop);
        checkOut6.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("recycleRunning");
        checkOut11.setAttribute("dropEnabled");
        element19.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        checkOut11.addBasicElement(element20);
        element20.onAttributesInitialized();
        final FalseCondition element21 = new FalseCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final StaticLayout element22 = new StaticLayout();
        element22.onCheckOut();
        element22.setAdaptToContentSize(true);
        element19.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final Image element23 = new Image();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setDisplaySize(new Dimension(41, 41));
        element23.setNonBlocking(true);
        element19.addBasicElement(element23);
        element23.onAttributesInitialized();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment17.CENTER);
        element24.setSize(new Dimension(-2, -2));
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final PixmapElement checkOut12 = PixmapElement.checkOut();
        checkOut12.setElementMap(elementMap);
        element23.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("texture");
        element25.setField("iconUrl");
        checkOut12.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element23.onChildrenAdded();
        final Label element26 = new Label();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("White10Bordered");
        element26.setNonBlocking(true);
        element19.addBasicElement(element26);
        element26.onAttributesInitialized();
        final StaticLayoutData element27 = new StaticLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAlign(Alignment17.SOUTH_EAST);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance5 = element26.getAppearance();
        appearance5.setElementMap(elementMap);
        element26.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 4, 4));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        element28.setField("quantity");
        element26.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element26.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setNonBlocking(true);
        checkOut14.setStyle("ItemBackgroundPerfectVariant");
        checkOut5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAlign(Alignment17.CENTER);
        element29.setSize(new Dimension(100.0f, 100.0f));
        checkOut14.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("visible");
        element30.setField("isPerfect");
        checkOut14.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final ItemRenderer element31 = new ItemRenderer();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        list.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ItemCondition element33 = new ItemCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final NullCondition element34 = new NullCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        final String id3 = "ingredientBackgroundContainer";
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut15);
        }
        checkOut15.setStyle("itemBackground");
        element31.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DragNDropContainer element35 = new DragNDropContainer();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        final DropListener onDrop2 = new DropListener();
        onDrop2.setCallBackFunc("wakfu.recycle:dropItem");
        element35.setOnDrop(onDrop2);
        element35.setDragEnabled(false);
        checkOut15.addBasicElement(element35);
        element35.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("recycleRunning");
        checkOut16.setAttribute("dropEnabled");
        element35.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ConditionResult element36 = new ConditionResult();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        checkOut16.addBasicElement(element36);
        element36.onAttributesInitialized();
        final FalseCondition element37 = new FalseCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        element36.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element35.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element31.onChildrenAdded();
        list.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setPrefSize(new Dimension(140, 120));
        checkOut.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element38 = new StaticLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setAlign(Alignment17.SOUTH_EAST);
        element38.setYOffset(-30);
        element38.setXOffset(-5);
        checkOut17.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        final StaticLayout element39 = new StaticLayout();
        element39.onCheckOut();
        element39.setAdaptToContentSize(true);
        checkOut17.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayoutData element40 = new StaticLayoutData();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setSize(new Dimension(68, 68));
        element40.setAlign(Alignment17.SOUTH_EAST);
        element40.setXOffset(-11);
        element40.setYOffset(11);
        checkOut18.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        final StaticLayout element41 = new StaticLayout();
        element41.onCheckOut();
        element41.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        final ProgressBar element42 = new ProgressBar();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setDisplayType(ProgressBar.ProgressBarDisplayType.CIRCLE);
        element42.setStyle("XP2");
        element42.setUseIncreaseProgressTween(false);
        element42.setValue(1.0f);
        checkOut18.addBasicElement(element42);
        element42.onAttributesInitialized();
        final StaticLayoutData element43 = new StaticLayoutData();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element43.setAlign(Alignment17.CENTER);
        element43.setSize(new Dimension(72, 72));
        element42.addBasicElement(element43);
        element43.onAttributesInitialized();
        element43.onChildrenAdded();
        final DecoratorAppearance appearance6 = element42.getAppearance();
        appearance6.setElementMap(elementMap);
        element42.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        this.method5(appearance6);
        appearance6.onChildrenAdded();
        element42.onChildrenAdded();
        this.method6(checkOut18);
        checkOut18.onChildrenAdded();
        this.method7(checkOut17);
        this.method8(checkOut17);
        checkOut17.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("progressBar");
        checkOut.setColor(new Color(0.43f, 0.42f, 0.37f, 1.0f));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "progressBar";
        final ProgressBar progressBar = new ProgressBar();
        progressBar.onCheckOut();
        progressBar.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, progressBar);
        }
        progressBar.setDisplayType(ProgressBar.ProgressBarDisplayType.CIRCLE);
        progressBar.setStyle("XP2");
        progressBar.setUseDecreaseProgressTween(false);
        basicElement.addBasicElement(progressBar);
        progressBar.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(72, 72));
        progressBar.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = progressBar.getAppearance();
        appearance.setElementMap(elementMap);
        progressBar.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("progressBar");
        checkOut.setColor(new Color(0.38f, 1.0f, 0.92f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        progressBar.onChildrenAdded();
        return progressBar;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("CraftControlBackground");
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.SOUTH_EAST);
        element2.setXOffset(3);
        element2.setYOffset(-3);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.SOUTH_EAST);
        element.setXOffset(-8);
        element.setYOffset(8);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "startButton";
        final ToggleButton toggleButton = new ToggleButton();
        toggleButton.onCheckOut();
        toggleButton.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, toggleButton);
        }
        toggleButton.setExpandable(false);
        toggleButton.setStyle("StartCraft");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(startButtonPopup)");
        toggleButton.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        toggleButton.setOnPopupHide(onPopupHide);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.recycle:startCraft(progressBar)");
        toggleButton.setOnClick(onClick);
        checkOut.addBasicElement(toggleButton);
        toggleButton.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.CENTER);
        toggleButton.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("recycleRunning");
        toggleButton.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("enabled");
        checkOut3.setName("recycleStackSize");
        toggleButton.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final FalseCondition element6 = new FalseCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("comparedValue");
        checkOut4.setName("recycleRunning");
        element6.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element6.onChildrenAdded();
        final GreaterCondition element7 = new GreaterCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("0");
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final String id2 = "startButtonPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        toggleButton.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("White11");
        element8.setExpandable(false);
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance = element8.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element8.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("text");
        checkOut7.setName("recycleRunning");
        element8.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setValue("%desc.cancel%".replace("%desc.cancel%", Xulor.getInstance().getTranslatedString("desc.cancel")));
        element9.setElseValue("%desc.startRecycle%".replace("%desc.startRecycle%", Xulor.getInstance().getTranslatedString("desc.startRecycle")));
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final TrueCondition element10 = new TrueCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        toggleButton.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setNonBlocking(true);
        element11.setStyle("recycle");
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setSize(new Dimension(-2, -2));
        element12.setXOffset(-2);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("visible");
        checkOut8.setName("recycleRunning");
        element11.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        checkOut8.addBasicElement(element13);
        element13.onAttributesInitialized();
        final FalseCondition element14 = new FalseCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setAttribute("modulationColor");
        checkOut9.setName("currentCraftNb");
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setValue("1,1,1,1");
        element15.setElseValue("1,1,1,0.5");
        checkOut9.addBasicElement(element15);
        element15.onAttributesInitialized();
        final NotCondition element16 = new NotCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final EqualCondition element17 = new EqualCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setValue("0");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "closeRecycleDialog";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("close");
        button.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        button.setOnClick(onClick);
        basicElement.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.NORTH_EAST);
        element.setXOffset(-18);
        element.setYOffset(-12);
        button.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        button.onChildrenAdded();
        return button;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.EAST);
        element.setInitValue(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("questionMark");
        element.setExpandable(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descRecyclePopup)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-40);
        element2.setYOffset(-14);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "descRecyclePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("white");
        element3.setText("%recycle.description%".replace("%recycle.description%", Xulor.getInstance().getTranslatedString("recycle.description")));
        element3.setMinWidth(1);
        element3.setMaxWidth(250);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
