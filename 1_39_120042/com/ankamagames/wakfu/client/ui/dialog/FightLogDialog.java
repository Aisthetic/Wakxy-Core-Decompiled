package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.*;

public class FightLogDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public FightLogDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Window window = new Window();
        window.onCheckOut();
        window.setElementMap(elementMap);
        window.setStyle("chat");
        window.setNonBlocking(true);
        window.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.EAST);
        element.setInitValue(true);
        element.setXOffset(-10);
        window.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("popup");
        checkOut.setPrefSize(new Dimension(180, 100));
        checkOut.setNonBlocking(true);
        window.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final WindowMovePoint element3 = new WindowMovePoint();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setNonBlocking(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ScrollContainer element5 = new ScrollContainer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setNonBlocking(true);
        element5.setPrefSize(new Dimension(150, 100));
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TextView element6 = new TextView();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setEnableOnlySelectablePartInteraction(true);
        element6.setStyle("white14Bordered");
        element6.setNonBlocking(false);
        element6.setVerticalAlignment(Alignment5.SOUTH);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.chat:processLinkAction(chatView)");
        element6.setOnClick(onClick);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.chat:processLinkAction(chatView)");
        element6.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.chat:onMouseExitSelectableText");
        element6.setOnMouseExit(onMouseExit);
        element6.setPrefSize(new Dimension(0, 100));
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("chat");
        checkOut2.setField("currentView/history");
        checkOut2.setAttribute("text");
        element6.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        final WindowResizePoint element7 = new WindowResizePoint();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setPointAlign(Alignment9.NORTH);
        element7.setPrefSize(new Dimension(0, 15));
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.NORTH);
        element8.setSize(new Dimension(100.0f, -2));
        element8.setYOffset(5);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 15, 0, 15));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        element7.onChildrenAdded();
        final WindowResizePoint element9 = new WindowResizePoint();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setPointAlign(Alignment9.SOUTH);
        element9.setPrefSize(new Dimension(0, 15));
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.SOUTH);
        element10.setSize(new Dimension(100.0f, -2));
        element10.setYOffset(-5);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance3 = element9.getAppearance();
        appearance3.setElementMap(elementMap);
        element9.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 15, 0, 15));
        appearance3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance3.onChildrenAdded();
        element9.onChildrenAdded();
        final WindowResizePoint element11 = new WindowResizePoint();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setPointAlign(Alignment9.EAST);
        element11.setPrefSize(new Dimension(10, 0));
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.EAST);
        element12.setSize(new Dimension(-2, 100.0f));
        element12.setXOffset(10);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final WindowResizePoint element13 = new WindowResizePoint();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setPointAlign(Alignment9.WEST);
        element13.setPrefSize(new Dimension(15, 0));
        checkOut.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.WEST);
        element14.setSize(new Dimension(-2, 100.0f));
        element14.setXOffset(-5);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final WindowResizePoint element15 = new WindowResizePoint();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setPointAlign(Alignment9.NORTH_EAST);
        element15.setPrefSize(new Dimension(15, 15));
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.NORTH_EAST);
        element16.setSize(new Dimension(-2, -2));
        element16.setYOffset(5);
        element16.setXOffset(5);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final WindowResizePoint element17 = new WindowResizePoint();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setPointAlign(Alignment9.NORTH_WEST);
        element17.setPrefSize(new Dimension(15, 15));
        checkOut.addBasicElement(element17);
        element17.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.NORTH_WEST);
        element18.setSize(new Dimension(-2, -2));
        element18.setYOffset(5);
        element18.setXOffset(-5);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final WindowResizePoint element19 = new WindowResizePoint();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setPointAlign(Alignment9.SOUTH_EAST);
        element19.setPrefSize(new Dimension(15, 15));
        checkOut.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment17.SOUTH_EAST);
        element20.setSize(new Dimension(-2, -2));
        element20.setYOffset(-5);
        element20.setXOffset(5);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final WindowResizePoint element21 = new WindowResizePoint();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setPointAlign(Alignment9.SOUTH_WEST);
        element21.setPrefSize(new Dimension(15, 15));
        checkOut.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.SOUTH_WEST);
        element22.setSize(new Dimension(-2, -2));
        element22.setYOffset(-5);
        element22.setXOffset(-5);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut.onChildrenAdded();
        window.onChildrenAdded();
        return window;
    }
}
