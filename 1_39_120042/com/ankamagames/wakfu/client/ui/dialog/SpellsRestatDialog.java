package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;

public class SpellsRestatDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public SpellsRestatDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "characterBookSpellPageContainer";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setNonBlocking(true);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final BorderLayout element8 = new BorderLayout();
        element8.onCheckOut();
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setNonBlocking(true);
        element9.setText("%spells.restatTitle%".replace("%spells.restatTitle%", Xulor.getInstance().getTranslatedString("spells.restatTitle")));
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final BorderLayoutData checkOut7 = BorderLayoutData.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setData(BorderLayoutData.Values.CENTER);
        element9.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("questionMark");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCitizenPointsPopup)");
        element10.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element10.setOnPopupHide(onPopupHide);
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        final BorderLayoutData checkOut8 = BorderLayoutData.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setData(BorderLayoutData.Values.EAST);
        element10.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final String id2 = "descCitizenPointsPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.EAST);
        popupElement.setHotSpotPosition(Alignment9.WEST);
        element10.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("white");
        element11.setText("%spellsRestat.description%".replace("%spellsRestat.description%", Xulor.getInstance().getTranslatedString("spellsRestat.description")));
        element11.setMinWidth(1);
        element11.setMaxWidth(250);
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element11.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element11.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut10.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 12, 0, 12));
        appearance6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id3 = "windowContentContainer";
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut12);
        }
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut12.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Padding element12 = new Padding();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setInsets(new Insets(0, 0, 0, 1));
        appearance7.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 0, 1));
        appearance7.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setHorizontal(false);
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut12.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final StaticLayout element13 = new StaticLayout();
        element13.onCheckOut();
        element13.setAdaptToContentSize(true);
        checkOut15.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.CENTER);
        element14.setSize(new Dimension(100.0f, 100.0f));
        checkOut16.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element15 = new StaticLayout();
        element15.onCheckOut();
        element15.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setNeedsScissor(false);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.WEST);
        checkOut19.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final StaticLayout element17 = new StaticLayout();
        element17.onCheckOut();
        element17.setAdaptToContentSize(true);
        checkOut19.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.WEST);
        element18.setXOffset(5);
        checkOut20.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance8 = checkOut20.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final PlainBackground element19 = new PlainBackground();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        appearance8.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setAttribute("color");
        checkOut21.setName("spellsRestatManager");
        checkOut21.setField("element0/color");
        element19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        element19.onChildrenAdded();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("prefSize");
        checkOut22.setName("spellsRestatManager");
        checkOut22.setField("globalRestat");
        checkOut20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setValue("375,45");
        element20.setElseValue("530,45");
        checkOut22.addBasicElement(element20);
        element20.onAttributesInitialized();
        final TrueCondition element21 = new TrueCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut22.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setStyle("caracsBackground");
        checkOut23.setPrefSize(new Dimension(540, 50));
        checkOut19.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.WEST);
        checkOut23.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setAlign(Alignment9.WEST);
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setExpandable(false);
        checkOut23.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final DecoratorAppearance appearance9 = checkOut25.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut25.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(0, 6, 0, 0));
        appearance9.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance9.onChildrenAdded();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        element24.setAdaptToContentSize(true);
        checkOut25.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final Image element25 = new Image();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        checkOut25.addBasicElement(element25);
        element25.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment17.CENTER);
        element26.setYOffset(10);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setField("element0/iconStyleMaster");
        checkOut26.setName("spellsRestatManager");
        checkOut26.setAttribute("style");
        element25.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        element25.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("bold");
        checkOut25.addBasicElement(element27);
        element27.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment17.SOUTH);
        element28.setYOffset(4);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance10 = element27.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlignment(Alignment9.CENTER);
        element27.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setField("element0/name");
        checkOut27.setName("spellsRestatManager");
        checkOut27.setAttribute("text");
        element27.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut25.onChildrenAdded();
        final PropertyElement checkOut28 = PropertyElement.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setAttribute("prefSize");
        checkOut28.setName("spellsRestatManager");
        checkOut28.setField("globalRestat");
        checkOut23.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final ConditionResult element29 = new ConditionResult();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setValue("385,50");
        element29.setElseValue("540,50");
        checkOut28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final TrueCondition element30 = new TrueCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut28.onChildrenAdded();
        checkOut23.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final List element31 = new List();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setCellSize(new Dimension(43, 60));
        element31.setPrefSize(new Dimension(215, 60));
        element31.setHorizontal(false);
        checkOut18.addBasicElement(element31);
        element31.onAttributesInitialized();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setX(55);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setAttribute("content");
        checkOut29.setName("spellsRestatManager");
        checkOut29.setField("element0Spells");
        element31.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        final ItemRenderer element33 = new ItemRenderer();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.spellsRestat:openSpellDescription");
        element33.setOnItemClick(onItemClick);
        element31.addBasicElement(element33);
        element33.onAttributesInitialized();
        final ConditionResult element34 = new ConditionResult();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        this.method0(element34);
        element34.onChildrenAdded();
        this.method1(element33);
        this.method2(element33);
        element33.onChildrenAdded();
        this.method3(element31);
        element31.onChildrenAdded();
        this.method4(checkOut18);
        checkOut18.onChildrenAdded();
        this.method5(checkOut16);
        this.method13(checkOut16);
        checkOut16.onChildrenAdded();
        this.method21(checkOut15);
        checkOut15.onChildrenAdded();
        this.method22(checkOut12);
        this.method23(checkOut12);
        this.method43(checkOut12);
        checkOut12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method44(element);
        this.method45(element);
        this.method46(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final AndCondition element = new AndCondition();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemCondition element2 = new ItemCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setField("currentLevelPercentage");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final String id2 = "spellCell";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut5);
        }
        checkOut5.setStyle("white");
        checkOut5.setPrefSize(new Dimension(48, 0));
        checkOut5.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellsRestat:onMouseOverSpell(spellCell)");
        checkOut5.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.spellsRestat:onMouseOutSpell(spellCell,spell)");
        checkOut5.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setXOffset(0);
        element4.setSize(new Dimension(48, 100.0f));
        checkOut5.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DragNDropContainer element6 = new DragNDropContainer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setDragEnabled(false);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(-2, -2));
        element7.setY(12);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setNonBlocking(true);
        element8.setDisplaySize(new Dimension(38, 38));
        element8.setScaled(true);
        element6.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element8.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("texture");
        element9.setField("smallIconUrl");
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element8.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut8.setPrefSize(new Dimension(38, 20));
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.SOUTH);
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ProgressBar element12 = new ProgressBar();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setUseDecreaseProgressTween(false);
        element12.setStyle("XP2");
        element12.setNonBlocking(false);
        checkOut8.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 10));
        element13.setAlign(Alignment17.CENTER);
        element13.setXOffset(1);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance4 = element12.getAppearance();
        appearance4.setElementMap(elementMap);
        element12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("progressBar");
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("color");
        checkOut10.setName("spellsRestatManager");
        checkOut10.setField("element0/color");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("value");
        element14.setField("currentLevelPercentage");
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setStyle("ProgressBar");
        checkOut11.setPrefSize(new Dimension(0, 11));
        checkOut8.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setSize(new Dimension(100.0f, 11));
        element15.setAlign(Alignment17.CENTER);
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Label element16 = new Label();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setNonBlocking(true);
        element16.setStyle("blackBold");
        checkOut8.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element16.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.CENTER);
        element16.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setYOffset(1);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("levelTextShort");
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setStyle("BlackTransparency");
        checkOut5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(38, 51));
        element19.setYOffset(-1);
        checkOut12.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("visible");
        element20.setField("activated");
        checkOut12.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final FalseCondition element22 = new FalseCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.NORTH);
        element23.setSize(new Dimension(38, -2));
        checkOut13.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(4, 0, 0, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final Button element24 = new Button();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("remove");
        element24.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.spellsRestat:decreaseSpell(spell)");
        element24.setOnMousePress(onMousePress);
        checkOut13.addBasicElement(element24);
        element24.onAttributesInitialized();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("enabled");
        element26.setField("canRemoveLevel");
        element24.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance7 = element24.getAppearance();
        appearance7.setElementMap(elementMap);
        element24.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("modulationColor");
        element27.setField("canRemoveLevel");
        appearance7.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ConditionResult element28 = new ConditionResult();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setValue("1,1,1");
        element28.setElseValue("0.5,0.5,0.5");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final TrueCondition element29 = new TrueCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        appearance7.onChildrenAdded();
        element24.onChildrenAdded();
        final Spacer element30 = new Spacer();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        checkOut13.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final Button element31 = new Button();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("add");
        element31.setExpandable(false);
        final MousePressedListener onMousePress2 = new MousePressedListener();
        onMousePress2.setCallBackFunc("wakfu.spellsRestat:improveSpell(spell)");
        element31.setOnMousePress(onMousePress2);
        checkOut13.addBasicElement(element31);
        element31.onAttributesInitialized();
        final RowLayoutData element32 = new RowLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment9.CENTER);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("enabled");
        element33.setField("canAddLevel");
        element31.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final DecoratorAppearance appearance8 = element31.getAppearance();
        appearance8.setElementMap(elementMap);
        element31.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("modulationColor");
        element34.setField("canAddLevel");
        appearance8.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setValue("1,1,1");
        element35.setElseValue("0.5,0.5,0.5");
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        final TrueCondition element36 = new TrueCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        appearance8.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut5.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ItemElement element37 = new ItemElement();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setAttribute("modulationColor");
        element37.setField("spell/isSelected");
        appearance9.addBasicElement(element37);
        element37.onAttributesInitialized();
        final ConditionResult element38 = new ConditionResult();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setValue("0.4f,0.5f,0.62f,1f");
        element38.setElseValue("1f,1f,1f,1f");
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        final TrueCondition element39 = new TrueCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        element38.onChildrenAdded();
        element37.onChildrenAdded();
        appearance9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.spellsRestat:openSpellDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut5);
        }
        checkOut5.setStyle("white");
        checkOut5.setPrefSize(new Dimension(48, 0));
        checkOut5.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellsRestat:onMouseOverSpell(spellCell)");
        checkOut5.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.spellsRestat:onMouseOutSpell(spellCell,spell)");
        checkOut5.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setXOffset(0);
        element9.setSize(new Dimension(48, 100.0f));
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DragNDropContainer element11 = new DragNDropContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDragEnabled(false);
        checkOut5.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setY(12);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setDisplaySize(new Dimension(38, 38));
        element13.setScaled(true);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element13.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut7.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut8.setPrefSize(new Dimension(38, 20));
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        checkOut8.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BlackTransparency");
        checkOut5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(38, 51));
        element17.setYOffset(-1);
        checkOut9.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.NORTH);
        element18.setSize(new Dimension(38, -2));
        checkOut10.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(4, 0, 0, 0));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Button element19 = new Button();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("remove");
        element19.setExpandable(false);
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final Spacer element21 = new Spacer();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        checkOut10.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final Button element22 = new Button();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("add");
        element22.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.characterSheet:improveAptitude(aptitude,spellAptitudeButtonContainer,validateSpellAptitudePoints)");
        element22.setOnMousePress(onMousePress);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut5.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("modulationColor");
        element24.setField("isSelected");
        appearance5.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("0.4f,0.5f,0.62f,1f");
        element25.setElseValue("1f,1f,1f,1f");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final TrueCondition element26 = new TrueCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.EAST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setExpandable(false);
        checkOut2.setPrefSize(new Dimension(200, 37));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(progressBarPopup)");
        checkOut2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut2.setOnPopupHide(onPopupHide);
        checkOut2.setNonBlocking(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final String id = "progressBarPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.CENTER);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("PopupInformation");
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setName("spellsRestatManager");
        checkOut5.setField("element0/xpText");
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.SOUTH);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ProgressBar element5 = new ProgressBar();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("XP2");
        element5.setNonBlocking(false);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(100.0f, 23));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("progressBar");
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("color");
        checkOut7.setName("spellsRestatManager");
        checkOut7.setField("element0/color");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(0, 2, 0, 2));
        appearance2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("value");
        checkOut8.setName("spellsRestatManager");
        checkOut8.setField("element0/xpValue");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BigProgressBar");
        checkOut9.setPrefSize(new Dimension(0, 26));
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(100.0f, 26));
        element8.setAlign(Alignment17.CENTER);
        checkOut9.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("visible");
        checkOut10.setName("spellsRestatManager");
        checkOut10.setField("globalRestat");
        checkOut2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut10.addBasicElement(element9);
        element9.onAttributesInitialized();
        final FalseCondition element10 = new FalseCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut11.setPrefSize(new Dimension(50, 0));
        checkOut.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut13.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut13.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut13.setOnPopupHide(onPopupHide2);
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        element11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element12.setStyle("PopupInformation");
        checkOut14.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element11.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("smallSword2");
        element13.setExpandable(false);
        element13.setNonBlocking(true);
        checkOut13.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Spacer element14 = new Spacer();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        checkOut13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setPrefSize(new Dimension(25, 0));
        element15.setStyle("white16");
        element15.setNonBlocking(true);
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setAttribute("text");
        checkOut17.setName("spellsRestatManager");
        checkOut17.setField("element0/dmgPercent");
        element15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setExpandable(false);
        checkOut18.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        checkOut18.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut18.setOnPopupHide(onPopupHide3);
        checkOut11.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PopupElement element17 = new PopupElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.NORTH);
        element17.setHotSpotPosition(Alignment9.SOUTH);
        checkOut18.addBasicElement(element17);
        element17.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        element17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.WEST);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setExpandable(false);
        element18.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element18.setStyle("PopupInformation");
        checkOut19.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element17.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.WEST);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("iconShield");
        element19.setExpandable(false);
        element19.setNonBlocking(true);
        checkOut18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Spacer element20 = new Spacer();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        checkOut18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setPrefSize(new Dimension(25, 0));
        element21.setStyle("white16");
        element21.setNonBlocking(true);
        element21.setMultiline(false);
        element21.setExpandable(false);
        checkOut18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("text");
        checkOut22.setName("spellsRestatManager");
        checkOut22.setField("element0/resPercent");
        element21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut18.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(0, 0, 0, 10));
        appearance5.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setNeedsScissor(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.WEST);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element4.setXOffset(5);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("color");
        checkOut4.setName("spellsRestatManager");
        checkOut4.setField("element1/color");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("prefSize");
        checkOut5.setName("spellsRestatManager");
        checkOut5.setField("globalRestat");
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("375,45");
        element6.setElseValue("530,45");
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("caracsBackground");
        checkOut6.setPrefSize(new Dimension(540, 50));
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.WEST);
        checkOut6.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut8.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(0, 6, 0, 0));
        appearance2.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setYOffset(10);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setField("element1/iconStyleMaster");
        checkOut9.setName("spellsRestatManager");
        checkOut9.setAttribute("style");
        element11.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element11.onChildrenAdded();
        final Label element13 = new Label();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("bold");
        checkOut8.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.SOUTH);
        element14.setYOffset(4);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setField("element1/name");
        checkOut10.setName("spellsRestatManager");
        checkOut10.setAttribute("text");
        element13.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("prefSize");
        checkOut11.setName("spellsRestatManager");
        checkOut11.setField("globalRestat");
        checkOut6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setValue("385,50");
        element15.setElseValue("540,50");
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        final TrueCondition element16 = new TrueCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final List element17 = new List();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setCellSize(new Dimension(43, 60));
        element17.setPrefSize(new Dimension(215, 60));
        element17.setHorizontal(false);
        checkOut.addBasicElement(element17);
        element17.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setX(55);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("content");
        checkOut12.setName("spellsRestatManager");
        checkOut12.setField("element1Spells");
        element17.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.spellsRestat:openSpellDescription");
        element19.setOnItemClick(onItemClick);
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final AndCondition element21 = new AndCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ItemCondition element22 = new ItemCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setField("currentLevelPercentage");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final NotNullCondition element23 = new NotNullCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        final ItemCondition element24 = new ItemCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element21.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element19.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        data.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut13.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut13.setOnPopupHide(onPopupHide);
        checkOut13.setNonBlocking(false);
        element19.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut13.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        checkOut14.setNonBlocking(false);
        popupElement.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final BorderLayoutData checkOut15 = BorderLayoutData.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setData(BorderLayoutData.Values.CENTER);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut14.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 0, 10, 0));
        appearance4.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("PopupInformation");
        checkOut14.addBasicElement(element27);
        element27.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element27.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element27.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        element28.setField("name");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element29 = new StaticLayout();
        element29.onCheckOut();
        checkOut13.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut17);
        }
        checkOut17.setStyle("white");
        checkOut17.setPrefSize(new Dimension(48, 0));
        checkOut17.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellsRestat:onMouseOverSpell(spellCell)");
        checkOut17.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.spellsRestat:onMouseOutSpell(spellCell,spell)");
        checkOut17.setOnMouseExit(onMouseExit);
        checkOut13.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment17.CENTER);
        element30.setXOffset(0);
        element30.setSize(new Dimension(48, 100.0f));
        checkOut17.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final StaticLayout element31 = new StaticLayout();
        element31.onCheckOut();
        checkOut17.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final DragNDropContainer element32 = new DragNDropContainer();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setDragEnabled(false);
        checkOut17.addBasicElement(element32);
        element32.onAttributesInitialized();
        final StaticLayoutData element33 = new StaticLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setSize(new Dimension(-2, -2));
        element33.setY(12);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final Image element34 = new Image();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setNonBlocking(true);
        element34.setDisplaySize(new Dimension(38, 38));
        element34.setScaled(true);
        element32.addBasicElement(element34);
        element34.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element34.getAppearance();
        appearance6.setElementMap(elementMap);
        element34.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(5, 5, 5, 5));
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element34.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ItemElement element35 = new ItemElement();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAttribute("texture");
        element35.setField("smallIconUrl");
        checkOut19.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element34.onChildrenAdded();
        element32.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut20.setPrefSize(new Dimension(38, 20));
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element36 = new StaticLayoutData();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAlign(Alignment17.SOUTH);
        checkOut20.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final StaticLayout element37 = new StaticLayout();
        element37.onCheckOut();
        element37.setAdaptToContentSize(true);
        checkOut20.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final ProgressBar element38 = new ProgressBar();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setUseDecreaseProgressTween(false);
        element38.setStyle("XP2");
        element38.setNonBlocking(false);
        checkOut20.addBasicElement(element38);
        element38.onAttributesInitialized();
        final StaticLayoutData element39 = new StaticLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setSize(new Dimension(100.0f, 10));
        element39.setAlign(Alignment17.CENTER);
        element39.setXOffset(1);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final DecoratorAppearance appearance7 = element38.getAppearance();
        appearance7.setElementMap(elementMap);
        element38.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("progressBar");
        appearance7.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("color");
        checkOut22.setName("spellsRestatManager");
        checkOut22.setField("element1/color");
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        checkOut21.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element40 = new ItemElement();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAttribute("value");
        element40.setField("currentLevelPercentage");
        element38.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        element38.onChildrenAdded();
        this.method6(checkOut20);
        this.method7(checkOut20);
        checkOut20.onChildrenAdded();
        this.method8(checkOut17);
        this.method9(checkOut17);
        this.method10(checkOut17);
        checkOut17.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element19.onChildrenAdded();
        this.method11(element17);
        element17.onChildrenAdded();
        this.method12(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("ProgressBar");
        checkOut.setPrefSize(new Dimension(0, 11));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 11));
        element.setAlign(Alignment17.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setStyle("blackBold");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setYOffset(1);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("text");
        element3.setField("levelTextShort");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("BlackTransparency");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(38, 51));
        element.setYOffset(-1);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("activated");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.NORTH);
        element.setSize(new Dimension(38, -2));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(4, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Button element2 = new Button();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("remove");
        element2.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.spellsRestat:decreaseSpell(spell)");
        element2.setOnMousePress(onMousePress);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("enabled");
        element4.setField("canRemoveLevel");
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("modulationColor");
        element5.setField("canRemoveLevel");
        appearance2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("1,1,1");
        element6.setElseValue("0.5,0.5,0.5");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element2.onChildrenAdded();
        final Spacer element8 = new Spacer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Button element9 = new Button();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("add");
        element9.setExpandable(false);
        final MousePressedListener onMousePress2 = new MousePressedListener();
        onMousePress2.setCallBackFunc("wakfu.spellsRestat:improveSpell(spell)");
        element9.setOnMousePress(onMousePress2);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("enabled");
        element11.setField("canAddLevel");
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance3 = element9.getAppearance();
        appearance3.setElementMap(elementMap);
        element9.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("modulationColor");
        element12.setField("canAddLevel");
        appearance3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("1,1,1");
        element13.setElseValue("0.5,0.5,0.5");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        appearance3.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("modulationColor");
        element.setField("spell/isSelected");
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0.4f,0.5f,0.62f,1f");
        element2.setElseValue("1f,1f,1f,1f");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.spellsRestat:openSpellDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut5);
        }
        checkOut5.setStyle("white");
        checkOut5.setPrefSize(new Dimension(48, 0));
        checkOut5.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellsRestat:onMouseOverSpell(spellCell)");
        checkOut5.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.spellsRestat:onMouseOutSpell(spellCell,spell)");
        checkOut5.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setXOffset(0);
        element9.setSize(new Dimension(48, 100.0f));
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DragNDropContainer element11 = new DragNDropContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDragEnabled(false);
        checkOut5.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setY(12);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setDisplaySize(new Dimension(38, 38));
        element13.setScaled(true);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element13.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut7.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut8.setPrefSize(new Dimension(38, 20));
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        checkOut8.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BlackTransparency");
        checkOut5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(38, 51));
        element17.setYOffset(-1);
        checkOut9.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.NORTH);
        element18.setSize(new Dimension(38, -2));
        checkOut10.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(4, 0, 0, 0));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Button element19 = new Button();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("remove");
        element19.setExpandable(false);
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final Spacer element21 = new Spacer();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        checkOut10.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final Button element22 = new Button();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("add");
        element22.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.characterSheet:improveAptitude(aptitude,spellAptitudeButtonContainer,validateSpellAptitudePoints)");
        element22.setOnMousePress(onMousePress);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut5.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("modulationColor");
        element24.setField("isSelected");
        appearance5.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("0.4f,0.5f,0.62f,1f");
        element25.setElseValue("1f,1f,1f,1f");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final TrueCondition element26 = new TrueCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.EAST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setExpandable(false);
        checkOut2.setPrefSize(new Dimension(200, 37));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(progressBarPopup)");
        checkOut2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut2.setOnPopupHide(onPopupHide);
        checkOut2.setNonBlocking(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final String id = "progressBarPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.CENTER);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("PopupInformation");
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setName("spellsRestatManager");
        checkOut5.setField("element1/xpText");
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.SOUTH);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ProgressBar element5 = new ProgressBar();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("XP2");
        element5.setNonBlocking(false);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(100.0f, 23));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("progressBar");
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("color");
        checkOut7.setName("spellsRestatManager");
        checkOut7.setField("element1/color");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(0, 2, 0, 2));
        appearance2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("value");
        checkOut8.setName("spellsRestatManager");
        checkOut8.setField("element1/xpValue");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BigProgressBar");
        checkOut9.setPrefSize(new Dimension(0, 26));
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(100.0f, 26));
        element8.setAlign(Alignment17.CENTER);
        checkOut9.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("visible");
        checkOut10.setName("spellsRestatManager");
        checkOut10.setField("globalRestat");
        checkOut2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut10.addBasicElement(element9);
        element9.onAttributesInitialized();
        final FalseCondition element10 = new FalseCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut11.setPrefSize(new Dimension(50, 0));
        checkOut.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut13.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut13.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut13.setOnPopupHide(onPopupHide2);
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        element11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element12.setStyle("PopupInformation");
        checkOut14.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element11.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("smallSword2");
        element13.setExpandable(false);
        element13.setNonBlocking(true);
        checkOut13.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Spacer element14 = new Spacer();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        checkOut13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setPrefSize(new Dimension(25, 0));
        element15.setStyle("white16");
        element15.setNonBlocking(true);
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setAttribute("text");
        checkOut17.setName("spellsRestatManager");
        checkOut17.setField("element1/dmgPercent");
        element15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setExpandable(false);
        checkOut18.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        checkOut18.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut18.setOnPopupHide(onPopupHide3);
        checkOut11.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PopupElement element17 = new PopupElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.NORTH);
        element17.setHotSpotPosition(Alignment9.SOUTH);
        checkOut18.addBasicElement(element17);
        element17.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        element17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.WEST);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setExpandable(false);
        element18.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element18.setStyle("PopupInformation");
        checkOut19.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element17.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.WEST);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("iconShield");
        element19.setExpandable(false);
        element19.setNonBlocking(true);
        checkOut18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Spacer element20 = new Spacer();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        checkOut18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setPrefSize(new Dimension(25, 0));
        element21.setStyle("white16");
        element21.setNonBlocking(true);
        element21.setMultiline(false);
        element21.setExpandable(false);
        checkOut18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("text");
        checkOut22.setName("spellsRestatManager");
        checkOut22.setField("element1/resPercent");
        element21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut18.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(0, 0, 0, 10));
        appearance5.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setNeedsScissor(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.WEST);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element4.setXOffset(5);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("color");
        checkOut4.setName("spellsRestatManager");
        checkOut4.setField("element2/color");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("prefSize");
        checkOut5.setName("spellsRestatManager");
        checkOut5.setField("globalRestat");
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("375,45");
        element6.setElseValue("530,45");
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("caracsBackground");
        checkOut6.setPrefSize(new Dimension(540, 50));
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.WEST);
        checkOut6.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut8.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(0, 6, 0, 0));
        appearance2.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setYOffset(10);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setField("element2/iconStyleMaster");
        checkOut9.setName("spellsRestatManager");
        checkOut9.setAttribute("style");
        element11.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element11.onChildrenAdded();
        final Label element13 = new Label();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("bold");
        checkOut8.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.SOUTH);
        element14.setYOffset(4);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setField("element2/name");
        checkOut10.setName("spellsRestatManager");
        checkOut10.setAttribute("text");
        element13.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("prefSize");
        checkOut11.setName("spellsRestatManager");
        checkOut11.setField("globalRestat");
        checkOut6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setValue("385,50");
        element15.setElseValue("540,50");
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        final TrueCondition element16 = new TrueCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final List element17 = new List();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setCellSize(new Dimension(43, 60));
        element17.setPrefSize(new Dimension(215, 60));
        element17.setHorizontal(false);
        checkOut.addBasicElement(element17);
        element17.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setX(55);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("content");
        checkOut12.setName("spellsRestatManager");
        checkOut12.setField("element2Spells");
        element17.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.spellsRestat:openSpellDescription");
        element19.setOnItemClick(onItemClick);
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final AndCondition element21 = new AndCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ItemCondition element22 = new ItemCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setField("currentLevelPercentage");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final NotNullCondition element23 = new NotNullCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        final ItemCondition element24 = new ItemCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element21.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element19.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        data.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut13.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut13.setOnPopupHide(onPopupHide);
        checkOut13.setNonBlocking(false);
        element19.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut13.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        popupElement.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final BorderLayoutData checkOut15 = BorderLayoutData.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setData(BorderLayoutData.Values.CENTER);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut14.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 0, 10, 0));
        appearance4.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("PopupInformation");
        checkOut14.addBasicElement(element27);
        element27.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element27.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element27.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        element28.setField("name");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element29 = new StaticLayout();
        element29.onCheckOut();
        checkOut13.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut17);
        }
        checkOut17.setStyle("white");
        checkOut17.setPrefSize(new Dimension(48, 0));
        checkOut17.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellsRestat:onMouseOverSpell(spellCell)");
        checkOut17.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.spellsRestat:onMouseOutSpell(spellCell,spell)");
        checkOut17.setOnMouseExit(onMouseExit);
        checkOut13.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment17.CENTER);
        element30.setXOffset(0);
        element30.setSize(new Dimension(48, 100.0f));
        checkOut17.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final StaticLayout element31 = new StaticLayout();
        element31.onCheckOut();
        checkOut17.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final DragNDropContainer element32 = new DragNDropContainer();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setDragEnabled(false);
        checkOut17.addBasicElement(element32);
        element32.onAttributesInitialized();
        final StaticLayoutData element33 = new StaticLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setSize(new Dimension(-2, -2));
        element33.setY(12);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final Image element34 = new Image();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setNonBlocking(true);
        element34.setDisplaySize(new Dimension(38, 38));
        element34.setScaled(true);
        element32.addBasicElement(element34);
        element34.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element34.getAppearance();
        appearance6.setElementMap(elementMap);
        element34.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(5, 5, 5, 5));
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element34.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ItemElement element35 = new ItemElement();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAttribute("texture");
        element35.setField("smallIconUrl");
        checkOut19.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element34.onChildrenAdded();
        element32.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut20.setPrefSize(new Dimension(38, 20));
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element36 = new StaticLayoutData();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAlign(Alignment17.SOUTH);
        checkOut20.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final StaticLayout element37 = new StaticLayout();
        element37.onCheckOut();
        element37.setAdaptToContentSize(true);
        checkOut20.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final ProgressBar element38 = new ProgressBar();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setUseDecreaseProgressTween(false);
        element38.setStyle("XP2");
        element38.setNonBlocking(false);
        checkOut20.addBasicElement(element38);
        element38.onAttributesInitialized();
        final StaticLayoutData element39 = new StaticLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setSize(new Dimension(100.0f, 10));
        element39.setAlign(Alignment17.CENTER);
        element39.setXOffset(1);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final DecoratorAppearance appearance7 = element38.getAppearance();
        appearance7.setElementMap(elementMap);
        element38.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("progressBar");
        appearance7.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("color");
        checkOut22.setName("spellsRestatManager");
        checkOut22.setField("element2/color");
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        checkOut21.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element40 = new ItemElement();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAttribute("value");
        element40.setField("currentLevelPercentage");
        element38.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        element38.onChildrenAdded();
        this.method14(checkOut20);
        this.method15(checkOut20);
        checkOut20.onChildrenAdded();
        this.method16(checkOut17);
        this.method17(checkOut17);
        this.method18(checkOut17);
        checkOut17.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element19.onChildrenAdded();
        this.method19(element17);
        element17.onChildrenAdded();
        this.method20(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("ProgressBar");
        checkOut.setPrefSize(new Dimension(0, 11));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 11));
        element.setAlign(Alignment17.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setStyle("blackBold");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setYOffset(1);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("text");
        element3.setField("levelTextShort");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("BlackTransparency");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(38, 51));
        element.setYOffset(-1);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("activated");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.NORTH);
        element.setSize(new Dimension(38, -2));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(4, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Button element2 = new Button();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("remove");
        element2.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.spellsRestat:decreaseSpell(spell)");
        element2.setOnMousePress(onMousePress);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("enabled");
        element4.setField("canRemoveLevel");
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("modulationColor");
        element5.setField("canRemoveLevel");
        appearance2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("1,1,1");
        element6.setElseValue("0.5,0.5,0.5");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element2.onChildrenAdded();
        final Spacer element8 = new Spacer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Button element9 = new Button();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("add");
        element9.setExpandable(false);
        final MousePressedListener onMousePress2 = new MousePressedListener();
        onMousePress2.setCallBackFunc("wakfu.spellsRestat:improveSpell(spell)");
        element9.setOnMousePress(onMousePress2);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("enabled");
        element11.setField("canAddLevel");
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance3 = element9.getAppearance();
        appearance3.setElementMap(elementMap);
        element9.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("modulationColor");
        element12.setField("canAddLevel");
        appearance3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("1,1,1");
        element13.setElseValue("0.5,0.5,0.5");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        appearance3.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("modulationColor");
        element.setField("spell/isSelected");
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0.4f,0.5f,0.62f,1f");
        element2.setElseValue("1f,1f,1f,1f");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.spellsRestat:openSpellDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut5);
        }
        checkOut5.setStyle("white");
        checkOut5.setPrefSize(new Dimension(48, 0));
        checkOut5.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellsRestat:onMouseOverSpell(spellCell)");
        checkOut5.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.spellsRestat:onMouseOutSpell(spellCell,spell)");
        checkOut5.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setXOffset(0);
        element9.setSize(new Dimension(48, 100.0f));
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DragNDropContainer element11 = new DragNDropContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDragEnabled(false);
        checkOut5.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setY(12);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setDisplaySize(new Dimension(38, 38));
        element13.setScaled(true);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element13.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut7.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut8.setPrefSize(new Dimension(38, 20));
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        checkOut8.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BlackTransparency");
        checkOut5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(38, 51));
        element17.setYOffset(-1);
        checkOut9.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.NORTH);
        element18.setSize(new Dimension(38, -2));
        checkOut10.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(4, 0, 0, 0));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Button element19 = new Button();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("remove");
        element19.setExpandable(false);
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final Spacer element21 = new Spacer();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        checkOut10.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final Button element22 = new Button();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("add");
        element22.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.characterSheet:improveAptitude(aptitude,spellAptitudeButtonContainer,validateSpellAptitudePoints)");
        element22.setOnMousePress(onMousePress);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut5.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("modulationColor");
        element24.setField("isSelected");
        appearance5.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("0.4f,0.5f,0.62f,1f");
        element25.setElseValue("1f,1f,1f,1f");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final TrueCondition element26 = new TrueCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.EAST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setExpandable(false);
        checkOut2.setPrefSize(new Dimension(200, 37));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(progressBarPopup)");
        checkOut2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut2.setOnPopupHide(onPopupHide);
        checkOut2.setNonBlocking(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final String id = "progressBarPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.CENTER);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("PopupInformation");
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setName("spellsRestatManager");
        checkOut5.setField("element2/xpText");
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.SOUTH);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ProgressBar element5 = new ProgressBar();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("XP2");
        element5.setNonBlocking(false);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(100.0f, 23));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("progressBar");
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("color");
        checkOut7.setName("spellsRestatManager");
        checkOut7.setField("element2/color");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(0, 2, 0, 2));
        appearance2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("value");
        checkOut8.setName("spellsRestatManager");
        checkOut8.setField("element2/xpValue");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BigProgressBar");
        checkOut9.setPrefSize(new Dimension(0, 26));
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(100.0f, 26));
        element8.setAlign(Alignment17.CENTER);
        checkOut9.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("visible");
        checkOut10.setName("spellsRestatManager");
        checkOut10.setField("globalRestat");
        checkOut2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut10.addBasicElement(element9);
        element9.onAttributesInitialized();
        final FalseCondition element10 = new FalseCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut11.setPrefSize(new Dimension(50, 0));
        checkOut.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut13.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut13.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut13.setOnPopupHide(onPopupHide2);
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        element11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element12.setStyle("PopupInformation");
        checkOut14.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element11.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("smallSword2");
        element13.setExpandable(false);
        element13.setNonBlocking(true);
        checkOut13.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Spacer element14 = new Spacer();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        checkOut13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setPrefSize(new Dimension(25, 0));
        element15.setStyle("white16");
        element15.setNonBlocking(true);
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setAttribute("text");
        checkOut17.setName("spellsRestatManager");
        checkOut17.setField("element2/dmgPercent");
        element15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setExpandable(false);
        checkOut18.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        checkOut18.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut18.setOnPopupHide(onPopupHide3);
        checkOut11.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PopupElement element17 = new PopupElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.NORTH);
        element17.setHotSpotPosition(Alignment9.SOUTH);
        checkOut18.addBasicElement(element17);
        element17.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        element17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.WEST);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setExpandable(false);
        element18.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element18.setStyle("PopupInformation");
        checkOut19.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element17.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.WEST);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("iconShield");
        element19.setExpandable(false);
        element19.setNonBlocking(true);
        checkOut18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Spacer element20 = new Spacer();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        checkOut18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setPrefSize(new Dimension(25, 0));
        element21.setStyle("white16");
        element21.setNonBlocking(true);
        element21.setMultiline(false);
        element21.setExpandable(false);
        checkOut18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("text");
        checkOut22.setName("spellsRestatManager");
        checkOut22.setField("element2/resPercent");
        element21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut18.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(0, 0, 0, 10));
        appearance5.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(37, 0));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(progressBarPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "progressBarPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("text");
        checkOut4.setName("spellsRestatManager");
        checkOut4.setField("globalXpText");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.EAST);
        element2.setSize(new Dimension(37, 100.0f));
        element2.setXOffset(-75);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("spellsRestatManager");
        checkOut5.setField("globalRestat");
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(23, 100.0f));
        element4.setAlign(Alignment17.CENTER);
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut6.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(2, 0, 2, 0));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final ProgressBar element6 = new ProgressBar();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setHorizontal(false);
        element6.setStyle("XP2");
        element6.setNonBlocking(false);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(23, 100.0f));
        element7.setAlign(Alignment17.CENTER);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(2, 0, 2, 0));
        appearance3.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("value");
        checkOut8.setName("spellsRestatManager");
        checkOut8.setField("globalXpValue");
        element6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("verticalBigProgressBar");
        checkOut9.setPrefSize(new Dimension(26, 0));
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(26, 100.0f));
        element9.setAlign(Alignment17.CENTER);
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("darkBackgrounded");
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 237));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("visible");
        checkOut3.setName("describedSpell");
        checkOut3.setLocal(true);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final NullCondition element2 = new NullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("white");
        element3.setText("%spellsRestat.description%".replace("%spellsRestat.description%", Xulor.getInstance().getTranslatedString("spellsRestat.description")));
        element3.setMultiline(true);
        element3.setNonBlocking(true);
        element3.setMinWidth(1);
        element3.setMaxWidth(240);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setJustify(true);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "container";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        checkOut.setStyle("darkBackgrounded");
        checkOut.setVisible(false);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("visible");
        checkOut3.setName("describedSpell");
        checkOut3.setLocal(true);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final String id2 = "stateDetailPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final ElementMap parentElementMap = elementMap;
        final ElementMap elementMap2 = this.env.createElementMap(((elementMap != null) ? elementMap.getId() : "") + ".itemDetailPopupInc");
        elementMap2.setParentElementMap(parentElementMap);
        this.elementMaps.push(elementMap2);
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap2);
        checkOut4.setStyle("popup");
        popupElement.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut5.setAlign(Alignment9.NORTH);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap2);
        checkOut6.setExpandable(false);
        checkOut6.setVisible(false);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap2);
        checkOut7.setName("describedIcon");
        checkOut7.setAttribute("visible");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap2);
        checkOut7.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap2);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap2);
        element5.setStyle("white11");
        element5.setMultiline(false);
        checkOut6.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap2);
        checkOut8.setName("describedIcon");
        checkOut8.setAttribute("text");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap2);
        checkOut9.setExpandable(false);
        checkOut4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap2);
        checkOut10.setName("describedState");
        checkOut10.setAttribute("visible");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap2);
        checkOut10.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap2);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap2);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setAlign(Alignment9.WEST);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap2);
        element8.setExpandable(false);
        element8.setDisplaySize(new Dimension(32, 32));
        checkOut12.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap2);
        element9.setAlign(Alignment9.WEST);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PixmapElement checkOut14 = PixmapElement.checkOut();
        checkOut14.setElementMap(elementMap2);
        element8.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap2);
        checkOut15.setName("describedState");
        checkOut15.setAttribute("texture");
        checkOut15.setField("iconUrl");
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap2);
        checkOut12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut16.getAppearance();
        appearance.setElementMap(elementMap2);
        checkOut16.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap2);
        checkOut17.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHorizontal(false);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap2);
        checkOut19.setExpandable(false);
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.WEST);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap2);
        element10.setStyle("bigTitle");
        element10.setExpandable(false);
        element10.setMinWidth(190);
        element10.setNonBlocking(true);
        checkOut19.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element10.getAppearance();
        appearance2.setElementMap(elementMap2);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.NORTH_WEST);
        element10.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap2);
        checkOut21.setName("describedState");
        checkOut21.setAttribute("text");
        checkOut21.setField("nameWithFormat");
        element10.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        element10.onChildrenAdded();
        final Spacer element11 = new Spacer();
        element11.onCheckOut();
        element11.setElementMap(elementMap2);
        checkOut19.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap2);
        element12.setStyle("11light");
        element12.setExpandable(false);
        checkOut19.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap2);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap2);
        checkOut22.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final ColorElement checkOut23 = ColorElement.checkOut();
        checkOut23.setElementMap(elementMap2);
        checkOut23.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance3.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap2);
        checkOut24.setAttribute("visible");
        checkOut24.setName("describedState");
        checkOut24.setField("maxLevelValue");
        element12.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap2);
        checkOut24.addBasicElement(element13);
        element13.onAttributesInitialized();
        final GreaterCondition element14 = new GreaterCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap2);
        element14.setValue("1");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap2);
        checkOut25.setName("describedState");
        checkOut25.setAttribute("text");
        checkOut25.setField("level");
        element12.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap2);
        element15.setStyle("stateCumulable");
        checkOut16.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap2);
        element16.setAlign(Alignment9.WEST);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap2);
        checkOut26.setName("describedState");
        checkOut26.setAttribute("visible");
        checkOut26.setField("isCumulable");
        element15.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut16.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap2);
        checkOut9.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final RowLayout checkOut28 = RowLayout.checkOut();
        checkOut28.setHorizontal(false);
        checkOut27.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap2);
        checkOut29.setName("describedState");
        checkOut29.setAttribute("visible");
        checkOut29.setField("description");
        checkOut27.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap2);
        checkOut29.addBasicElement(element17);
        element17.onAttributesInitialized();
        final AndCondition element18 = new AndCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap2);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final NotNullCondition element19 = new NotNullCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap2);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final NotEqualCondition element20 = new NotEqualCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap2);
        element20.setValue("");
        element18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut29.onChildrenAdded();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap2);
        checkOut30.setExpandable(false);
        checkOut30.setStyle("lineSeparator2");
        checkOut30.setPrefSize(new Dimension(50, 1));
        checkOut27.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut30.getAppearance();
        appearance4.setElementMap(elementMap2);
        checkOut30.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut31 = Margin.checkOut();
        checkOut31.setElementMap(elementMap2);
        checkOut31.setInsets(new Insets(5, 20, 5, 20));
        appearance4.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut30.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap2);
        element21.setExpandable(false);
        element21.setStyle("narrow12");
        element21.setMinWidth(230);
        checkOut27.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap2);
        element22.setAlign(Alignment9.WEST);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance5 = element21.getAppearance();
        appearance5.setElementMap(elementMap2);
        element21.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut32 = Margin.checkOut();
        checkOut32.setElementMap(elementMap2);
        checkOut32.setInsets(new Insets(0, 10, 0, 0));
        appearance5.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        final ColorElement checkOut33 = ColorElement.checkOut();
        checkOut33.setElementMap(elementMap2);
        checkOut33.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance5.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        checkOut33.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut34 = PropertyElement.checkOut();
        checkOut34.setElementMap(elementMap2);
        checkOut34.setName("describedState");
        checkOut34.setAttribute("text");
        checkOut34.setField("description");
        element21.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        checkOut34.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut27.onChildrenAdded();
        final Container checkOut35 = Container.checkOut();
        checkOut35.setElementMap(elementMap2);
        checkOut9.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        final RowLayout checkOut36 = RowLayout.checkOut();
        checkOut36.setHorizontal(false);
        checkOut35.addBasicElement(checkOut36);
        checkOut36.onAttributesInitialized();
        checkOut36.onChildrenAdded();
        final PropertyElement checkOut37 = PropertyElement.checkOut();
        checkOut37.setElementMap(elementMap2);
        checkOut37.setName("describedState");
        checkOut37.setAttribute("visible");
        checkOut37.setField("effectDescription");
        checkOut35.addBasicElement(checkOut37);
        checkOut37.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap2);
        checkOut37.addBasicElement(element23);
        element23.onAttributesInitialized();
        final AndCondition element24 = new AndCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap2);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap2);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final NotEqualCondition element26 = new NotEqualCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap2);
        element26.setValue("");
        element24.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut37.onChildrenAdded();
        final Container checkOut38 = Container.checkOut();
        checkOut38.setElementMap(elementMap2);
        checkOut38.setExpandable(false);
        checkOut38.setStyle("lineSeparator2");
        checkOut38.setPrefSize(new Dimension(50, 1));
        checkOut35.addBasicElement(checkOut38);
        checkOut38.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut38.getAppearance();
        appearance6.setElementMap(elementMap2);
        checkOut38.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut39 = Margin.checkOut();
        checkOut39.setElementMap(elementMap2);
        checkOut39.setInsets(new Insets(5, 20, 5, 20));
        appearance6.addBasicElement(checkOut39);
        checkOut39.onAttributesInitialized();
        checkOut39.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut38.onChildrenAdded();
        final StackList element27 = new StackList();
        element27.onCheckOut();
        element27.setElementMap(elementMap2);
        element27.setHorizontal(false);
        checkOut35.addBasicElement(element27);
        element27.onAttributesInitialized();
        final PropertyElement checkOut40 = PropertyElement.checkOut();
        checkOut40.setElementMap(elementMap2);
        checkOut40.setName("describedState");
        checkOut40.setAttribute("content");
        checkOut40.setField("effectDescription");
        element27.addBasicElement(checkOut40);
        checkOut40.onAttributesInitialized();
        checkOut40.onChildrenAdded();
        final ItemRenderer element28 = new ItemRenderer();
        element28.onCheckOut();
        element28.setElementMap(elementMap2);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final ConditionResult element29 = new ConditionResult();
        element29.onCheckOut();
        element29.setElementMap(elementMap2);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        this.method24(element29);
        element29.onChildrenAdded();
        this.method25(element28);
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut35.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut4.onChildrenAdded();
        this.elementMaps.pop();
        final ElementMap elementMap3 = this.elementMaps.peek();
        popupElement.onChildrenAdded();
        this.method26(checkOut);
        this.method36(checkOut);
        this.method37(checkOut);
        this.method41(checkOut);
        this.method42(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemCondition element = new ItemCondition();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white11");
        element.setMinWidth(230);
        element.setMaxWidth(230);
        element.setExpandable(false);
        element.setEnableOnlySelectablePartInteraction(true);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setDisplaySize(new Dimension(54, 54));
        element.setScaled(true);
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("describedSpell");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("texture");
        checkOut4.setField("smallIconUrl");
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(190);
        element2.setMultiline(false);
        element2.setStyle("DefaultBold14White");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(completeNamePopup,1)");
        element2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element2.setOnPopupHide(onPopupHide);
        element2.setExpandable(false);
        element2.setNonBlocking(false);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 5, 5, 0));
        appearance.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setLocal(true);
        checkOut8.setAttribute("text");
        checkOut8.setField("name");
        element2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final String id = "completeNamePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final BorderLayoutData checkOut10 = BorderLayoutData.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setData(BorderLayoutData.Values.CENTER);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("PopupInformation");
        element4.setExpandable(false);
        checkOut9.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("describedSpell");
        checkOut12.setLocal(true);
        checkOut12.setAttribute("text");
        checkOut12.setField("name");
        element4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element4.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("PopupInformation");
        element5.setExpandable(false);
        checkOut9.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 3, 0, 0));
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("visible");
        checkOut14.setName("describedSpell");
        checkOut14.setLocal(true);
        checkOut14.setField("type");
        element5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut14.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("text");
        checkOut15.setName("describedSpell");
        checkOut15.setLocal(true);
        checkOut15.setField("type");
        element5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setExpandable(false);
        checkOut5.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.EAST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut18.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(0, 5, 0, 2));
        appearance4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("describedSpell");
        checkOut19.setLocal(true);
        checkOut19.setAttribute("visible");
        checkOut19.setField("isSupport");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        checkOut19.addBasicElement(element10);
        element10.onAttributesInitialized();
        final AndCondition element11 = new AndCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final FalseCondition element12 = new FalseCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final TrueCondition element13 = new TrueCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("describedSpell");
        checkOut20.setLocal(true);
        checkOut20.setAttribute("comparedValue");
        checkOut20.setField("maxLevel");
        element13.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        checkOut20.addBasicElement(element14);
        element14.onAttributesInitialized();
        final GreaterCondition element15 = new GreaterCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setValue("0");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final ProgressBar element16 = new ProgressBar();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setUseDecreaseProgressTween(false);
        element16.setStyle("XP2");
        element16.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(xpPopup,1)");
        element16.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element16.setOnPopupHide(onPopupHide2);
        checkOut18.addBasicElement(element16);
        element16.onAttributesInitialized();
        final String id2 = "xpPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element16.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement2.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final Label element17 = new Label();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("PopupInformation");
        element17.setText("%experience%".replace("%experience%", Xulor.getInstance().getTranslatedString("experience")));
        checkOut21.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element17.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element17.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut21.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setSize(new Dimension(100.0f, 10));
        element18.setAlign(Alignment17.CENTER);
        element18.setXOffset(1);
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("describedSpell");
        checkOut22.setLocal(true);
        checkOut22.setAttribute("value");
        checkOut22.setField("currentLevelPercentage");
        element16.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element16.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setStyle("ProgressBar");
        checkOut23.setPrefSize(new Dimension(0, 11));
        checkOut18.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setSize(new Dimension(100.0f, 11));
        element19.setAlign(Alignment17.CENTER);
        checkOut23.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final Label element20 = new Label();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setNonBlocking(true);
        element20.setStyle("White10Bordered");
        checkOut18.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element20.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.CENTER);
        element20.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment17.CENTER);
        element21.setYOffset(2);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("describedSpell");
        checkOut24.setLocal(true);
        checkOut24.setAttribute("text");
        checkOut24.setField("currentLevelString");
        element20.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("11Light");
        element22.setNonBlocking(true);
        element22.setExpandable(false);
        checkOut16.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element22.getAppearance();
        appearance7.setElementMap(elementMap);
        element22.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(0, 0, 0, 2));
        appearance7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(0, 0, 2, 0));
        appearance7.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setName("describedSpell");
        checkOut26.setLocal(true);
        checkOut26.setAttribute("text");
        checkOut26.setField("levelTextShort");
        element22.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setName("describedSpell");
        checkOut27.setLocal(true);
        checkOut27.setAttribute("visible");
        checkOut27.setField("maxLevel");
        element22.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        checkOut27.addBasicElement(element24);
        element24.onAttributesInitialized();
        final GreaterCondition element25 = new GreaterCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("0");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut27.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setExpandable(false);
        checkOut5.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.EAST);
        checkOut28.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final RowLayout checkOut29 = RowLayout.checkOut();
        checkOut29.setHorizontal(true);
        checkOut28.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setExpandable(false);
        checkOut30.setPrefSize(new Dimension(0, 25));
        checkOut28.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final RowLayoutData element27 = new RowLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAlign(Alignment9.EAST);
        checkOut30.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Container checkOut31 = Container.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setExpandable(false);
        checkOut31.setNonBlocking(false);
        checkOut31.setVisible(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(chragePopup,1)");
        checkOut31.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut31.setOnPopupHide(onPopupHide3);
        checkOut30.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        this.method27(checkOut31);
        this.method28(checkOut31);
        this.method29(checkOut31);
        this.method30(checkOut31);
        this.method31(checkOut31);
        checkOut31.onChildrenAdded();
        this.method32(checkOut30);
        this.method33(checkOut30);
        this.method34(checkOut30);
        this.method35(checkOut30);
        checkOut30.onChildrenAdded();
        checkOut28.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "chragePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%critere.chrage%".replace("%critere.chrage%", Xulor.getInstance().getTranslatedString("critere.chrage")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHgap((short)2);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("editableDescribedSpell");
        checkOut.setField("chrage");
        checkOut.setLocal(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final GreaterCondition element2 = new GreaterCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("11Light");
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("editableDescribedSpell");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("chrage");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("iconCHRAGE");
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setNonBlocking(false);
        checkOut.setVisible(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(apPopup,1)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "apPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%APShort%".replace("%APShort%", Xulor.getInstance().getTranslatedString("APShort")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHgap((short)2);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("visible");
        checkOut4.setName("editableDescribedSpell");
        checkOut4.setField("ap");
        checkOut4.setLocal(true);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("0");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setExpandable(false);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("text");
        checkOut5.setField("ap");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("iconAP");
        element5.setExpandable(false);
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setVisible(false);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(mpPopup,1)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "mpPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%MPShort%".replace("%MPShort%", Xulor.getInstance().getTranslatedString("MPShort")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHgap((short)2);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setField("mp");
        checkOut5.setLocal(true);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("0");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setExpandable(false);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("editableDescribedSpell");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("mp");
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("iconMP");
        element5.setExpandable(false);
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setVisible(false);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(wpPopup,1)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "wpPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%WPShort%".replace("%WPShort%", Xulor.getInstance().getTranslatedString("WPShort")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHgap((short)2);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setField("wp");
        checkOut5.setLocal(true);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("0");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setExpandable(false);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("editableDescribedSpell");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("wp");
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("iconWP");
        element5.setExpandable(false);
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("editableDescribedSpell");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("isPassive");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final FalseCondition element2 = new FalseCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.EAST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHgap((short)2);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("text");
        checkOut5.setField("range");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("rangeIcon");
        element5.setExpandable(false);
        element5.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(rangePopup,1)");
        element5.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element5.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final String id = "rangePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element5.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(10, 0));
        checkOut6.setStyle("popup");
        popupElement.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.NORTH);
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        element6.setText("%RANGE%".replace("%RANGE%", Xulor.getInstance().getTranslatedString("RANGE")));
        element6.setExpandable(false);
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut6.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("editableDescribedSpell");
        checkOut8.setLocal(true);
        checkOut8.setAttribute("style");
        checkOut8.setField("testLineOfSight");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("rangeIcon");
        element7.setElseValue("noLineOfSightIcon");
        checkOut8.addBasicElement(element7);
        element7.onAttributesInitialized();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element5.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("UnlockedRange");
        element9.setExpandable(false);
        element9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(modifiableRangePopup,1)");
        element9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide2);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final String id2 = "modifiableRangePopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element9.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.NORTH);
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("PopupInformation");
        element10.setText("%modifiableRange%".replace("%modifiableRange%", Xulor.getInstance().getTranslatedString("modifiableRange")));
        element10.setExpandable(false);
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element10.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("editableDescribedSpell");
        checkOut11.setLocal(true);
        checkOut11.setAttribute("visible");
        checkOut11.setField("modifiableRange");
        element10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("editableDescribedSpell");
        checkOut12.setLocal(true);
        checkOut12.setAttribute("visible");
        checkOut12.setField("modifiableRange");
        element9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element9.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("SpellInLine");
        element11.setExpandable(false);
        element11.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(modifiableRangePopup,1)");
        element11.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element11.setOnPopupHide(onPopupHide3);
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final String id3 = "modifiableRangePopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH);
        popupElement3.setHotSpotPosition(Alignment9.SOUTH);
        element11.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setPrefSize(new Dimension(10, 0));
        checkOut13.setStyle("popup");
        popupElement3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.NORTH);
        checkOut14.setHorizontal(false);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("PopupInformation");
        element12.setText("%spellDetail.castLineValid%".replace("%spellDetail.castLineValid%", Xulor.getInstance().getTranslatedString("spellDetail.castLineValid")));
        element12.setExpandable(false);
        checkOut13.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element12.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("editableDescribedSpell");
        checkOut15.setLocal(true);
        checkOut15.setAttribute("visible");
        checkOut15.setField("castOnlyInLine");
        element12.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut13.onChildrenAdded();
        popupElement3.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("editableDescribedSpell");
        checkOut16.setLocal(true);
        checkOut16.setAttribute("visible");
        checkOut16.setField("castOnlyInLine");
        element11.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 75));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("describedSpell");
        checkOut2.setField("longDescription");
        checkOut2.setLocal(true);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("false");
        element.setElseValue("true");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NullCondition element2 = new NullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final ScrollContainer element3 = new ScrollContainer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setVerticalScrollBarPosition(1.0f);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        element4.setStyle("narrow12");
        element4.setMinWidth(260);
        element4.setEnableOnlySelectablePartInteraction(true);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.WEST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance = element4.getAppearance();
        appearance.setElementMap(elementMap);
        element4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 5, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("describedSpell");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("longDescription");
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "tabbedContainer";
        final TabbedContainer tabbedContainer = new TabbedContainer();
        tabbedContainer.onCheckOut();
        tabbedContainer.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, tabbedContainer);
        }
        tabbedContainer.setTabsSizesEquilibrate(true);
        tabbedContainer.setTextOrientation(Orientation.EAST);
        tabbedContainer.setTabsLabelAlignment(Alignment9.CENTER);
        tabbedContainer.setTabsPosition(Alignment4.NORTH);
        tabbedContainer.setTabsAlignment(Alignment5.WEST);
        tabbedContainer.setExpandable(false);
        tabbedContainer.setPrefSize(new Dimension(0, 76));
        tabbedContainer.setStyle("dark");
        basicElement.addBasicElement(tabbedContainer);
        tabbedContainer.onAttributesInitialized();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%effects%".replace("%effects%", Xulor.getInstance().getTranslatedString("effects")));
        tabbedContainer.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("editableDescribedSpell");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("isPassive");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("%passive%".replace("%passive%", Xulor.getInstance().getTranslatedString("passive")));
        element2.setElseValue("%effects%".replace("%effects%", Xulor.getInstance().getTranslatedString("effects")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element4 = new PlainBorder();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(1, 0, 1, 0));
        element4.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final List element5 = new List();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setCellSize(new Dimension(380, 15));
        element5.setPrefSize(new Dimension(380, 60));
        element5.setHorizontal(false);
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("content");
        checkOut5.setField("shortDescription");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ItemRenderer element6 = new ItemRenderer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final AndCondition element8 = new AndCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ItemCondition element9 = new ItemCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        final ListCondition element11 = new ListCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setKey("evenIndex");
        element8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final TrueCondition element12 = new TrueCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element6.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut6.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element13 = new PlainBackground();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance2.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("white11");
        element14.setMultiline(false);
        element14.setMinWidth(360);
        element14.setMaxWidth(360);
        element14.setExpandable(false);
        element14.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element14.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(effectDescPopup,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        element14.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element14.setOnPopupHide(onPopupHide);
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        final String id2 = "effectDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element14.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("white11");
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut8.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance3 = element14.getAppearance();
        appearance3.setElementMap(elementMap);
        element14.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element14.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element6.onChildrenAdded();
        final ItemRenderer element18 = new ItemRenderer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element5.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final AndCondition element20 = new AndCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemCondition element21 = new ItemCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final NotNullCondition element22 = new NotNullCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        final ListCondition element23 = new ListCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setKey("oddIndex");
        element20.addBasicElement(element23);
        element23.onAttributesInitialized();
        final TrueCondition element24 = new TrueCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element18.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBackground element25 = new PlainBackground();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance4.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element26 = new TextView();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("white11");
        element26.setMultiline(false);
        element26.setMinWidth(360);
        element26.setMaxWidth(360);
        element26.setExpandable(false);
        element26.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element26.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(effectDescPopup,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        element26.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element26.setOnPopupHide(onPopupHide2);
        checkOut10.addBasicElement(element26);
        element26.onAttributesInitialized();
        final String id3 = "effectDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_WEST);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element26.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        popupElement2.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final TextView element27 = new TextView();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("white11");
        element27.setMultiline(false);
        element27.setExpandable(false);
        checkOut12.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final DecoratorAppearance appearance5 = element26.getAppearance();
        appearance5.setElementMap(elementMap);
        element26.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element26.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element18.onChildrenAdded();
        final ItemRenderer element30 = new ItemRenderer();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element5.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ConditionResult element31 = new ConditionResult();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final AndCondition element32 = new AndCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ItemCondition element33 = new ItemCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final NullCondition element34 = new NullCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        final String id4 = "test";
        final ListCondition listCondition = new ListCondition();
        listCondition.onCheckOut();
        listCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, listCondition);
        }
        listCondition.setKey("oddIndex");
        element32.addBasicElement(listCondition);
        listCondition.onAttributesInitialized();
        final TrueCondition element35 = new TrueCondition();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        listCondition.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        listCondition.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        element30.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut14.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBackground element36 = new PlainBackground();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance6.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element30.onChildrenAdded();
        final ItemRenderer element37 = new ItemRenderer();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element5.addBasicElement(element37);
        element37.onAttributesInitialized();
        final ConditionResult element38 = new ConditionResult();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        final AndCondition element39 = new AndCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        final ItemCondition element40 = new ItemCondition();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element39.addBasicElement(element40);
        element40.onAttributesInitialized();
        final NullCondition element41 = new NullCondition();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element40.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        element40.onChildrenAdded();
        final ListCondition element42 = new ListCondition();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setKey("evenIndex");
        element39.addBasicElement(element42);
        element42.onAttributesInitialized();
        final TrueCondition element43 = new TrueCondition();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element42.addBasicElement(element43);
        element43.onAttributesInitialized();
        element43.onChildrenAdded();
        element42.onChildrenAdded();
        element39.onChildrenAdded();
        element38.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        element37.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut15.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final PlainBackground element44 = new PlainBackground();
        element44.onCheckOut();
        element44.setElementMap(elementMap);
        element44.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance7.addBasicElement(element44);
        element44.onAttributesInitialized();
        element44.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element37.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        this.method38(tabbedContainer);
        this.method39(tabbedContainer);
        tabbedContainer.onChildrenAdded();
        return tabbedContainer;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%critical%".replace("%critical%", Xulor.getInstance().getTranslatedString("critical")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("editableDescribedSpell");
        checkOut.setField("hasCriticalEffect");
        checkOut.setLocal(true);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element2 = new PlainBorder();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(1, 0, 1, 0));
        element2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final List element3 = new List();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setCellSize(new Dimension(380, 15));
        element3.setPrefSize(new Dimension(380, 60));
        element3.setHorizontal(false);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("content");
        checkOut5.setField("criticalDescription");
        element3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ItemRenderer element4 = new ItemRenderer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final AndCondition element6 = new AndCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final ListCondition element9 = new ListCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setKey("evenIndex");
        element6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final TrueCondition element10 = new TrueCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut6.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element11 = new PlainBackground();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance2.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("white11");
        element12.setMultiline(false);
        element12.setMinWidth(360);
        element12.setMaxWidth(360);
        element12.setExpandable(false);
        element12.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element12.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(effectDescPopup,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        checkOut6.addBasicElement(element12);
        element12.onAttributesInitialized();
        final String id = "effectDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element12.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("white11");
        element13.setMultiline(false);
        element13.setExpandable(false);
        checkOut8.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("text");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element12.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        final ItemRenderer element16 = new ItemRenderer();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element3.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final AndCondition element18 = new AndCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemCondition element19 = new ItemCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final NotNullCondition element20 = new NotNullCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final ListCondition element21 = new ListCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setKey("oddIndex");
        element18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final TrueCondition element22 = new TrueCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element16.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBackground element23 = new PlainBackground();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance4.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("white11");
        element24.setMultiline(false);
        element24.setMinWidth(360);
        element24.setMaxWidth(360);
        element24.setExpandable(false);
        element24.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element24.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(effectDescPopup,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        element24.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element24.setOnPopupHide(onPopupHide2);
        checkOut10.addBasicElement(element24);
        element24.onAttributesInitialized();
        final String id2 = "effectDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_WEST);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element24.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        popupElement2.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("white11");
        element25.setMultiline(false);
        element25.setExpandable(false);
        checkOut12.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("text");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final DecoratorAppearance appearance5 = element24.getAppearance();
        appearance5.setElementMap(elementMap);
        element24.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element24.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element16.onChildrenAdded();
        final ItemRenderer element28 = new ItemRenderer();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element3.addBasicElement(element28);
        element28.onAttributesInitialized();
        final ConditionResult element29 = new ConditionResult();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final AndCondition element30 = new AndCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemCondition element31 = new ItemCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final NullCondition element32 = new NullCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        final String id3 = "test";
        final ListCondition listCondition = new ListCondition();
        listCondition.onCheckOut();
        listCondition.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, listCondition);
        }
        listCondition.setKey("oddIndex");
        element30.addBasicElement(listCondition);
        listCondition.onAttributesInitialized();
        final TrueCondition element33 = new TrueCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        listCondition.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        listCondition.onChildrenAdded();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        element28.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut14.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBackground element34 = new PlainBackground();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance6.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element28.onChildrenAdded();
        final ItemRenderer element35 = new ItemRenderer();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element3.addBasicElement(element35);
        element35.onAttributesInitialized();
        final ConditionResult element36 = new ConditionResult();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final AndCondition element37 = new AndCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        final ItemCondition element38 = new ItemCondition();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        final NullCondition element39 = new NullCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        element38.onChildrenAdded();
        final ListCondition element40 = new ListCondition();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setKey("evenIndex");
        element37.addBasicElement(element40);
        element40.onAttributesInitialized();
        final TrueCondition element41 = new TrueCondition();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element40.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        element40.onChildrenAdded();
        element37.onChildrenAdded();
        element36.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        element35.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut15.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final PlainBackground element42 = new PlainBackground();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance7.addBasicElement(element42);
        element42.onAttributesInitialized();
        element42.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element35.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%requirements%".replace("%requirements%", Xulor.getInstance().getTranslatedString("requirements")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("editableDescribedSpell");
        checkOut.setField("hasCastIntervalRestrictions");
        checkOut.setLocal(true);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final OrCondition element3 = new OrCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("comparedValue");
        checkOut2.setName("editableDescribedSpell");
        checkOut2.setField("conditionsDescription");
        checkOut2.setLocal(true);
        element5.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotCondition element7 = new NotCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NullCondition element8 = new NullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element9 = new PlainBorder();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(1, 0, 1, 0));
        element9.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut5.setAlign(Alignment9.NORTH);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final List element10 = new List();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setCellSize(new Dimension(380, 15));
        element10.setPrefSize(new Dimension(380, 60));
        element10.setHorizontal(false);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("editableDescribedSpell");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("content");
        checkOut6.setField("conditionsDescription");
        element10.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final AndCondition element13 = new AndCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ItemCondition element14 = new ItemCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final NotNullCondition element15 = new NotNullCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final ListCondition element16 = new ListCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setKey("evenIndex");
        element13.addBasicElement(element16);
        element16.onAttributesInitialized();
        final TrueCondition element17 = new TrueCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        element11.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element18 = new PlainBackground();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance2.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("white11");
        element19.setMultiline(false);
        element19.setMinWidth(360);
        element19.setMaxWidth(360);
        element19.setExpandable(false);
        element19.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element19.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(effectDescPopup,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        element19.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element19.setOnPopupHide(onPopupHide);
        checkOut7.addBasicElement(element19);
        element19.onAttributesInitialized();
        final String id = "effectDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element19.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("white11");
        element20.setMultiline(false);
        element20.setExpandable(false);
        checkOut9.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance3 = element19.getAppearance();
        appearance3.setElementMap(elementMap);
        element19.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("text");
        element19.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element11.onChildrenAdded();
        final ItemRenderer element23 = new ItemRenderer();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element10.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final AndCondition element25 = new AndCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemCondition element26 = new ItemCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final ListCondition element28 = new ListCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setKey("oddIndex");
        element25.addBasicElement(element28);
        element28.onAttributesInitialized();
        final TrueCondition element29 = new TrueCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        element23.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut11.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBackground element30 = new PlainBackground();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance4.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final TextView element31 = new TextView();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("white11");
        element31.setMultiline(false);
        element31.setMinWidth(360);
        element31.setMaxWidth(360);
        element31.setExpandable(false);
        element31.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element31.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(effectDescPopup,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        element31.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element31.setOnPopupHide(onPopupHide2);
        checkOut11.addBasicElement(element31);
        element31.onAttributesInitialized();
        final String id2 = "effectDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_WEST);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element31.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setPrefSize(new Dimension(10, 0));
        checkOut13.setStyle("popup");
        popupElement2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final TextView element32 = new TextView();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("white11");
        element32.setMultiline(false);
        element32.setExpandable(false);
        checkOut13.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("text");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        checkOut13.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final DecoratorAppearance appearance5 = element31.getAppearance();
        appearance5.setElementMap(elementMap);
        element31.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("text");
        element31.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element23.onChildrenAdded();
        final ItemRenderer element35 = new ItemRenderer();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element10.addBasicElement(element35);
        element35.onAttributesInitialized();
        final ConditionResult element36 = new ConditionResult();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final AndCondition element37 = new AndCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        final ItemCondition element38 = new ItemCondition();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        final NullCondition element39 = new NullCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        element38.onChildrenAdded();
        final String id3 = "test";
        final ListCondition listCondition = new ListCondition();
        listCondition.onCheckOut();
        listCondition.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, listCondition);
        }
        listCondition.setKey("oddIndex");
        element37.addBasicElement(listCondition);
        listCondition.onAttributesInitialized();
        final TrueCondition element40 = new TrueCondition();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        listCondition.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        listCondition.onChildrenAdded();
        element37.onChildrenAdded();
        element36.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        element35.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut15.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBackground element41 = new PlainBackground();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance6.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element35.onChildrenAdded();
        final ItemRenderer element42 = new ItemRenderer();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element10.addBasicElement(element42);
        element42.onAttributesInitialized();
        final ConditionResult element43 = new ConditionResult();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element42.addBasicElement(element43);
        element43.onAttributesInitialized();
        final AndCondition element44 = new AndCondition();
        element44.onCheckOut();
        element44.setElementMap(elementMap);
        element43.addBasicElement(element44);
        element44.onAttributesInitialized();
        final ItemCondition element45 = new ItemCondition();
        element45.onCheckOut();
        element45.setElementMap(elementMap);
        element44.addBasicElement(element45);
        element45.onAttributesInitialized();
        final NullCondition element46 = new NullCondition();
        element46.onCheckOut();
        element46.setElementMap(elementMap);
        element45.addBasicElement(element46);
        element46.onAttributesInitialized();
        element46.onChildrenAdded();
        element45.onChildrenAdded();
        final ListCondition element47 = new ListCondition();
        element47.onCheckOut();
        element47.setElementMap(elementMap);
        element47.setKey("evenIndex");
        element44.addBasicElement(element47);
        element47.onAttributesInitialized();
        final TrueCondition element48 = new TrueCondition();
        element48.onCheckOut();
        element48.setElementMap(elementMap);
        element47.addBasicElement(element48);
        element48.onAttributesInitialized();
        element48.onChildrenAdded();
        element47.onChildrenAdded();
        element44.onChildrenAdded();
        element43.onChildrenAdded();
        this.method40(element42);
        element42.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element = new PlainBackground();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method41(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(0, 33));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedSpell");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("maxLevel");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method42(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedSpell");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("maxLevel");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final GreaterCondition element2 = new GreaterCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setText("%characterBook.progress%%colon%".replace("%characterBook.progress%", Xulor.getInstance().getTranslatedString("characterBook.progress")).replace("%colon%", Xulor.getInstance().getTranslatedString("colon")));
        element3.setExpandable(false);
        element3.setStyle("11");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 0, 2));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(0, 0, 2, 0));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("11Light");
        element5.setText("0");
        element5.setExpandable(false);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 2));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        final Slider element6 = new Slider();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setHorizontal(true);
        element6.setStyle("volume");
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.spellDetails:setSpellLevel");
        element6.setOnSliderMove(onSliderMove);
        element6.setMinBound(0);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("maxBound");
        checkOut6.setName("editableDescribedSpell");
        checkOut6.setField("maxLevel");
        checkOut6.setLocal(true);
        element6.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("value");
        checkOut7.setName("editableDescribedSpell");
        checkOut7.setField("level");
        checkOut7.setLocal(true);
        element6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(5, 2, 5, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("11Light");
        element7.setExpandable(false);
        checkOut9.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element7.getAppearance();
        appearance4.setElementMap(elementMap);
        element7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 2, 0, 5));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("text");
        checkOut11.setName("editableDescribedSpell");
        checkOut11.setField("maxLevel");
        checkOut11.setLocal(true);
        element7.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element7.onChildrenAdded();
        final String id = "levelTextEditor";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textEditor);
        }
        textEditor.setStyle("dark");
        textEditor.setPrefSize(new Dimension(25, 15));
        textEditor.setExpandable(false);
        textEditor.setMaxChars(3);
        textEditor.setRestrict("[0-9]+");
        final KeyTypedListener onKeyType = new KeyTypedListener();
        onKeyType.setCallBackFunc("wakfu.spellDetails:keyType(levelTextEditor)");
        textEditor.setOnKeyType(onKeyType);
        checkOut9.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("text");
        checkOut12.setName("editableDescribedSpell");
        checkOut12.setField("level");
        checkOut12.setLocal(true);
        textEditor.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance5 = textEditor.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.EAST);
        textEditor.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Button element8 = new Button();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:restore");
        element8.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(restorePopup)");
        element8.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element8.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element8.getAppearance();
        appearance6.setElementMap(elementMap);
        element8.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 5, 0, 0));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id2 = "restorePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element8.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        popupElement.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("PopupInformation");
        element9.setText("%restore%".replace("%restore%", Xulor.getInstance().getTranslatedString("restore")));
        checkOut14.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element9.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.WEST);
        element9.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("GoBackIcon");
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method43(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(3, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%erase%".replace("%erase%", Xulor.getInstance().getTranslatedString("erase")));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellsRestat:reset");
        element.setOnClick(onClick);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("enabled");
        checkOut3.setName("spellsRestatManager");
        checkOut3.setField("isDirty");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        final Spacer element4 = new Spacer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final String id = "validButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setExpandable(false);
        button.setText("%desc.editBind%".replace("%desc.editBind%", Xulor.getInstance().getTranslatedString("desc.editBind")));
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.spellsRestat:valid");
        button.setOnClick(onClick2);
        checkOut.addBasicElement(button);
        button.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        button.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance3 = button.getAppearance();
        appearance3.setElementMap(elementMap);
        button.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(0, 10, 0, 10));
        appearance3.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("enabled");
        checkOut4.setName("spellsRestatManager");
        checkOut4.setField("canValid");
        button.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        button.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method44(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method45(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.CENTER);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method46(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "spellDetailPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final ElementMap parentElementMap = elementMap;
        final ElementMap elementMap2 = this.env.createElementMap(((elementMap != null) ? elementMap.getId() : "") + ".itemDetailPopupInc");
        elementMap2.setParentElementMap(parentElementMap);
        this.elementMaps.push(elementMap2);
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap2);
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap2);
        checkOut2.setStyle("popup");
        checkOut2.setPrefSize(new Dimension(240, 0));
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap2);
        checkOut3.setName("describedSpell");
        checkOut3.setAttribute("visible");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap2);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap2);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap2);
        checkOut5.setExpandable(false);
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap2);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap2);
        checkOut8.setExpandable(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setAlign(Alignment9.WEST);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap2);
        element3.setPrefSize(new Dimension(24, 24));
        element3.setExpandable(false);
        checkOut8.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap2);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap2);
        element3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap2);
        checkOut11.setName("describedSpell");
        checkOut11.setAttribute("texture");
        checkOut11.setField("elementsUsedIconURL");
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap2);
        element5.setStyle("DefaultBold14White");
        element5.setExpandable(false);
        element5.setMinWidth(1);
        element5.setMaxWidth(180);
        checkOut8.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap2);
        element6.setAlign(Alignment9.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance = element5.getAppearance();
        appearance.setElementMap(elementMap2);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH_WEST);
        element5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap2);
        checkOut12.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap2);
        checkOut13.setName("describedSpell");
        checkOut13.setAttribute("text");
        checkOut13.setField("name");
        element5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Spacer element7 = new Spacer();
        element7.onCheckOut();
        element7.setElementMap(elementMap2);
        checkOut7.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap2);
        checkOut14.setExpandable(false);
        checkOut7.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap2);
        element8.setStyle("11light");
        checkOut14.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element8.getAppearance();
        appearance2.setElementMap(elementMap2);
        element8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap2);
        checkOut15.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap2);
        checkOut16.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap2);
        checkOut17.setName("describedSpell");
        checkOut17.setAttribute("text");
        checkOut17.setField("levelTextShort");
        element8.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap2);
        checkOut18.setExpandable(false);
        checkOut5.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut18.getAppearance();
        appearance3.setElementMap(elementMap2);
        checkOut18.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap2);
        checkOut19.setInsets(new Insets(0, 0, 0, 0));
        appearance3.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.EAST);
        checkOut18.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap2);
        checkOut21.setExpandable(false);
        checkOut21.setVisible(false);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHgap((short)2);
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap2);
        checkOut23.setAttribute("visible");
        checkOut23.setName("describedSpell");
        checkOut23.setField("ap");
        checkOut21.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap2);
        checkOut23.addBasicElement(element9);
        element9.onAttributesInitialized();
        final GreaterCondition element10 = new GreaterCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap2);
        element10.setValue("0");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap2);
        element11.setStyle("11Light");
        element11.setExpandable(false);
        checkOut21.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap2);
        checkOut24.setName("describedSpell");
        checkOut24.setAttribute("text");
        checkOut24.setField("ap");
        element11.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap2);
        element12.setStyle("iconAP");
        element12.setExpandable(false);
        checkOut21.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut21.getAppearance();
        appearance4.setElementMap(elementMap2);
        checkOut21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap2);
        checkOut25.setInsets(new Insets(0, 3, 0, 0));
        appearance4.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap2);
        checkOut26.setExpandable(false);
        checkOut26.setVisible(false);
        checkOut18.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setHgap((short)2);
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final PropertyElement checkOut28 = PropertyElement.checkOut();
        checkOut28.setElementMap(elementMap2);
        checkOut28.setAttribute("visible");
        checkOut28.setName("describedSpell");
        checkOut28.setField("chrage");
        checkOut26.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap2);
        checkOut28.addBasicElement(element13);
        element13.onAttributesInitialized();
        final GreaterCondition element14 = new GreaterCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap2);
        element14.setValue("0");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap2);
        element15.setStyle("11Light");
        element15.setExpandable(false);
        checkOut26.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap2);
        checkOut29.setName("describedSpell");
        checkOut29.setAttribute("text");
        checkOut29.setField("chrage");
        element15.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        element15.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap2);
        element16.setStyle("iconCHRAGE");
        element16.setExpandable(false);
        checkOut26.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut26.getAppearance();
        appearance5.setElementMap(elementMap2);
        checkOut26.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap2);
        checkOut30.setInsets(new Insets(0, 3, 0, 0));
        appearance5.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut26.onChildrenAdded();
        final Container checkOut31 = Container.checkOut();
        checkOut31.setElementMap(elementMap2);
        checkOut31.setExpandable(false);
        checkOut31.setVisible(false);
        checkOut18.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        final RowLayout checkOut32 = RowLayout.checkOut();
        checkOut32.setHgap((short)2);
        checkOut31.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        final PropertyElement checkOut33 = PropertyElement.checkOut();
        checkOut33.setElementMap(elementMap2);
        checkOut33.setAttribute("visible");
        checkOut33.setName("describedSpell");
        checkOut33.setField("mp");
        checkOut31.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap2);
        checkOut33.addBasicElement(element17);
        element17.onAttributesInitialized();
        final GreaterCondition element18 = new GreaterCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap2);
        element18.setValue("0");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut33.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap2);
        element19.setStyle("11Light");
        element19.setExpandable(false);
        checkOut31.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PropertyElement checkOut34 = PropertyElement.checkOut();
        checkOut34.setElementMap(elementMap2);
        checkOut34.setName("describedSpell");
        checkOut34.setAttribute("text");
        checkOut34.setField("mp");
        element19.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        checkOut34.onChildrenAdded();
        element19.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap2);
        element20.setStyle("iconMP");
        element20.setExpandable(false);
        checkOut31.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut31.getAppearance();
        appearance6.setElementMap(elementMap2);
        checkOut31.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut35 = Margin.checkOut();
        checkOut35.setElementMap(elementMap2);
        checkOut35.setInsets(new Insets(0, 3, 0, 0));
        appearance6.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        checkOut35.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut31.onChildrenAdded();
        final Container checkOut36 = Container.checkOut();
        checkOut36.setElementMap(elementMap2);
        checkOut36.setExpandable(false);
        checkOut36.setVisible(false);
        checkOut18.addBasicElement(checkOut36);
        checkOut36.onAttributesInitialized();
        final RowLayout checkOut37 = RowLayout.checkOut();
        checkOut37.setHgap((short)2);
        checkOut36.addBasicElement(checkOut37);
        checkOut37.onAttributesInitialized();
        checkOut37.onChildrenAdded();
        final PropertyElement checkOut38 = PropertyElement.checkOut();
        checkOut38.setElementMap(elementMap2);
        checkOut38.setAttribute("visible");
        checkOut38.setName("describedSpell");
        checkOut38.setField("wp");
        checkOut36.addBasicElement(checkOut38);
        checkOut38.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap2);
        checkOut38.addBasicElement(element21);
        element21.onAttributesInitialized();
        final GreaterCondition element22 = new GreaterCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap2);
        element22.setValue("0");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut38.onChildrenAdded();
        final Label element23 = new Label();
        element23.onCheckOut();
        element23.setElementMap(elementMap2);
        element23.setStyle("11Light");
        element23.setExpandable(false);
        checkOut36.addBasicElement(element23);
        element23.onAttributesInitialized();
        final PropertyElement checkOut39 = PropertyElement.checkOut();
        checkOut39.setElementMap(elementMap2);
        checkOut39.setName("describedSpell");
        checkOut39.setAttribute("text");
        checkOut39.setField("wp");
        element23.addBasicElement(checkOut39);
        checkOut39.onAttributesInitialized();
        checkOut39.onChildrenAdded();
        element23.onChildrenAdded();
        final Image element24 = new Image();
        element24.onCheckOut();
        element24.setElementMap(elementMap2);
        element24.setStyle("iconWP");
        element24.setExpandable(false);
        checkOut36.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut36.getAppearance();
        appearance7.setElementMap(elementMap2);
        checkOut36.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut40 = Margin.checkOut();
        checkOut40.setElementMap(elementMap2);
        checkOut40.setInsets(new Insets(0, 3, 0, 0));
        appearance7.addBasicElement(checkOut40);
        checkOut40.onAttributesInitialized();
        checkOut40.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut36.onChildrenAdded();
        final Container checkOut41 = Container.checkOut();
        checkOut41.setElementMap(elementMap2);
        checkOut41.setExpandable(false);
        checkOut18.addBasicElement(checkOut41);
        checkOut41.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut41.getAppearance();
        appearance8.setElementMap(elementMap2);
        checkOut41.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut42 = Margin.checkOut();
        checkOut42.setElementMap(elementMap2);
        checkOut42.setInsets(new Insets(2, 0, 0, 0));
        appearance8.addBasicElement(checkOut42);
        checkOut42.onAttributesInitialized();
        checkOut42.onChildrenAdded();
        appearance8.onChildrenAdded();
        this.method47(checkOut41);
        this.method48(checkOut41);
        this.method49(checkOut41);
        this.method50(checkOut41);
        this.method51(checkOut41);
        this.method52(checkOut41);
        this.method53(checkOut41);
        checkOut41.onChildrenAdded();
        checkOut18.onChildrenAdded();
        checkOut5.onChildrenAdded();
        this.method54(checkOut2);
        this.method55(checkOut2);
        this.method56(checkOut2);
        this.method57(checkOut2);
        this.method58(checkOut2);
        this.method59(checkOut2);
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        this.elementMaps.pop();
        final ElementMap elementMap3 = this.elementMaps.peek();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method47(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.EAST);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method48(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHgap((short)2);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method49(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("11Light");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("text");
        checkOut.setField("range");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method50(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("rangeIcon");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("style");
        checkOut.setField("testLineOfSight");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("rangeIcon");
        element2.setElseValue("noLineOfSightIcon");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method51(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("UnlockedRange");
        element.setExpandable(false);
        element.setNonBlocking(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("visible");
        checkOut.setField("modifiableRange");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method52(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("SpellInLine");
        element.setExpandable(false);
        element.setNonBlocking(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("visible");
        checkOut.setField("castOnlyInLine");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method53(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method54(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("describedSpell");
        checkOut2.setField("longDescription");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("false");
        element.setElseValue("true");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NullCondition element2 = new NullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setStyle("narrow12");
        element3.setMinWidth(1);
        element3.setMaxWidth(230);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setAttribute("text");
        checkOut8.setField("longDescription");
        element3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method55(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("describedSpell");
        checkOut2.setField("hasCastIntervalRestrictions");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%requirements%".replace("%requirements%", Xulor.getInstance().getTranslatedString("requirements")));
        element.setStyle("11BoldLight");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 5, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white11");
        element2.setMinWidth(1);
        element2.setMaxWidth(225);
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance3 = element2.getAppearance();
        appearance3.setElementMap(elementMap);
        element2.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 5, 0));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setAttribute("text");
        checkOut8.setField("castIntervalRestrictionsDescription");
        element2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method56(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut3.setStyle("lineSeparator2");
        checkOut3.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("describedSpell");
        checkOut5.setField("effectNumber");
        element.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("false");
        element3.setElseValue("true");
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final EqualCondition element4 = new EqualCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("0");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white11");
        element9.setMultiline(false);
        element9.setMinWidth(250);
        element9.setMaxWidth(250);
        element9.setExpandable(false);
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element5.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setAttribute("content");
        checkOut8.setField("description");
        element.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method57(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut3.setStyle("lineSeparator2");
        checkOut3.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("white11");
        element7.setMultiline(false);
        element7.setMinWidth(250);
        element7.setMaxWidth(250);
        element7.setExpandable(false);
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method58(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setStyle("lineSeparator2");
        checkOut.setPrefSize(new Dimension(50, 1));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method59(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setMultiline(true);
        element.setMinWidth(0);
        element.setStyle("PopupInformation");
        element.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
