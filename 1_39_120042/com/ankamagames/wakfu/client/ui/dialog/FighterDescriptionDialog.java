package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;

public class FighterDescriptionDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public FighterDescriptionDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "craftContainer";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("StyledBold16White");
        element8.setNonBlocking(true);
        element8.setMaxWidth(190);
        element8.setExpandable(false);
        element8.setEnableAutoZoomShrink(true);
        element8.setMaxSize(new Dimension(170, 10000));
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("text");
        checkOut8.setLocal(true);
        checkOut8.setName("fighter");
        checkOut8.setField("nameAndLevel");
        element8.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut9.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut11);
        }
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(0, 3, 0, 3));
        appearance6.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id3 = "mainContainer";
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut14);
        }
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final String id4 = "resistPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        checkOut14.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setPrefSize(new Dimension(10, 0));
        checkOut15.setStyle("popup");
        popupElement.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setExpandable(false);
        element10.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element10.setStyle("PopupInformation");
        checkOut15.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element10.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.EAST);
        element10.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut15.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut14.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setExpandable(false);
        checkOut19.setNeedsScissor(true);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final String id5 = "localPlayerDisplay";
        final AnimatedElementViewer animatedElementViewer = new AnimatedElementViewer();
        animatedElementViewer.onCheckOut();
        animatedElementViewer.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, animatedElementViewer);
        }
        animatedElementViewer.setOffsetY(-45.0f);
        animatedElementViewer.setOffsetX(0.0f);
        animatedElementViewer.setPrefSize(new Dimension(125, 125));
        animatedElementViewer.setAnimName("AnimStatique");
        animatedElementViewer.setDirection(3);
        checkOut19.addBasicElement(animatedElementViewer);
        animatedElementViewer.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setLocal(true);
        checkOut20.setName("fighter");
        checkOut20.setAttribute("scale");
        checkOut20.setField("actorStandardScale");
        animatedElementViewer.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setLocal(true);
        checkOut21.setName("fighter");
        checkOut21.setAttribute("animatedElement");
        checkOut21.setField("actorDescriptorLibrary");
        animatedElementViewer.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setLocal(true);
        checkOut22.setName("fighter");
        checkOut22.setAttribute("equipment");
        checkOut22.setField("actorEquipment");
        animatedElementViewer.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        animatedElementViewer.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut18.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHorizontal(false);
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut23.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final RowLayoutData element11 = new RowLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.WEST);
        checkOut25.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setAttribute("visible");
        checkOut26.setLocal(true);
        checkOut26.setName("fighter");
        checkOut26.setField("leaderShipCost");
        checkOut25.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut26.addBasicElement(element12);
        element12.onAttributesInitialized();
        final NotNullCondition element13 = new NotNullCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut26.onChildrenAdded();
        final DecoratorAppearance appearance8 = checkOut25.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut25.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut27 = Margin.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setInsets(new Insets(3, 0, 3, 0));
        appearance8.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        appearance8.onChildrenAdded();
        final StaticLayout element14 = new StaticLayout();
        element14.onCheckOut();
        element14.setAdaptToContentSize(true);
        checkOut25.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(canBeCapturedPopup)");
        checkOut28.setOnPopupDisplay(onPopupDisplay);
        checkOut28.setStyle("caracs");
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut28.setOnPopupHide(onPopupHide);
        checkOut28.setPrefSize(new Dimension(20, 20));
        checkOut25.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setAttribute("visible");
        checkOut29.setLocal(true);
        checkOut29.setName("fighter");
        checkOut29.setField("leaderShipCost");
        checkOut28.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        checkOut29.addBasicElement(element15);
        element15.onAttributesInitialized();
        final NotCondition element16 = new NotCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final EqualCondition element17 = new EqualCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setValue("-1");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut29.onChildrenAdded();
        final String id6 = "canBeCapturedPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_EAST);
        popupElement2.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut28.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setPrefSize(new Dimension(10, 0));
        checkOut30.setStyle("popup");
        popupElement2.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final RowLayout checkOut31 = RowLayout.checkOut();
        checkOut31.setHorizontal(false);
        checkOut31.setAlign(Alignment9.NORTH);
        checkOut30.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setMinWidth(250);
        element18.setStyle("white11");
        element18.setText("%canBeCaptured%".replace("%canBeCaptured%", Xulor.getInstance().getTranslatedString("canBeCaptured")));
        checkOut30.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element18.getAppearance();
        appearance9.setElementMap(elementMap);
        element18.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut32 = ColorElement.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setName("text");
        checkOut32.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance9.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        appearance9.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut30.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(100.0f, 100.0f));
        checkOut28.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("IconLeadership");
        element20.setPrefSize(new Dimension(30, 0));
        checkOut28.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final Container checkOut33 = Container.checkOut();
        checkOut33.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(cantBeCapturedPopup)");
        checkOut33.setOnPopupDisplay(onPopupDisplay2);
        checkOut33.setNonBlocking(false);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut33.setOnPopupHide(onPopupHide2);
        checkOut33.setPrefSize(new Dimension(20, 20));
        checkOut33.setStyle("caracs");
        checkOut25.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final String id7 = "cantBeCapturedPopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id7 != null) {
            elementMap.add(id7, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH_EAST);
        popupElement3.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut33.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        final Container checkOut34 = Container.checkOut();
        checkOut34.setElementMap(elementMap);
        checkOut34.setPrefSize(new Dimension(10, 0));
        checkOut34.setStyle("popup");
        popupElement3.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        final RowLayout checkOut35 = RowLayout.checkOut();
        checkOut35.setHorizontal(false);
        checkOut35.setAlign(Alignment9.NORTH);
        checkOut34.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        checkOut35.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setMinWidth(250);
        element21.setStyle("white11");
        element21.setText("%cantBeCaptured%".replace("%cantBeCaptured%", Xulor.getInstance().getTranslatedString("cantBeCaptured")));
        checkOut34.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element21.getAppearance();
        appearance10.setElementMap(elementMap);
        element21.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        this.method0(appearance10);
        appearance10.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut34.onChildrenAdded();
        popupElement3.onChildrenAdded();
        this.method1(checkOut33);
        this.method2(checkOut33);
        this.method3(checkOut33);
        checkOut33.onChildrenAdded();
        checkOut25.onChildrenAdded();
        this.method4(checkOut23);
        this.method5(checkOut23);
        this.method6(checkOut23);
        this.method7(checkOut23);
        this.method8(checkOut23);
        this.method9(checkOut23);
        this.method10(checkOut23);
        this.method11(checkOut23);
        checkOut23.onChildrenAdded();
        checkOut18.onChildrenAdded();
        this.method12(checkOut14);
        this.method20(checkOut14);
        this.method21(checkOut14);
        checkOut14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method23(element);
        this.method24(element);
        this.method25(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(100.0f, 100.0f));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setLocal(true);
        checkOut.setName("fighter");
        checkOut.setField("leaderShipCost");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("-1");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("IconCantBeCaptured");
        element.setPrefSize(new Dimension(30, 0));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%HPShort%".replace("%HPShort%", Xulor.getInstance().getTranslatedString("HPShort")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconHP");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/TOTAL_HP/minMax");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%MPShort%".replace("%MPShort%", Xulor.getInstance().getTranslatedString("MPShort")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconMP");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/MP/minMax");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%APShort%".replace("%APShort%", Xulor.getInstance().getTranslatedString("APShort")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconAP");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/AP/minMax");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%WPShort%".replace("%WPShort%", Xulor.getInstance().getTranslatedString("WPShort")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconWP");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/WP/minMax");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%INITShortDesc%".replace("%INITShortDesc%", Xulor.getInstance().getTranslatedString("INITShortDesc")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconINIT");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/INIT/value");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%DODGEShortDesc%".replace("%DODGEShortDesc%", Xulor.getInstance().getTranslatedString("DODGEShortDesc")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconDODGE");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/DODGE/value");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%TACKLEShortDesc%".replace("%TACKLEShortDesc%", Xulor.getInstance().getTranslatedString("TACKLEShortDesc")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconTACKLE");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/TACKLE/value");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(caracPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "caracPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.WEST);
        popupElement.setHotSpotPosition(Alignment9.EAST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%PERCEPTIONShortDesc%".replace("%PERCEPTIONShortDesc%", Xulor.getInstance().getTranslatedString("PERCEPTIONShortDesc")));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(30, 0));
        element4.setNonBlocking(true);
        element4.setStyle("iconPERCEPTION");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("defaultBold14");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setLocal(true);
        checkOut5.setName("fighter");
        checkOut5.setField("characteristics/PERCEPTION/value");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 5, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut5.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setNonBlocking(false);
        checkOut6.setExpandable(false);
        checkOut6.setPrefSize(new Dimension(225, 30));
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut6.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("caracs");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 12, 0, 0));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut7.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut9.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut9.setOnPopupHide(onPopupHide);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut9.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(10, 0));
        checkOut10.setStyle("popup");
        element5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element6.setStyle("PopupInformation");
        checkOut10.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut9.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHgap((short)3);
        checkOut12.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut9.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setLocal(true);
        checkOut13.setName("fighter");
        checkOut13.setAttribute("text");
        checkOut13.setField("characteristics/DMG_WATER_PERCENT/formattedPercentDescription");
        element9.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut14.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut14.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut14.setOnPopupHide(onPopupHide2);
        checkOut7.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut14.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setPrefSize(new Dimension(10, 0));
        checkOut15.setStyle("popup");
        element11.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element12.setStyle("PopupInformation");
        checkOut15.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setName("systemConfiguration");
        checkOut17.setAttribute("text");
        checkOut17.setField("new.hpLoss.formula");
        element12.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element13.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut17.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final DecoratorAppearance appearance4 = element12.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.EAST);
        element15.setSize(new Dimension(50.0f, 100.0f));
        checkOut14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHgap((short)3);
        checkOut18.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("iconShield");
        element16.setExpandable(false);
        element16.setNonBlocking(true);
        checkOut14.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white16");
        element17.setNonBlocking(true);
        element17.setMultiline(false);
        element17.setExpandable(false);
        checkOut14.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setLocal(true);
        checkOut19.setName("fighter");
        checkOut19.setAttribute("text");
        checkOut19.setField("characteristics/RES_WATER_PERCENT/formattedPercentDescription");
        element17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element19.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element19.setOnPopupHide(onPopupHide3);
        element19.setStyle("smallWaterElement");
        checkOut6.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PopupElement element20 = new PopupElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        element20.setHotSpotPosition(Alignment9.SOUTH);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setPrefSize(new Dimension(10, 0));
        checkOut20.setStyle("popup");
        element20.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.WEST);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setNonBlocking(true);
        element21.setStyle("PopupInformation");
        element21.setExpandable(false);
        element21.setText("%WATER%".replace("%WATER%", Xulor.getInstance().getTranslatedString("WATER")));
        checkOut20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance5 = element21.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.EAST);
        element21.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element20.onChildrenAdded();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.WEST);
        element23.setSize(new Dimension(-2, -2));
        element19.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setNonBlocking(false);
        checkOut22.setExpandable(false);
        checkOut22.setPrefSize(new Dimension(225, 30));
        checkOut3.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        checkOut22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setStyle("caracs");
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut23.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut23.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(0, 12, 0, 0));
        appearance6.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final Padding element25 = new Padding();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setInsets(new Insets(0, 15, 0, 0));
        appearance6.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        appearance6.onChildrenAdded();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(100.0f, 100.0f));
        checkOut23.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut23.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setExpandable(false);
        checkOut25.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup");
        checkOut25.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        checkOut25.setOnPopupHide(onPopupHide4);
        checkOut23.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final PopupElement element28 = new PopupElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment9.NORTH);
        element28.setHotSpotPosition(Alignment9.SOUTH);
        checkOut25.addBasicElement(element28);
        element28.onAttributesInitialized();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setPrefSize(new Dimension(10, 0));
        checkOut26.setStyle("popup");
        element28.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setAlign(Alignment9.WEST);
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final Label element29 = new Label();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setExpandable(false);
        element29.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element29.setStyle("PopupInformation");
        checkOut26.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element29.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.EAST);
        element29.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut26.onChildrenAdded();
        element28.onChildrenAdded();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment17.WEST);
        element30.setSize(new Dimension(50.0f, 100.0f));
        checkOut25.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final RowLayout checkOut28 = RowLayout.checkOut();
        checkOut28.setHgap((short)3);
        checkOut28.setAlign(Alignment9.WEST);
        checkOut25.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final Image element31 = new Image();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("smallSword2");
        element31.setExpandable(false);
        element31.setNonBlocking(true);
        checkOut25.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        this.method13(checkOut25);
        checkOut25.onChildrenAdded();
        this.method14(checkOut23);
        checkOut23.onChildrenAdded();
        this.method15(checkOut22);
        checkOut22.onChildrenAdded();
        this.method16(checkOut3);
        this.method17(checkOut3);
        this.method18(checkOut3);
        this.method19(checkOut3);
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white16");
        element.setNonBlocking(true);
        element.setMultiline(false);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("fighter");
        checkOut.setAttribute("text");
        checkOut.setField("characteristics/DMG_EARTH_PERCENT/formattedPercentDescription");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PopupElement element = new PopupElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.NORTH);
        element.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setExpandable(false);
        element2.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element2.setStyle("PopupInformation");
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("systemConfiguration");
        checkOut4.setAttribute("text");
        checkOut4.setField("new.hpLoss.formula");
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element3.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.EAST);
        element5.setSize(new Dimension(50.0f, 100.0f));
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHgap((short)3);
        checkOut5.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("iconShield");
        element6.setExpandable(false);
        element6.setNonBlocking(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("white16");
        element7.setNonBlocking(true);
        element7.setMultiline(false);
        element7.setExpandable(false);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("fighter");
        checkOut6.setAttribute("text");
        checkOut6.setField("characteristics/RES_EARTH_PERCENT/formattedPercentDescription");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        element.setStyle("smallEarthElement");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PopupElement element2 = new PopupElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element2.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        element2.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setNonBlocking(true);
        element3.setStyle("PopupInformation");
        element3.setExpandable(false);
        element3.setText("%EARTH%".replace("%EARTH%", Xulor.getInstance().getTranslatedString("EARTH")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.WEST);
        element5.setSize(new Dimension(-2, -2));
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(225, 30));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("caracs");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 12, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut4.setOnPopupHide(onPopupHide);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element6.setStyle("PopupInformation");
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHgap((short)3);
        checkOut7.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setName("fighter");
        checkOut8.setAttribute("text");
        checkOut8.setField("characteristics/DMG_AIR_PERCENT/formattedPercentDescription");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut9.setOnPopupHide(onPopupHide2);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(10, 0));
        checkOut10.setStyle("popup");
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element12.setStyle("PopupInformation");
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("systemConfiguration");
        checkOut12.setAttribute("text");
        checkOut12.setField("new.hpLoss.formula");
        element12.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element13.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.EAST);
        element15.setSize(new Dimension(50.0f, 100.0f));
        checkOut9.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHgap((short)3);
        checkOut13.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("iconShield");
        element16.setExpandable(false);
        element16.setNonBlocking(true);
        checkOut9.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white16");
        element17.setNonBlocking(true);
        element17.setMultiline(false);
        element17.setExpandable(false);
        checkOut9.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setLocal(true);
        checkOut14.setName("fighter");
        checkOut14.setAttribute("text");
        checkOut14.setField("characteristics/RES_AIR_PERCENT/formattedPercentDescription");
        element17.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element19.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element19.setOnPopupHide(onPopupHide3);
        element19.setStyle("smallAirElement");
        checkOut.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PopupElement element20 = new PopupElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        element20.setHotSpotPosition(Alignment9.SOUTH);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setPrefSize(new Dimension(10, 0));
        checkOut15.setStyle("popup");
        element20.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setNonBlocking(true);
        element21.setStyle("PopupInformation");
        element21.setExpandable(false);
        element21.setText("%AIR%".replace("%AIR%", Xulor.getInstance().getTranslatedString("AIR")));
        checkOut15.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance4 = element21.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element20.onChildrenAdded();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.WEST);
        element23.setSize(new Dimension(-2, -2));
        element19.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(225, 30));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("caracs");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 12, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut4.setOnPopupHide(onPopupHide);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element6.setStyle("PopupInformation");
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHgap((short)3);
        checkOut7.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setName("fighter");
        checkOut8.setAttribute("text");
        checkOut8.setField("characteristics/DMG_FIRE_PERCENT/formattedPercentDescription");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut9.setOnPopupHide(onPopupHide2);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(10, 0));
        checkOut10.setStyle("popup");
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element12.setStyle("PopupInformation");
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("systemConfiguration");
        checkOut12.setAttribute("text");
        checkOut12.setField("new.hpLoss.formula");
        element12.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element13.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.EAST);
        element15.setSize(new Dimension(50.0f, 100.0f));
        checkOut9.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHgap((short)3);
        checkOut13.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("iconShield");
        element16.setExpandable(false);
        element16.setNonBlocking(true);
        checkOut9.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white16");
        element17.setNonBlocking(true);
        element17.setMultiline(false);
        element17.setExpandable(false);
        checkOut9.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setLocal(true);
        checkOut14.setName("fighter");
        checkOut14.setAttribute("text");
        checkOut14.setField("characteristics/RES_FIRE_PERCENT/formattedPercentDescription");
        element17.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element19.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element19.setOnPopupHide(onPopupHide3);
        element19.setStyle("smallFireElement");
        checkOut.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PopupElement element20 = new PopupElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        element20.setHotSpotPosition(Alignment9.SOUTH);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setPrefSize(new Dimension(10, 0));
        checkOut15.setStyle("popup");
        element20.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setNonBlocking(true);
        element21.setStyle("PopupInformation");
        element21.setExpandable(false);
        element21.setText("%FIRE%".replace("%FIRE%", Xulor.getInstance().getTranslatedString("FIRE")));
        checkOut15.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance4 = element21.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element20.onChildrenAdded();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.WEST);
        element23.setSize(new Dimension(-2, -2));
        element19.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(225, 30));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("caracs");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 12, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut4.setOnPopupHide(onPopupHide);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setStyle("PopupInformation");
        element6.setText("%debuff.bonus.ap%".replace("%debuff.bonus.ap%", Xulor.getInstance().getTranslatedString("debuff.bonus.ap")));
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHgap((short)3);
        checkOut7.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setName("fighter");
        checkOut8.setAttribute("text");
        checkOut8.setField("characteristics/AP_DEBUFF_POWER/formattedPercentDescription");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut9.setOnPopupHide(onPopupHide2);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(10, 0));
        checkOut10.setStyle("popup");
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setStyle("PopupInformation");
        element12.setText("%resist.bonus.ap%".replace("%resist.bonus.ap%", Xulor.getInstance().getTranslatedString("resist.bonus.ap")));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.EAST);
        element13.setSize(new Dimension(50.0f, 100.0f));
        checkOut9.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHgap((short)3);
        checkOut12.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("iconShield");
        element14.setExpandable(false);
        element14.setNonBlocking(true);
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("white16");
        element15.setNonBlocking(true);
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut9.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setLocal(true);
        checkOut13.setName("fighter");
        checkOut13.setAttribute("text");
        checkOut13.setField("characteristics/AP_DEBUFF_RES/formattedPercentDescription");
        element15.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Image element17 = new Image();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element17.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element17.setOnPopupHide(onPopupHide3);
        element17.setStyle("smallApBuff");
        checkOut.addBasicElement(element17);
        element17.onAttributesInitialized();
        final PopupElement element18 = new PopupElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.NORTH);
        element18.setHotSpotPosition(Alignment9.SOUTH);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        element18.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(true);
        element19.setStyle("PopupInformation");
        element19.setExpandable(false);
        element19.setText("%APShort%".replace("%APShort%", Xulor.getInstance().getTranslatedString("APShort")));
        checkOut14.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element18.onChildrenAdded();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment17.WEST);
        element21.setSize(new Dimension(-2, -2));
        element17.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element17.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setLocal(true);
        checkOut16.setName("fighter");
        checkOut16.setAttribute("visible");
        checkOut16.setField("debuffApVisible");
        checkOut.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(225, 30));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("caracs");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 12, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut4.setOnPopupHide(onPopupHide);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setStyle("PopupInformation");
        element6.setText("%debuff.bonus.mp%".replace("%debuff.bonus.mp%", Xulor.getInstance().getTranslatedString("debuff.bonus.mp")));
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHgap((short)3);
        checkOut7.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setName("fighter");
        checkOut8.setAttribute("text");
        checkOut8.setField("characteristics/MP_DEBUFF_POWER/formattedPercentDescription");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut9.setOnPopupHide(onPopupHide2);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(10, 0));
        checkOut10.setStyle("popup");
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setStyle("PopupInformation");
        element12.setText("%resist.bonus.mp%".replace("%resist.bonus.mp%", Xulor.getInstance().getTranslatedString("resist.bonus.mp")));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.EAST);
        element13.setSize(new Dimension(50.0f, 100.0f));
        checkOut9.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHgap((short)3);
        checkOut12.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("iconShield");
        element14.setExpandable(false);
        element14.setNonBlocking(true);
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("white16");
        element15.setNonBlocking(true);
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut9.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setLocal(true);
        checkOut13.setName("fighter");
        checkOut13.setAttribute("text");
        checkOut13.setField("characteristics/MP_DEBUFF_RES/formattedPercentDescription");
        element15.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Image element17 = new Image();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element17.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element17.setOnPopupHide(onPopupHide3);
        element17.setStyle("smallMpBuff");
        checkOut.addBasicElement(element17);
        element17.onAttributesInitialized();
        final PopupElement element18 = new PopupElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.NORTH);
        element18.setHotSpotPosition(Alignment9.SOUTH);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        element18.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(true);
        element19.setStyle("PopupInformation");
        element19.setExpandable(false);
        element19.setText("%MPShort%".replace("%MPShort%", Xulor.getInstance().getTranslatedString("MPShort")));
        checkOut14.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element18.onChildrenAdded();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment17.WEST);
        element21.setSize(new Dimension(-2, -2));
        element17.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element17.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setLocal(true);
        checkOut16.setName("fighter");
        checkOut16.setAttribute("visible");
        checkOut16.setField("debuffMpVisible");
        checkOut.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(100.0f, 32));
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(1);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("content");
        checkOut.setLocal(true);
        checkOut.setName("fighter");
        checkOut.setField("stateAffinities/resistanceBonuses");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "stateResistContainer";
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut2);
        }
        checkOut2.setStyle("caracsBackground");
        checkOut2.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(resistPopup,stateResistContainer)");
        checkOut2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut2.setOnPopupHide(onPopupHide);
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Border element6 = new Border();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(7, 4, 7, 5));
        appearance.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setExpandable(false);
        element7.setDisplaySize(new Dimension(24, 24));
        element7.setNonBlocking(true);
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PixmapElement checkOut4 = PixmapElement.checkOut();
        checkOut4.setElementMap(elementMap);
        element7.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("texture");
        element8.setField("state/iconUrl");
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element7.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("bold");
        element9.setNonBlocking(true);
        checkOut2.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("state/name");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("bold");
        element11.setExpandable(false);
        element11.setNonBlocking(true);
        checkOut2.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element11.getAppearance();
        appearance3.setElementMap(elementMap);
        element11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 3));
        appearance3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("text");
        element12.setField("value");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "stateContainer";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final String id2 = "statePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setPrefSize(new Dimension(150, 0));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(3, 3, 3, 3));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setScaled(true);
        element3.setDisplaySize(new Dimension(48, 48));
        element3.setNonBlocking(true);
        checkOut6.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.NORTH);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedRunningEffect");
        checkOut8.setLocal(true);
        checkOut8.setField("iconUrl");
        checkOut8.setAttribute("texture");
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut9.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 3, 0, 0));
        appearance2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.NORTH);
        checkOut11.setHorizontal(false);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setStyle("smallDarkBackground");
        checkOut12.setPrefSize(new Dimension(0, 20));
        checkOut12.setExpandable(false);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut12.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(2, 0, 2, 0));
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("whiteBold11");
        element5.setNonBlocking(true);
        checkOut12.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element5.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 5, 0, 5));
        appearance4.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("describedRunningEffect");
        checkOut15.setLocal(true);
        checkOut15.setAttribute("text");
        checkOut15.setField("nameAndLevel");
        element5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setExpandable(false);
        checkOut16.setPrefSize(new Dimension(0, 20));
        checkOut16.setStyle("smallDarkBackground");
        checkOut9.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut16.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(2, 0, 2, 0));
        appearance5.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(0, 5, 0, 5));
        appearance5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("describedRunningEffect");
        checkOut19.setLocal(true);
        checkOut19.setAttribute("visible");
        checkOut19.setField("remainingDurationText");
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        checkOut19.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setStyle("whiteBold");
        element9.setText("%duration% ".replace("%duration%", Xulor.getInstance().getTranslatedString("duration")));
        element9.setNonBlocking(true);
        checkOut16.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("white");
        element10.setNonBlocking(true);
        checkOut16.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element10.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element10.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("describedRunningEffect");
        checkOut20.setLocal(true);
        checkOut20.setAttribute("text");
        checkOut20.setField("remainingDurationText");
        element10.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("describedRunningEffect");
        checkOut21.setLocal(true);
        checkOut21.setAttribute("visible");
        checkOut21.setField("remainingDurationText");
        element10.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut21.addBasicElement(element11);
        element11.onAttributesInitialized();
        final NotNullCondition element12 = new NotNullCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut16.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setStyle("smallDarkBackground");
        checkOut22.setPrefSize(new Dimension(0, 20));
        checkOut22.setExpandable(false);
        checkOut4.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("isInFight");
        checkOut23.setAttribute("visible");
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        checkOut23.addBasicElement(element13);
        element13.onAttributesInitialized();
        final AndCondition element14 = new AndCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final FalseCondition element15 = new FalseCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final TrueCondition element16 = new TrueCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element14.addBasicElement(element16);
        element16.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("describedRunningEffect");
        checkOut24.setLocal(true);
        checkOut24.setAttribute("comparedValue");
        checkOut24.setField("description");
        element16.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        checkOut24.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut24.onChildrenAdded();
        element16.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut22.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(2, 0, 2, 0));
        appearance7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final Padding element19 = new Padding();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setInsets(new Insets(5, 5, 5, 5));
        appearance7.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        appearance7.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("narrow12");
        element20.setNonBlocking(true);
        element20.setMinWidth(1);
        element20.setMaxWidth(230);
        checkOut22.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element20.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element20.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut26 = ColorElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance8.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setName("describedRunningEffect");
        checkOut27.setLocal(true);
        checkOut27.setAttribute("text");
        checkOut27.setField("description");
        element20.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setExpandable(false);
        checkOut28.setStyle("smallDarkBackground");
        checkOut4.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setName("describedRunningEffect");
        checkOut29.setLocal(true);
        checkOut29.setAttribute("visible");
        checkOut29.setField("effects");
        checkOut28.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        checkOut29.addBasicElement(element21);
        element21.onAttributesInitialized();
        final NotNullCondition element22 = new NotNullCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut29.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut28.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut28.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setInsets(new Insets(2, 0, 2, 0));
        appearance9.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(5, 5, 5, 5));
        appearance9.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance9.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("white11");
        element24.setMinWidth(1);
        element24.setMaxWidth(230);
        element24.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element24.setOnClick(onClick);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element24.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element24.setOnMouseExit(onMouseExit);
        checkOut28.addBasicElement(element24);
        element24.onAttributesInitialized();
        final PropertyElement checkOut31 = PropertyElement.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setName("describedRunningEffect");
        checkOut31.setLocal(true);
        checkOut31.setAttribute("text");
        checkOut31.setField("effects");
        element24.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final DecoratorAppearance appearance10 = element24.getAppearance();
        appearance10.setElementMap(elementMap);
        element24.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut32 = Margin.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setInsets(new Insets(0, 0, 0, 0));
        appearance10.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        appearance10.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut28.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut33 = PropertyElement.checkOut();
        checkOut33.setElementMap(elementMap);
        checkOut33.setAttribute("visible");
        checkOut33.setLocal(true);
        checkOut33.setName("fighter");
        checkOut33.setField("states");
        checkOut.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        checkOut33.addBasicElement(element25);
        element25.onAttributesInitialized();
        final NotNullCondition element26 = new NotNullCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut33.onChildrenAdded();
        this.method22(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(38, 50));
        element.setExpandable(false);
        element.setHorizontal(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(6);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.controlCenter:openRunningEffectDescription");
        element.setOnItemClick(onItemClick);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(statePopup)");
        element.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("wakfu.popupInfos:closePopup");
        element.setOnItemOut(onItemOut);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element2.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("white2");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(3, 3, 3, 3));
        appearance.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setScaled(true);
        element8.setDisplaySize(new Dimension(32, 32));
        checkOut3.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setSize(new Dimension(100.0f, 100.0f));
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PixmapElement checkOut4 = PixmapElement.checkOut();
        checkOut4.setElementMap(elementMap);
        element8.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setField("iconUrl");
        element10.setAttribute("texture");
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("backgroundPopupLight");
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("visible");
        element11.setField("stackSize");
        checkOut5.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final GreaterCondition element13 = new GreaterCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("1");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element14 = new Padding();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setInsets(new Insets(2, 2, 2, 2));
        appearance2.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH_EAST);
        element15.setSize(new Dimension(-2, -2));
        element15.setXOffset(3);
        element15.setYOffset(-3);
        checkOut5.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final Label element16 = new Label();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("White10Bordered");
        element16.setExpandable(false);
        element16.setMaxWidth(30);
        element16.setEnableAutoZoomShrink(true);
        checkOut5.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element16.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element16.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("stackSize");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setNonBlocking(true);
        checkOut.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("text");
        element19.setField("plainRemainingDuration");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut.onChildrenAdded();
        element2.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("fighter");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("content");
        checkOut6.setField("allStates");
        element.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setInitValue(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
