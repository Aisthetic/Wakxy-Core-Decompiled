package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.property.*;
import java.awt.*;
import com.ankamagames.xulor2.core.form.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.appearance.*;

public class ConsoleDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public ConsoleDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "consoleDialog";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setNonBlocking(true);
        element.setSize(new Dimension(300, 300));
        element.setX(100);
        element.setY(100);
        element.setPrefSize(new Dimension(100, 100));
        element.setStyle("console");
        element.onAttributesInitialized();
        final BorderLayout element2 = new BorderLayout();
        element2.onCheckOut();
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element2.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final BorderLayout element3 = new BorderLayout();
        element3.onCheckOut();
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final WindowMovePoint element4 = new WindowMovePoint();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setThemeElementName("titleBar");
        element4.setThemeElementParentType("window");
        final MouseDoubleClickedListener onDoubleClick = new MouseDoubleClickedListener();
        onDoubleClick.setCallBackFunc("xulor:toggleVisible(windowContentContainer)");
        element4.setOnDoubleClick(onDoubleClick);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.WEST);
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final Button element5 = new Button();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("smallDelete");
        element5.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element5.setOnClick(onClick);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setThemeElementName("label");
        element6.setThemeElementParentType("window");
        element6.setOrientation(Orientation.NORTH);
        element6.setNonBlocking(true);
        element6.setText("%dialog.console.title%".replace("%dialog.console.title%", Xulor.getInstance().getTranslatedString("dialog.console.title")));
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element4.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut5);
        }
        checkOut5.setThemeElementName("content");
        checkOut5.setThemeElementParentType("window");
        element3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final BorderLayoutData checkOut6 = BorderLayoutData.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setData(BorderLayoutData.Values.CENTER);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        element7.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.CENTER);
        element8.setSize(new Dimension(100.0f, 100.0f));
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final BorderLayout element9 = new BorderLayout();
        element9.onCheckOut();
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ScrollContainer element10 = new ScrollContainer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final BorderLayoutData checkOut8 = BorderLayoutData.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setData(BorderLayoutData.Values.CENTER);
        element10.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSelectable(true);
        element11.setEnableShrinking(false);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("debug.console");
        checkOut9.setField("logs");
        checkOut9.setAttribute("text");
        element11.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final DecoratorAppearance appearance = element11.getAppearance();
        appearance.setElementMap(elementMap);
        element11.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element12 = new Padding();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setStyle("ConsoleInput");
        element9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final BorderLayoutData checkOut11 = BorderLayoutData.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setData(BorderLayoutData.Values.SOUTH);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final BorderLayout element13 = new BorderLayout();
        element13.onCheckOut();
        checkOut10.addBasicElement(element13);
        element13.onAttributesInitialized();
        final String id3 = "consoleForm";
        final Form element14 = new Form();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, element14);
        }
        this.env.openForm(((elementMap != null) ? elementMap.getId() : "") + ".consoleForm", element14);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final BorderLayoutData checkOut12 = BorderLayoutData.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setData(BorderLayoutData.Values.WEST);
        element15.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance2 = element15.getAppearance();
        appearance2.setElementMap(elementMap);
        element15.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 2, 0, 2));
        appearance2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("debug.console");
        checkOut14.setField("prompt");
        checkOut14.setAttribute("text");
        element15.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element15.onChildrenAdded();
        final TextEditor element16 = new TextEditor();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAutoHorizontalScrolled(true);
        final KeyPressedListener onKeyPress = new KeyPressedListener();
        onKeyPress.setCallBackFunc("console:processInputKeyEvent(consoleForm)");
        element16.setOnKeyPress(onKeyPress);
        element16.setFocused(true);
        element16.setStyle("dark");
        element14.addBasicElement(element16);
        element16.onAttributesInitialized();
        final BorderLayoutData checkOut15 = BorderLayoutData.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setData(BorderLayoutData.Values.CENTER);
        element16.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("debug.console");
        checkOut16.setField("input");
        checkOut16.setAttribute("text");
        element16.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element16.onChildrenAdded();
        final Button element17 = new Button();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("small");
        element17.setText("%clear%".replace("%clear%", Xulor.getInstance().getTranslatedString("clear")));
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("console:clear()");
        element17.setOnClick(onClick2);
        element14.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element17.getAppearance();
        appearance3.setElementMap(elementMap);
        element17.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 0, 0, 20));
        appearance3.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance3.onChildrenAdded();
        final BorderLayoutData checkOut18 = BorderLayoutData.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setData(BorderLayoutData.Values.EAST);
        element17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        element17.onChildrenAdded();
        element14.onChildrenAdded();
        this.env.closeForm(((elementMap != null) ? elementMap.getId() : "") + ".consoleForm");
        element13.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final WindowResizePoint element18 = new WindowResizePoint();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setPointAlign(Alignment9.SOUTH_EAST);
        element7.addBasicElement(element18);
        element18.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.SOUTH_EAST);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final StaticLayout element20 = new StaticLayout();
        element20.onCheckOut();
        element20.setAdaptToContentSize(true);
        element18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final Button element21 = new Button();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("Yellow");
        element21.setExpandable(false);
        element21.setNonBlocking(true);
        element18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.CENTER);
        element22.setSize(new Dimension(100.0f, 100.0f));
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance4 = element21.getAppearance();
        appearance4.setElementMap(elementMap);
        element21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(2, 2, 2, 3));
        appearance4.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance4.onChildrenAdded();
        element21.onChildrenAdded();
        final Image element24 = new Image();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("multidirectionnalCross");
        element24.setNonBlocking(true);
        element18.addBasicElement(element24);
        element24.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment17.CENTER);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element18.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(600, 300));
        element26.setInitValue(true);
        element.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
