package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import java.awt.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;

public class BuildingEvolutionDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public BuildingEvolutionDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("popup");
        checkOut2.setPrefSize(new Dimension(240, 0));
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.NORTH);
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setAlign(Alignment9.WEST);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("DefaultBold14White");
        element3.setExpandable(false);
        element3.setMinWidth(1);
        element3.setMaxWidth(230);
        checkOut8.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH_WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("buildingEvolution");
        checkOut11.setAttribute("text");
        checkOut11.setField("baseBuilding/name");
        element3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut6.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(128, 128));
        element5.setKeepAspectRatio(true);
        element5.setExpandable(false);
        checkOut12.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PixmapElement checkOut13 = PixmapElement.checkOut();
        checkOut13.setElementMap(elementMap);
        element5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("buildingEvolution");
        checkOut14.setAttribute("texture");
        checkOut14.setField("baseBuilding/iconUrl");
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut12.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut2.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("buildingEvolution");
        checkOut16.setAttribute("visible");
        checkOut16.setField("baseBuilding/effects");
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut16.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        checkOut17.setAlign(Alignment9.NORTH);
        checkOut15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setExpandable(false);
        checkOut18.setStyle("lineSeparator2");
        checkOut18.setPrefSize(new Dimension(50, 1));
        checkOut15.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut18.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(5, 20, 5, 20));
        appearance2.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance2.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setText("%effects%".replace("%effects%", Xulor.getInstance().getTranslatedString("effects")));
        element8.setStyle("11BoldLight");
        checkOut15.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 5, 5, 0));
        appearance3.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance3.onChildrenAdded();
        element8.onChildrenAdded();
        final StackList element9 = new StackList();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setHorizontal(false);
        checkOut15.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.WEST);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("buildingEvolution");
        checkOut21.setAttribute("content");
        checkOut21.setField("baseBuilding/effects");
        element9.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemCondition element13 = new ItemCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        element11.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("white11");
        element15.setMultiline(false);
        element15.setMinWidth(250);
        element15.setMaxWidth(250);
        element15.setExpandable(false);
        checkOut22.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element15.getAppearance();
        appearance4.setElementMap(elementMap);
        element15.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 5, 0, 0));
        appearance4.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut22.onChildrenAdded();
        element11.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setExpandable(false);
        checkOut2.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("visible");
        checkOut25.setName("buildingEvolution");
        checkOut25.setField("baseBuilding/conditions");
        checkOut24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        checkOut25.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut25.onChildrenAdded();
        final RowLayout checkOut26 = RowLayout.checkOut();
        checkOut26.setHorizontal(false);
        checkOut26.setAlign(Alignment9.NORTH);
        checkOut24.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setExpandable(false);
        checkOut27.setStyle("lineSeparator2");
        checkOut27.setPrefSize(new Dimension(50, 1));
        checkOut24.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut27.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut27.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut28 = Margin.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setInsets(new Insets(5, 20, 5, 20));
        appearance5.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut27.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setExpandable(false);
        element19.setText("%requirements%".replace("%requirements%", Xulor.getInstance().getTranslatedString("requirements")));
        element19.setStyle("11BoldLight");
        checkOut24.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element19.getAppearance();
        appearance6.setElementMap(elementMap);
        element19.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut29 = Margin.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setInsets(new Insets(0, 5, 5, 0));
        appearance6.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        appearance6.onChildrenAdded();
        element19.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("white11");
        element20.setMinWidth(1);
        element20.setMaxWidth(225);
        element20.setExpandable(false);
        checkOut24.addBasicElement(element20);
        element20.onAttributesInitialized();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.WEST);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance7 = element20.getAppearance();
        appearance7.setElementMap(elementMap);
        element20.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setInsets(new Insets(0, 10, 5, 0));
        appearance7.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut31 = PropertyElement.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setName("buildingEvolution");
        checkOut31.setAttribute("text");
        checkOut31.setField("baseBuilding/conditions");
        element20.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut24.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("RightArrow");
        element22.setExpandable(false);
        checkOut.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final Container checkOut32 = Container.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setStyle("popup");
        checkOut32.setPrefSize(new Dimension(240, 0));
        checkOut.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        checkOut32.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final RowLayout checkOut33 = RowLayout.checkOut();
        checkOut33.setHorizontal(false);
        checkOut33.setAlign(Alignment9.NORTH);
        checkOut32.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        checkOut33.onChildrenAdded();
        final Container checkOut34 = Container.checkOut();
        checkOut34.setElementMap(elementMap);
        checkOut34.setExpandable(false);
        checkOut32.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        final RowLayout checkOut35 = RowLayout.checkOut();
        checkOut35.setHorizontal(false);
        checkOut34.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        checkOut35.onChildrenAdded();
        final Container checkOut36 = Container.checkOut();
        checkOut36.setElementMap(elementMap);
        checkOut34.addBasicElement(checkOut36);
        checkOut36.onAttributesInitialized();
        final RowLayout checkOut37 = RowLayout.checkOut();
        checkOut37.setAlign(Alignment9.NORTH);
        checkOut37.setHorizontal(false);
        checkOut36.addBasicElement(checkOut37);
        checkOut37.onAttributesInitialized();
        checkOut37.onChildrenAdded();
        final Container checkOut38 = Container.checkOut();
        checkOut38.setElementMap(elementMap);
        checkOut38.setExpandable(false);
        checkOut36.addBasicElement(checkOut38);
        checkOut38.onAttributesInitialized();
        final RowLayout checkOut39 = RowLayout.checkOut();
        checkOut39.setAlign(Alignment9.WEST);
        checkOut38.addBasicElement(checkOut39);
        checkOut39.onAttributesInitialized();
        checkOut39.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("DefaultBold14White");
        element24.setExpandable(false);
        element24.setMinWidth(1);
        element24.setMaxWidth(230);
        checkOut38.addBasicElement(element24);
        element24.onAttributesInitialized();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final DecoratorAppearance appearance8 = element24.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.NORTH_WEST);
        element24.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut40 = Margin.checkOut();
        checkOut40.setElementMap(elementMap);
        checkOut40.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut40);
        checkOut40.onAttributesInitialized();
        checkOut40.onChildrenAdded();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut41 = PropertyElement.checkOut();
        checkOut41.setElementMap(elementMap);
        checkOut41.setName("buildingEvolution");
        checkOut41.setAttribute("text");
        checkOut41.setField("evolvedBuilding/name");
        element24.addBasicElement(checkOut41);
        checkOut41.onAttributesInitialized();
        checkOut41.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut38.onChildrenAdded();
        final Container checkOut42 = Container.checkOut();
        checkOut42.setElementMap(elementMap);
        checkOut42.setExpandable(false);
        checkOut36.addBasicElement(checkOut42);
        checkOut42.onAttributesInitialized();
        this.method0(checkOut42);
        this.method1(checkOut42);
        this.method2(checkOut42);
        this.method3(checkOut42);
        checkOut42.onChildrenAdded();
        checkOut36.onChildrenAdded();
        checkOut34.onChildrenAdded();
        this.method4(checkOut32);
        this.method5(checkOut32);
        this.method6(checkOut32);
        checkOut32.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setAlign(Alignment9.WEST);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(128, 128));
        element.setKeepAspectRatio(true);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("buildingEvolution");
        checkOut2.setAttribute("texture");
        checkOut2.setField("evolvedBuilding/iconUrl");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 3, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 2, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHgap((short)2);
        checkOut6.setAlign(Alignment9.EAST);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteBold");
        element.setExpandable(false);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("buildingEvolution");
        checkOut7.setAttribute("text");
        checkOut7.setField("evolvedBuilding/kamasCost");
        element.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("KamaIcon");
        element3.setExpandable(false);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHgap((short)2);
        checkOut9.setAlign(Alignment9.EAST);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("buildingEvolution");
        checkOut10.setAttribute("visible");
        checkOut10.setField("evolvedBuilding/ressourcesCost");
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut10.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final TextView element6 = new TextView();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("whiteBold");
        element6.setExpandable(false);
        checkOut8.addBasicElement(element6);
        element6.onAttributesInitialized();
        final RowLayoutData element7 = new RowLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.CENTER);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("buildingEvolution");
        checkOut11.setAttribute("text");
        checkOut11.setField("evolvedBuilding/ressourcesCost");
        element6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element6.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("HavenWorldResourcesPoints");
        element8.setExpandable(false);
        checkOut8.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHgap((short)2);
        checkOut13.setAlign(Alignment9.EAST);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("buildingEvolution");
        checkOut14.setAttribute("visible");
        checkOut14.setField("evolvedBuilding/sidoaNeed");
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut14.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("whiteBold");
        element11.setExpandable(false);
        checkOut12.addBasicElement(element11);
        element11.onAttributesInitialized();
        final RowLayoutData element12 = new RowLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment9.CENTER);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("buildingEvolution");
        checkOut15.setAttribute("text");
        checkOut15.setField("evolvedBuilding/sidoaNeed");
        element11.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element11.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("Sidoa");
        element13.setExpandable(false);
        checkOut12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setExpandable(false);
        checkOut16.setVisible(false);
        checkOut.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setName("buildingEvolution");
        checkOut17.setAttribute("visible");
        checkOut17.setField("evolvedBuilding/buildDelay");
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        checkOut17.addBasicElement(element14);
        element14.onAttributesInitialized();
        final NotNullCondition element15 = new NotNullCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.EAST);
        checkOut16.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHgap((short)2);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Label element17 = new Label();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("11Light");
        element17.setExpandable(false);
        checkOut16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("buildingEvolution");
        checkOut19.setAttribute("text");
        checkOut19.setField("evolvedBuilding/buildDelay");
        element17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element17.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("SmallTimer");
        element18.setExpandable(false);
        checkOut16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("buildingEvolution");
        checkOut21.setAttribute("visible");
        checkOut21.setField("evolvedBuilding/surface");
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        checkOut21.addBasicElement(element19);
        element19.onAttributesInitialized();
        final NotNullCondition element20 = new NotNullCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.EAST);
        checkOut20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHgap((short)2);
        checkOut20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("11Light");
        checkOut20.addBasicElement(element22);
        element22.onAttributesInitialized();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("buildingEvolution");
        checkOut23.setAttribute("text");
        checkOut23.setField("evolvedBuilding/surface");
        element22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        element22.onChildrenAdded();
        final Image element23 = new Image();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("IconSurface");
        element23.setExpandable(false);
        checkOut20.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        checkOut20.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("buildingEvolution");
        checkOut2.setAttribute("visible");
        checkOut2.setField("evolvedBuilding/effects");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setText("%effects%".replace("%effects%", Xulor.getInstance().getTranslatedString("effects")));
        element3.setStyle("11BoldLight");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 5, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final StackList element4 = new StackList();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setHorizontal(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.WEST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("buildingEvolution");
        checkOut7.setAttribute("content");
        checkOut7.setField("evolvedBuilding/effects");
        element4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final ItemRenderer element6 = new ItemRenderer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ItemCondition element8 = new ItemCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final NotNullCondition element9 = new NotNullCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        element6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("white11");
        element10.setMultiline(false);
        element10.setMinWidth(250);
        element10.setMaxWidth(250);
        element10.setExpandable(false);
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element10.getAppearance();
        appearance3.setElementMap(elementMap);
        element10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("text");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("buildingEvolution");
        checkOut2.setField("evolvedBuilding/conditions");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setText("%requirements%".replace("%requirements%", Xulor.getInstance().getTranslatedString("requirements")));
        element3.setStyle("11BoldLight");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 5, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("white11");
        element4.setMinWidth(1);
        element4.setMaxWidth(225);
        element4.setExpandable(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.WEST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance3 = element4.getAppearance();
        appearance3.setElementMap(elementMap);
        element4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 5, 0));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("buildingEvolution");
        checkOut8.setAttribute("text");
        checkOut8.setField("evolvedBuilding/conditions");
        element4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut3.setStyle("lineSeparator2");
        checkOut3.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        checkOut5.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Button element2 = new Button();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setText("%cancel%".replace("%cancel%", Xulor.getInstance().getTranslatedString("cancel")));
        element2.setStyle("yellow");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element2.setOnClick(onClick);
        element2.setExpandable(false);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Button element4 = new Button();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setText("%buy%".replace("%buy%", Xulor.getInstance().getTranslatedString("buy")));
        element4.setStyle("yellow");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.havenWorld:payEvolution");
        element4.setOnClick(onClick2);
        element4.setExpandable(false);
        checkOut5.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("buildingEvolution");
        checkOut6.setAttribute("enabled");
        checkOut6.setField("canPay");
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
