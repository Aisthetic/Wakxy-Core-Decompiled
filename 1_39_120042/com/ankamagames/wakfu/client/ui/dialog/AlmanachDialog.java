package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class AlmanachDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public AlmanachDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "mainContainer";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        checkOut.setNonBlocking(false);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.SOUTH);
        element.setYOffset(50);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("DialogBackground");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.SOUTH_WEST);
        element4.setSize(new Dimension(-2, -2));
        element4.setYOffset(0);
        element4.setXOffset(-30);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(82, 0, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(399, -2));
        element5.setAlign(Alignment17.SOUTH_EAST);
        element5.setXOffset(-101);
        element5.setYOffset(82);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut5.setAlign(Alignment9.NORTH);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("DialogTop");
        element8.setExpandable(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.EAST);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 1, 0, 0));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("tiledScroll2");
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(100.0f, 100.0f));
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut8.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element11 = new Padding();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setInsets(new Insets(0, 33, 0, 33));
        appearance4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(30, 0, 0, 0));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setStyle("EncyclopediaSplashTitle");
        checkOut11.setPrefSize(new Dimension(0, 30));
        checkOut11.setExpandable(false);
        checkOut8.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut11.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element12 = new Padding();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setInsets(new Insets(0, 0, 3, 0));
        appearance5.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setAlign(Alignment9.CENTER);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setDisplaySize(new Dimension(83, 39));
        element13.setStyle("NationLeftDecorator");
        element13.setExpandable(false);
        checkOut11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("StyledBold16White");
        element14.setNonBlocking(true);
        element14.setExpandable(false);
        checkOut11.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("almanach");
        checkOut13.setAttribute("text");
        checkOut13.setField("currentDateText");
        element14.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element14.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setDisplaySize(new Dimension(83, 39));
        element15.setStyle("NationRightDecorator");
        element15.setExpandable(false);
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("darkTitle");
        element16.setExpandable(false);
        checkOut8.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element16.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.CENTER);
        element16.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("almanach");
        checkOut15.setAttribute("text");
        checkOut15.setField("currentEphemeris/merydName");
        element16.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element16.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(0, 120));
        checkOut8.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Image element17 = new Image();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setDisplaySize(new Dimension(73, 100));
        element17.setExpandable(false);
        checkOut16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element17.getAppearance();
        appearance7.setElementMap(elementMap);
        element17.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 0, 0, 5));
        appearance7.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.NORTH);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("almanach");
        checkOut20.setAttribute("texture");
        checkOut20.setField("currentEphemeris/merydIconUrl");
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element17.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("darkBold");
        element19.setNonBlocking(true);
        element19.setMinWidth(1);
        element19.setMaxWidth(250);
        element19.setExpandable(false);
        checkOut16.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("almanach");
        checkOut21.setAttribute("text");
        checkOut21.setField("currentEphemeris/merydDesc");
        element19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setExpandable(false);
        checkOut8.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut22.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(5, 0, 5, 0));
        appearance8.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.WEST);
        checkOut22.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final StaticLayout element22 = new StaticLayout();
        element22.onCheckOut();
        element22.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final Image element23 = new Image();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("scrollTitleBar");
        element23.setDisplaySize(new Dimension(330, 29));
        checkOut22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setSize(new Dimension(-2, -2));
        element24.setAlign(Alignment17.WEST);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("styledBoldWhite12");
        element25.setNonBlocking(true);
        element25.setText("%achievement.reward%".replace("%achievement.reward%", Xulor.getInstance().getTranslatedString("achievement.reward")));
        checkOut22.addBasicElement(element25);
        element25.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment17.WEST);
        element26.setSize(new Dimension(100.0f, 2));
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance9 = element25.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.CENTER);
        element25.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut24 = ColorElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance9.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance9.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final List element27 = new List();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setCellSize(new Dimension(52, 52));
        element27.setExpandable(false);
        element27.setAutoIdealSize(true);
        element27.setIdealSizeMinRows(1);
        element27.setIdealSizeMaxRows(1);
        checkOut8.addBasicElement(element27);
        element27.onAttributesInitialized();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setLocal(true);
        checkOut25.setName("displayedAchievement");
        checkOut25.setField("rewards");
        checkOut25.setAttribute("content");
        element27.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final RowLayoutData element28 = new RowLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment9.CENTER);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance10 = element27.getAppearance();
        appearance10.setElementMap(elementMap);
        element27.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(0, 0, 0, 0));
        appearance10.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance10.onChildrenAdded();
        final ItemRenderer element29 = new ItemRenderer();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu:openItemDetailWindow()");
        element29.setOnItemClick(onItemClick);
        element27.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ConditionResult element30 = new ConditionResult();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemCondition element31 = new ItemCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final NotNullCondition element32 = new NotNullCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        element29.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final RowLayout checkOut28 = RowLayout.checkOut();
        checkOut28.setAlign(Alignment9.WEST);
        checkOut27.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final Container checkOut29 = Container.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setExpandable(false);
        checkOut27.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final DecoratorAppearance appearance11 = checkOut29.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut29.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setInsets(new Insets(0, 0, 0, 5));
        appearance11.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        appearance11.onChildrenAdded();
        this.method0(checkOut29);
        this.method1(checkOut29);
        this.method2(checkOut29);
        this.method3(checkOut29);
        checkOut29.onChildrenAdded();
        this.method4(checkOut27);
        checkOut27.onChildrenAdded();
        element29.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut8.onChildrenAdded();
        this.method5(checkOut2);
        this.method6(checkOut2);
        this.method7(checkOut2);
        checkOut2.onChildrenAdded();
        this.method8(checkOut);
        this.method11(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return null;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("IconEmptyEmote");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(48, 48));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(-2, -2));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("texture");
        element3.setField("iconUrl");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bold");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        checkOut2.setName("text");
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.SOUTH_EAST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("text");
        element3.setField("quantity");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("visible");
        element4.setField("quantity");
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final GreaterCondition element6 = new GreaterCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("1");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("styledBoldDark10");
        element.setMinWidth(1);
        element.setMaxWidth(115);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("description");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(10, 0, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setSize(new Dimension(-2, -2));
        element2.setXOffset(-20);
        element2.setYOffset(-20);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setStyle("MessageBoxIconDecorator");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH);
        element2.setXOffset(0);
        element2.setYOffset(20);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setStyle("AlmanachBigIcon");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH);
        element2.setXOffset(0);
        element2.setYOffset(20);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("dialogBackgroundTitle");
        checkOut.setPrefSize(new Dimension(150, 26));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.SOUTH_WEST);
        element.setSize(new Dimension(-2, -2));
        element.setYOffset(71);
        element.setXOffset(85);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(5, 0, 10, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setExpandable(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("caracsBackground");
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(0, 20));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(7, 15, 0, 15));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(4, 4, 4, 4));
        appearance2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(100, 100));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(protectorPopup)");
        element5.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element5.setOnPopupHide(onPopupHide);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final String id = "protectorPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element5.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("popup");
        popupElement.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final TextView element6 = new TextView();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("styledBoldWhite12");
        element6.setMinWidth(1);
        element6.setMaxWidth(250);
        element6.setExpandable(false);
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("almanach");
        checkOut8.setAttribute("text");
        checkOut8.setField("currentMonth/protectorName");
        element6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setColor(new Color(1.0f, 0.78f, 0.15f, 1.0f));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        element6.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setMinWidth(1);
        element7.setMaxWidth(250);
        element7.setExpandable(false);
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("almanach");
        checkOut10.setAttribute("text");
        checkOut10.setField("currentMonth/protectorDesc");
        element7.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance4 = element7.getAppearance();
        appearance4.setElementMap(elementMap);
        element7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance5 = element5.getAppearance();
        appearance5.setElementMap(elementMap);
        element5.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PixmapElement checkOut12 = PixmapElement.checkOut();
        checkOut12.setElementMap(elementMap);
        element5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("almanach");
        checkOut13.setAttribute("texture");
        checkOut13.setField("currentMonth/protectorIconUrl");
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut2.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut14.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(5, 12, 0, 12));
        appearance6.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final PlainBorder element9 = new PlainBorder();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(0, 0, 1, 0));
        element9.setColor(new Color(0.0f, 0.0f, 0.0f, 0.25f));
        appearance6.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Padding element10 = new Padding();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setInsets(new Insets(0, 10, 5, 10));
        appearance6.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        appearance6.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.CENTER);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Button element11 = new Button();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("yellowLeftArrow");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.almanach:previousMonth");
        element11.setOnClick(onClick);
        element11.setExpandable(false);
        checkOut14.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setName("almanach");
        checkOut17.setAttribute("enabled");
        checkOut17.setField("canGoBefore");
        element11.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element11.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("StyledBold16Dark");
        element12.setExpandable(true);
        checkOut14.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element12.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.CENTER);
        element12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 5, 0, 5));
        appearance7.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("almanach");
        checkOut19.setAttribute("text");
        checkOut19.setField("currentMonth/monthName");
        element12.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element12.onChildrenAdded();
        final Button element13 = new Button();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("yellowRightArrow");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.almanach:nextMonth");
        element13.setOnClick(onClick2);
        element13.setExpandable(false);
        checkOut14.addBasicElement(element13);
        element13.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("almanach");
        checkOut20.setAttribute("enabled");
        checkOut20.setField("canGoAfter");
        element13.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("darkBold");
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(zodiakPopup)");
        element14.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element14.setOnPopupHide(onPopupHide2);
        checkOut2.addBasicElement(element14);
        element14.onAttributesInitialized();
        final String id2 = "zodiakPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element14.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setStyle("popup");
        popupElement2.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHorizontal(false);
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("styledBoldWhite12");
        element15.setMinWidth(1);
        element15.setMaxWidth(250);
        element15.setExpandable(false);
        checkOut21.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("almanach");
        checkOut23.setAttribute("text");
        checkOut23.setField("currentZodiak/name");
        element15.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final DecoratorAppearance appearance8 = element15.getAppearance();
        appearance8.setElementMap(elementMap);
        element15.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut24 = ColorElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setColor(new Color(1.0f, 0.78f, 0.15f, 1.0f));
        appearance8.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance8.onChildrenAdded();
        element15.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("bold");
        element16.setMinWidth(1);
        element16.setMaxWidth(250);
        element16.setExpandable(false);
        checkOut21.addBasicElement(element16);
        element16.onAttributesInitialized();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("almanach");
        checkOut25.setAttribute("text");
        checkOut25.setField("currentZodiak/description");
        element16.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final DecoratorAppearance appearance9 = element16.getAppearance();
        appearance9.setElementMap(elementMap);
        element16.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut26 = ColorElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance9.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance9.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut21.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setName("almanach");
        checkOut27.setAttribute("text");
        checkOut27.setField("currentZodiak/name");
        element14.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final DecoratorAppearance appearance10 = element14.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.CENTER);
        element14.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut28 = Margin.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setInsets(new Insets(5, 0, 0, 0));
        appearance10.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final ColorElement checkOut29 = ColorElement.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setColor(new Color(0.5f, 0.5f, 0.5f, 1.0f));
        appearance10.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        appearance10.onChildrenAdded();
        element14.onChildrenAdded();
        final String id3 = "calendar";
        final CalendarWidget calendarWidget = new CalendarWidget();
        calendarWidget.onCheckOut();
        calendarWidget.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, calendarWidget);
        }
        calendarWidget.setCellSize(new Dimension(22, 22));
        calendarWidget.setStyle("almanach");
        calendarWidget.setExpandable(false);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.almanach:selectDate");
        calendarWidget.setOnItemClick(onItemClick);
        checkOut2.addBasicElement(calendarWidget);
        calendarWidget.onAttributesInitialized();
        final DecoratorAppearance appearance11 = calendarWidget.getAppearance();
        appearance11.setElementMap(elementMap);
        calendarWidget.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setInsets(new Insets(5, 20, 0, 20));
        appearance11.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        appearance11.onChildrenAdded();
        final PropertyElement checkOut31 = PropertyElement.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setName("almanach");
        checkOut31.setAttribute("content");
        checkOut31.setField("currentMonthDays");
        calendarWidget.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final PropertyElement checkOut32 = PropertyElement.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setName("almanach");
        checkOut32.setAttribute("calendar");
        checkOut32.setField("calendar");
        calendarWidget.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        final ItemRenderer element17 = new ItemRenderer();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        calendarWidget.addBasicElement(element17);
        element17.onAttributesInitialized();
        final Container checkOut33 = Container.checkOut();
        checkOut33.setElementMap(elementMap);
        element17.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final StaticLayout element18 = new StaticLayout();
        element18.onCheckOut();
        element18.setAdaptToContentSize(true);
        checkOut33.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Button element19 = new Button();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("flat");
        checkOut33.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(100.0f, 100.0f));
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("enabled");
        element21.setField("isEnabled");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        this.method9(element19);
        element19.onChildrenAdded();
        this.method10(checkOut33);
        checkOut33.onChildrenAdded();
        element17.onChildrenAdded();
        calendarWidget.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("modulationColor");
        element.setField("isToday");
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("1, 0.78, 0.15, 1.0");
        element2.setElseValue("1,1,1,1");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("almanachQuestDone");
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.SOUTH);
        element2.setYOffset(3);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("visible");
        element3.setField("isEnabled");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("modulationColor");
        element4.setField("entry/quest/isCompleted");
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setValue("0,1,0");
        element5.setElseValue("1,0,0");
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.SOUTH_EAST);
        element.setSize(new Dimension(-2, -2));
        element.setXOffset(-114);
        element.setYOffset(72);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Button element3 = new Button();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("bigLeftWindow");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(almanachRewardPopup)");
        element3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element3.setOnPopupHide(onPopupHide);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.almanach:displayRewardMachine");
        element3.setOnClick(onClick);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final String id = "almanachRewardPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("white");
        element4.setEnableShrinking(false);
        element4.setText("%almanach.rewardMachine%".replace("%almanach.rewardMachine%", Xulor.getInstance().getTranslatedString("almanach.rewardMachine")));
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance = element4.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        element4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(69, 58));
        element5.setAlign(Alignment17.SOUTH);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setNonBlocking(true);
        element6.setStyle("almanachRewardMachine");
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(-2, -2));
        element7.setAlign(Alignment17.NORTH);
        element7.setXOffset(0);
        element7.setYOffset(7);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
