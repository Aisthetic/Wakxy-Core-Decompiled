package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import java.awt.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.appearance.*;

public class MessageBoxDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public MessageBoxDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Window window = new Window();
        window.onCheckOut();
        window.setElementMap(elementMap);
        window.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        window.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("new");
        window.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(50, 50, 50, 50));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element3 = new WindowMovePoint();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 15, 0, 15));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(3, 12, 0, 12));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final String id = "windowContentContainer";
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut7);
        }
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut7.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(16, 23, 16, 23));
        appearance4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final String id2 = "messageBoxTextView";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textView);
        }
        textView.setMinWidth(250);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu:openLinkInBrowser");
        textView.setOnClick(onClick);
        checkOut7.addBasicElement(textView);
        textView.onAttributesInitialized();
        final DecoratorAppearance appearance5 = textView.getAppearance();
        appearance5.setElementMap(elementMap);
        textView.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(5, 5, 5, 5));
        appearance5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance5.onChildrenAdded();
        textView.onChildrenAdded();
        final String id3 = "messageBoxTextEditor";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, textEditor);
        }
        checkOut7.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final DecoratorAppearance appearance6 = textEditor.getAppearance();
        appearance6.setElementMap(elementMap);
        textEditor.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(5, 5, 5, 5));
        appearance6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance6.onChildrenAdded();
        textEditor.onChildrenAdded();
        final String id4 = "messageBoxButtonsContainer";
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, checkOut11);
        }
        checkOut11.setExpandable(false);
        checkOut7.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setAlign(Alignment9.CENTER);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut11.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(5, 0, 5, 0));
        appearance7.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance7.onChildrenAdded();
        final String id5 = "messageBoxButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, button);
        }
        button.setPrefSize(new Dimension(50, 0));
        button.setExpandable(false);
        button.setStyle("small");
        checkOut11.addBasicElement(button);
        button.onAttributesInitialized();
        final DecoratorAppearance appearance8 = button.getAppearance();
        appearance8.setElementMap(elementMap);
        button.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(0, 10, 0, 10));
        appearance8.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance8.onChildrenAdded();
        button.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        window.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(100.0f, 100.0f));
        checkOut14.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut14.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.NORTH);
        element8.setYOffset(-20);
        element8.setSize(new Dimension(-2, -2));
        checkOut15.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut15.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("messageBoxIconDecorator");
        element10.setNonBlocking(true);
        checkOut15.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.CENTER);
        element11.setSize(new Dimension(-2, -2));
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final String id6 = "messageBoxImage";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, image);
        }
        image.setNonBlocking(true);
        image.setScaled(true);
        image.setKeepAspectRatio(true);
        checkOut15.addBasicElement(image);
        image.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setSize(new Dimension(-2, -2));
        element12.setYOffset(12);
        image.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        image.onChildrenAdded();
        checkOut15.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.CENTER);
        window.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        window.onChildrenAdded();
        return window;
    }
}
