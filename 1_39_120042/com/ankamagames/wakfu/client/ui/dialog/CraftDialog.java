package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class CraftDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public CraftDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "craftWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(true);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("StyledBold16White");
        element8.setNonBlocking(true);
        element8.setText("%desc.characterBook.craftPage%".replace("%desc.characterBook.craftPage%", Xulor.getInstance().getTranslatedString("desc.characterBook.craftPage")));
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut7.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut9);
        }
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut9.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element10 = new Padding();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setInsets(new Insets(20, 0, 0, 0));
        appearance6.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        appearance6.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setStyle("ScrollString");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.EAST);
        element11.setSize(new Dimension(10, 100.0f));
        element11.setXOffset(-15);
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut10.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(30, 0, 40, 0));
        appearance7.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final String id3 = "selectedCraft";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        checkOut9.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setLocal(true);
        checkOut12.setName("craft");
        checkOut12.setAttribute("value");
        data.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        data.onChildrenAdded();
        final ScrollContainer element12 = new ScrollContainer();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("Encyclopedia");
        element12.setExpandable(false);
        element12.setHorizontalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        element12.setVerticalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_DISPLAY);
        element12.setPageJumpRatio(0.3f);
        checkOut9.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element13.setAlign(Alignment17.CENTER);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance8 = element12.getAppearance();
        appearance8.setElementMap(elementMap);
        element12.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(17, 3, 20, 0));
        appearance8.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Padding element14 = new Padding();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setInsets(new Insets(0, 18, 0, 4));
        appearance8.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setStyle("tiledScroll");
        checkOut14.setExpandable(false);
        checkOut14.setPrefSize(new Dimension(415, 0));
        element12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.CENTER);
        checkOut14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut14.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element16 = new Padding();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setInsets(new Insets(20, 0, 25, 0));
        appearance9.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 0, 0, 10));
        appearance9.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance9.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(false);
        checkOut16.setAlign(Alignment9.NORTH);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final String id4 = "craftGroupId";
        final RadioGroup radioGroup = new RadioGroup();
        radioGroup.onCheckOut();
        radioGroup.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, radioGroup);
        }
        checkOut14.addBasicElement(radioGroup);
        radioGroup.onAttributesInitialized();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setLocal(true);
        checkOut17.setName("craft");
        checkOut17.setAttribute("value");
        checkOut17.setField("idString");
        radioGroup.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        radioGroup.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setStyle("EncyclopediaSplashTitle");
        checkOut18.setExpandable(false);
        checkOut14.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setAlign(Alignment9.WEST);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final DecoratorAppearance appearance10 = checkOut18.getAppearance();
        appearance10.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Padding element17 = new Padding();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setInsets(new Insets(0, 25, 0, 0));
        appearance10.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        appearance10.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("StyledBold16White");
        element18.setNonBlocking(true);
        element18.setExpandable(false);
        element18.setText("%craft%".replace("%craft%", Xulor.getInstance().getTranslatedString("craft")));
        checkOut18.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance11 = element18.getAppearance();
        appearance11.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance11).setAlign(Alignment9.WEST);
        element18.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(5, 0, 10, 0));
        appearance11.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance11.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final List element19 = new List();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setCellSize(new Dimension(54, 49));
        element19.setAutoIdealSize(true);
        element19.setIdealSizeMinColumns(1);
        element19.setIdealSizeMaxColumns(6);
        element19.setExpandable(false);
        checkOut14.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("localPlayer");
        checkOut21.setAttribute("content");
        checkOut21.setField("craft/craftsByKnown");
        element19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final ItemRenderer element21 = new ItemRenderer();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.craft:selectCraft");
        element21.setOnItemClick(onItemClick);
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final AndCondition element23 = new AndCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ItemCondition element24 = new ItemCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final ItemCondition element26 = new ItemCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setField("isUnknown");
        element23.addBasicElement(element26);
        element26.onAttributesInitialized();
        final FalseCondition element27 = new FalseCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        final String id5 = "craft";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, data2);
        }
        element21.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("value");
        data2.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        element21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final StaticLayout element29 = new StaticLayout();
        element29.onCheckOut();
        element29.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final RadioButton element30 = new RadioButton();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("scroll");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCraft)");
        element30.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element30.setOnPopupHide(onPopupHide);
        element30.setGroupId("craftGroupId");
        checkOut22.addBasicElement(element30);
        element30.onAttributesInitialized();
        final StaticLayoutData element31 = new StaticLayoutData();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setSize(new Dimension(100.0f, 100.0f));
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final String id6 = "descCraft";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element30.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setPrefSize(new Dimension(10, 0));
        checkOut23.setStyle("popup");
        popupElement.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHorizontal(false);
        checkOut24.setAlign(Alignment9.NORTH);
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final TextView element32 = new TextView();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("white");
        element32.setExpandable(false);
        checkOut23.addBasicElement(element32);
        element32.onAttributesInitialized();
        final DecoratorAppearance appearance12 = element32.getAppearance();
        appearance12.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance12).setAlign(Alignment9.WEST);
        element32.addBasicElement(appearance12);
        appearance12.onAttributesInitialized();
        appearance12.onChildrenAdded();
        this.method0(element32);
        element32.onChildrenAdded();
        checkOut23.onChildrenAdded();
        popupElement.onChildrenAdded();
        this.method1(element30);
        this.method2(element30);
        element30.onChildrenAdded();
        this.method3(checkOut22);
        this.method4(checkOut22);
        this.method5(checkOut22);
        checkOut22.onChildrenAdded();
        element21.onChildrenAdded();
        this.method6(element19);
        element19.onChildrenAdded();
        this.method7(checkOut14);
        this.method8(checkOut14);
        this.method9(checkOut14);
        this.method10(checkOut14);
        this.method17(checkOut14);
        this.method33(checkOut14);
        this.method46(checkOut14);
        checkOut14.onChildrenAdded();
        element12.onChildrenAdded();
        this.method47(checkOut9);
        this.method48(checkOut9);
        checkOut9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        this.method49(checkOut2);
        checkOut2.onChildrenAdded();
        this.method50(element);
        this.method51(element);
        this.method52(element);
        this.method53(element);
        this.method54(element);
        this.method55(element);
        this.method56(element);
        this.method57(element);
        this.method58(element);
        this.method59(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("name");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        element.setField("idString");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("craft");
        checkOut.setAttribute("selected");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("value");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(40, 40));
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(-2, -2));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("texture");
        element3.setField("passportIconUrl");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("CraftLevelBackground");
        element.setDisplaySize(new Dimension(31, 20));
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.SOUTH_EAST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("visible");
        element3.setField("isConceptual");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final FalseCondition element5 = new FalseCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteBold");
        element.setPrefSize(new Dimension(32, 20));
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.SOUTH_EAST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("text");
        element3.setField("level");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("visible");
        element4.setField("isConceptual");
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final FalseCondition element6 = new FalseCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ItemCondition element6 = new ItemCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setField("isUnknown");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final RadioButton element9 = new RadioButton();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setEnabled(false);
        element9.setStyle("scroll");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCraft)");
        element9.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide);
        element9.setGroupId("craftGroupId");
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(100.0f, 100.0f));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final String id = "descCraft";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element9.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("white");
        element11.setExpandable(false);
        checkOut2.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance = element11.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element11.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("text");
        element12.setField("name");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        element9.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("craftUnknown");
        element13.setNonBlocking(true);
        checkOut.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setSize(new Dimension(-2, -2));
        element14.setAlign(Alignment17.CENTER);
        element14.setXOffset(0);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaSplashTitle");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(0, 25, 0, 0));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("StyledBold16White");
        element2.setNonBlocking(true);
        element2.setExpandable(false);
        element2.setText("%craft.collect%".replace("%craft.collect%", Xulor.getInstance().getTranslatedString("craft.collect")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(54, 49));
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(6);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("localPlayer");
        checkOut.setAttribute("content");
        checkOut.setField("craft/harvestsByKnown");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.craft:selectCraft");
        element3.setOnItemClick(onItemClick);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemCondition element6 = new ItemCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final ItemCondition element8 = new ItemCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setField("isUnknown");
        element5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final FalseCondition element9 = new FalseCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final String id = "craft";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("value");
        data.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final RadioButton element12 = new RadioButton();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("scroll");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCraft)");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        element12.setGroupId("craftGroupId");
        checkOut2.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final String id2 = "descCraft";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("white");
        element14.setExpandable(false);
        checkOut3.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance = element14.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element14.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("name");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("value");
        element16.setField("idString");
        element12.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setLocal(true);
        checkOut5.setName("craft");
        checkOut5.setAttribute("selected");
        element12.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        checkOut5.addBasicElement(element17);
        element17.onAttributesInitialized();
        final EqualCondition element18 = new EqualCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("value");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element12.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(40, 40));
        element20.setNonBlocking(true);
        checkOut2.addBasicElement(element20);
        element20.onAttributesInitialized();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment17.CENTER);
        element21.setSize(new Dimension(-2, -2));
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element20.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("texture");
        element22.setField("passportIconUrl");
        checkOut6.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element20.onChildrenAdded();
        final Image element23 = new Image();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("CraftLevelBackground");
        element23.setDisplaySize(new Dimension(31, 20));
        element23.setNonBlocking(true);
        checkOut2.addBasicElement(element23);
        element23.onAttributesInitialized();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment17.SOUTH_EAST);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("visible");
        element25.setField("isConceptual");
        element23.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final FalseCondition element27 = new FalseCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element23.onChildrenAdded();
        final Label element28 = new Label();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("whiteBold");
        element28.setPrefSize(new Dimension(32, 20));
        element28.setNonBlocking(true);
        checkOut2.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAlign(Alignment17.SOUTH_EAST);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final DecoratorAppearance appearance2 = element28.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element28.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("text");
        element30.setField("level");
        element28.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("visible");
        element31.setField("isConceptual");
        element28.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final FalseCondition element33 = new FalseCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element3.onChildrenAdded();
        final ItemRenderer element34 = new ItemRenderer();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        final AndCondition element36 = new AndCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final ItemCondition element37 = new ItemCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        final NotNullCondition element38 = new NotNullCondition();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        element37.onChildrenAdded();
        final ItemCondition element39 = new ItemCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setField("isUnknown");
        element36.addBasicElement(element39);
        element39.onAttributesInitialized();
        final TrueCondition element40 = new TrueCondition();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element39.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        element39.onChildrenAdded();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        element34.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element41 = new StaticLayout();
        element41.onCheckOut();
        element41.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        final RadioButton element42 = new RadioButton();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setEnabled(false);
        element42.setStyle("scroll");
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(descCraft)");
        element42.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element42.setOnPopupHide(onPopupHide2);
        element42.setGroupId("craftGroupId");
        checkOut7.addBasicElement(element42);
        element42.onAttributesInitialized();
        final StaticLayoutData element43 = new StaticLayoutData();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element43.setSize(new Dimension(100.0f, 100.0f));
        element42.addBasicElement(element43);
        element43.onAttributesInitialized();
        element43.onChildrenAdded();
        final String id3 = "descCraft";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element42.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut9.setAlign(Alignment9.NORTH);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final TextView element44 = new TextView();
        element44.onCheckOut();
        element44.setElementMap(elementMap);
        element44.setStyle("white");
        element44.setExpandable(false);
        checkOut8.addBasicElement(element44);
        element44.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element44.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element44.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element45 = new ItemElement();
        element45.onCheckOut();
        element45.setElementMap(elementMap);
        element45.setAttribute("text");
        element45.setField("name");
        element44.addBasicElement(element45);
        element45.onAttributesInitialized();
        element45.onChildrenAdded();
        element44.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement2.onChildrenAdded();
        element42.onChildrenAdded();
        final Image element46 = new Image();
        element46.onCheckOut();
        element46.setElementMap(elementMap);
        element46.setStyle("craftUnknown");
        element46.setNonBlocking(true);
        checkOut7.addBasicElement(element46);
        element46.onAttributesInitialized();
        final StaticLayoutData element47 = new StaticLayoutData();
        element47.onCheckOut();
        element47.setElementMap(elementMap);
        element47.setSize(new Dimension(-2, -2));
        element47.setAlign(Alignment17.CENTER);
        element47.setXOffset(0);
        element46.addBasicElement(element47);
        element47.onAttributesInitialized();
        element47.onChildrenAdded();
        element46.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element34.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("EncyclopediaSplashTitle");
        checkOut2.setExpandable(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, -2));
        element2.setAlign(Alignment17.WEST);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(0, 80, 0, 0));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("StyledBold16White");
        element4.setNonBlocking(true);
        element4.setExpandable(false);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("craft");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("text");
        checkOut4.setField("name");
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final String id = "checkBoxMode";
        final ToggleButton toggleButton = new ToggleButton();
        toggleButton.onCheckOut();
        toggleButton.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, toggleButton);
        }
        toggleButton.setExpandable(false);
        toggleButton.setStyle("craftType");
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.crafts:onCraftTypeChanged(selectedCraft)");
        toggleButton.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(switchModePopup,checkBoxMode)");
        toggleButton.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        toggleButton.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(toggleButton);
        toggleButton.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.WEST);
        element5.setSize(new Dimension(-2, -2));
        toggleButton.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance3 = toggleButton.getAppearance();
        appearance3.setElementMap(elementMap);
        toggleButton.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 10, 0, 0));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("craftDisplayType");
        checkOut7.setAttribute("selected");
        toggleButton.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut7.addBasicElement(element6);
        element6.onAttributesInitialized();
        final EqualCondition element7 = new EqualCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("0");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("craft");
        checkOut8.setLocal(true);
        checkOut8.setAttribute("enabled");
        checkOut8.setField("hasHarvest");
        toggleButton.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut8.addBasicElement(element8);
        element8.onAttributesInitialized();
        final AndCondition element9 = new AndCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final TrueCondition element10 = new TrueCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final TrueCondition element11 = new TrueCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("craft");
        checkOut9.setLocal(true);
        checkOut9.setAttribute("comparedValue");
        checkOut9.setField("hasRecipe");
        element11.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element11.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut8.onChildrenAdded();
        toggleButton.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 45));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setDisplaySize(new Dimension(83, 39));
        element2.setStyle("NationLeftDecorator");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.NORTH_WEST);
        element3.setSize(new Dimension(83, 39));
        element3.setXOffset(20);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setDisplaySize(new Dimension(83, 39));
        element4.setStyle("NationRightDecorator");
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.NORTH_EAST);
        element5.setSize(new Dimension(83, 39));
        element5.setXOffset(-80);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ProgressBar element6 = new ProgressBar();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("xp2");
        element6.setValue(1.0f);
        element6.setUseIncreaseProgressTween(false);
        element6.setUseDecreaseProgressTween(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(xpPopup)");
        element6.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element6.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(240, 16));
        element7.setAlign(Alignment17.NORTH);
        element7.setXOffset(-30);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("craft");
        checkOut3.setLocal(true);
        checkOut3.setAttribute("value");
        checkOut3.setField("currentXpPercentage");
        element6.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final String id = "xpPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element6.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setPrefSize(new Dimension(10, 0));
        checkOut4.setStyle("popup");
        popupElement.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final BorderLayoutData checkOut5 = BorderLayoutData.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setData(BorderLayoutData.Values.WEST);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("PopupInformation");
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element8.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("craft");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("xpRatio");
        element8.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut4.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("progressBar");
        checkOut7.setColor(new Color(0.0f, 0.7f, 0.8f, 1.0f));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(1, 1, 1, 1));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final PlainBackground element9 = new PlainBackground();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance3.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance3.onChildrenAdded();
        element6.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("StyledBoldDark10");
        element10.setNonBlocking(true);
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(240, 16));
        element11.setAlign(Alignment17.NORTH);
        element11.setXOffset(-30);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("craft");
        checkOut9.setLocal(true);
        checkOut9.setAttribute("text");
        checkOut9.setField("levelText");
        element10.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final DecoratorAppearance appearance4 = element10.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("text");
        checkOut10.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element10.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setStyle("ProgressBar");
        checkOut11.setPrefSize(new Dimension(0, 16));
        checkOut.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(240, 16));
        element12.setAlign(Alignment17.NORTH);
        element12.setXOffset(-30);
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayout element13 = new StaticLayout();
        element13.onCheckOut();
        element13.setAdaptToContentSize(true);
        checkOut12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.EAST);
        element14.setXOffset(-20);
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final Button element15 = new Button();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("yellowSmall");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.crafts:openLinkedBook");
        element15.setOnClick(onClick);
        element15.setExpandable(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(descCraftBookButton)");
        element15.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element15.setOnPopupHide(onPopupHide2);
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final String id2 = "descCraftBookButton";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element15.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setPrefSize(new Dimension(10, 0));
        checkOut13.setStyle("popup");
        popupElement2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("white");
        element16.setText("%desc.openCraftInfos%".replace("%desc.openCraftInfos%", Xulor.getInstance().getTranslatedString("desc.openCraftInfos")));
        checkOut13.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element16.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element16.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut13.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 100.0f));
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setDisplaySize(new Dimension(42, 42));
        element18.setNonBlocking(true);
        checkOut12.addBasicElement(element18);
        element18.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(-2, -2));
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final DecoratorAppearance appearance6 = element18.getAppearance();
        appearance6.setElementMap(elementMap);
        element18.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(5, 5, 5, 5));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap);
        element18.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setLocal(true);
        checkOut16.setName("craft");
        checkOut16.setAttribute("texture");
        checkOut16.setField("bookIconUrl");
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setExpandable(false);
        checkOut.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(-2, -2));
        element20.setAlign(Alignment17.SOUTH);
        element20.setXOffset(-25);
        checkOut17.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut17.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 15, 0, 0));
        appearance7.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance7.onChildrenAdded();
        final String id3 = "seedsPlantedContainer";
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut19);
        }
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(seedsPlantedPopup,seedsPlantedContainer)");
        checkOut19.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut19.setOnPopupHide(onPopupHide3);
        checkOut19.setNonBlocking(false);
        checkOut17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("craft");
        checkOut20.setLocal(true);
        checkOut20.setAttribute("visible");
        checkOut20.setField("hasSeedsToPlant");
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final String id4 = "seedsPlantedPopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH);
        popupElement3.setHotSpotPosition(Alignment9.SOUTH);
        checkOut19.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement3.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("white");
        checkOut21.addBasicElement(element21);
        element21.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("craft");
        checkOut22.setLocal(true);
        checkOut22.setAttribute("text");
        checkOut22.setField("numSeedsPlantedTitle");
        element21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final DecoratorAppearance appearance8 = element21.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element21.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut21.onChildrenAdded();
        popupElement3.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("passportSeedsPlanted");
        element22.setExpandable(false);
        element22.setNonBlocking(true);
        checkOut19.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setMultiline(false);
        element23.setStyle("StyledBoldDark12");
        element23.setEnableAutoZoomShrink(true);
        element23.setMinWidth(42);
        element23.setMaxWidth(42);
        element23.setExpandable(false);
        element23.setNonBlocking(true);
        checkOut19.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element23.getAppearance();
        appearance9.setElementMap(elementMap);
        element23.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 1, 0, 1));
        appearance9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance9.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("craft");
        checkOut24.setLocal(true);
        checkOut24.setAttribute("text");
        checkOut24.setField("numSeedsPlanted");
        element23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final String id5 = "cuttingsTakenContainer";
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, checkOut25);
        }
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup(cuttingsTakenPopup,cuttingsTakenContainer)");
        checkOut25.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        checkOut25.setOnPopupHide(onPopupHide4);
        checkOut25.setNonBlocking(false);
        checkOut17.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final String id6 = "cuttingsTakenPopup";
        final PopupElement popupElement4 = new PopupElement();
        popupElement4.onCheckOut();
        popupElement4.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement4);
        }
        popupElement4.setAlign(Alignment9.NORTH);
        popupElement4.setHotSpotPosition(Alignment9.SOUTH);
        checkOut25.addBasicElement(popupElement4);
        popupElement4.onAttributesInitialized();
        this.method11(popupElement4);
        popupElement4.onChildrenAdded();
        this.method12(checkOut25);
        this.method13(checkOut25);
        this.method14(checkOut25);
        checkOut25.onChildrenAdded();
        this.method15(checkOut17);
        this.method16(checkOut17);
        checkOut17.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("craft");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("text");
        checkOut2.setField("numSeedsHarvestedTitle");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("craft");
        checkOut.setLocal(true);
        checkOut.setAttribute("visible");
        checkOut.setField("hasCuttingsToTake");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("passportCuttingsTaken");
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setMultiline(false);
        element.setStyle("StyledBoldDark12");
        element.setEnableAutoZoomShrink(true);
        element.setMinWidth(42);
        element.setMaxWidth(42);
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 1, 0, 1));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("craft");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("text");
        checkOut2.setField("numCuttingsTaken");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "resourcesHarvestedContainer";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(resourcesHarvestedPopup,resourcesHarvestedContainer)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "resourcesHarvestedPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("craft");
        checkOut3.setLocal(true);
        checkOut3.setAttribute("text");
        checkOut3.setField("numResourcesHarvestedTitle");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("craft");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("visible");
        checkOut4.setField("hasResourcesToHarvest");
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("passportResourcesHarvested");
        element2.setExpandable(false);
        element2.setNonBlocking(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setMultiline(false);
        element3.setStyle("StyledBoldDark12");
        element3.setEnableAutoZoomShrink(true);
        element3.setMinWidth(42);
        element3.setMaxWidth(42);
        element3.setExpandable(false);
        element3.setNonBlocking(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 1, 0, 1));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("craft");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("numResourcesHarvested");
        element3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "recipesDoneContainer";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        checkOut.setExpandable(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recipesDonePopup,recipesDoneContainer)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("craft");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("hasRecipe");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("passportRecipesDone");
        element.setExpandable(false);
        element.setNonBlocking(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMultiline(false);
        element2.setStyle("StyledBoldDark12");
        element2.setEnableAutoZoomShrink(true);
        element2.setMinWidth(42);
        element2.setMaxWidth(42);
        element2.setExpandable(false);
        element2.setNonBlocking(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 1, 0, 1));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("craft");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("text");
        checkOut4.setField("numRecipesDone");
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "recipeList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(100.0f, 50));
        list.setExpandable(false);
        list.setHorizontal(false);
        list.setAutoIdealSize(true);
        list.setIdealSizeMinColumns(1);
        list.setIdealSizeMaxColumns(1);
        basicElement.addBasicElement(list);
        list.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("craft");
        checkOut.setLocal(true);
        checkOut.setAttribute("idealSizeMinRows");
        checkOut.setField("numPerPage");
        list.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("craft");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("idealSizeMaxRows");
        checkOut2.setField("numPerPage");
        list.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("craftDisplayType");
        checkOut3.setAttribute("visible");
        list.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("craft");
        checkOut4.setAttribute("content");
        checkOut4.setField("currentRecipesPage");
        list.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance = list.getAppearance();
        appearance.setElementMap(elementMap);
        list.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 20, 0, 10));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.crafts:openProducedItemDescription(craftWindow)");
        element3.setOnItemClick(onItemClick);
        list.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemCondition element6 = new ItemCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final ListCondition element8 = new ListCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setKey("evenIndex");
        element5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final TrueCondition element9 = new TrueCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final String id2 = "recipe";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        element3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("value");
        data.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recipeDesc)");
        checkOut8.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut8.setOnPopupHide(onPopupHide);
        checkOut8.setNonBlocking(false);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final String id3 = "recipeDesc";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut8.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("PopupInformation");
        element11.setExpandable(false);
        element11.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance2.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance2.onChildrenAdded();
        element11.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("white");
        element12.setMinWidth(1);
        element12.setMaxWidth(250);
        checkOut9.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("visible");
        element13.setField("criterionDescription");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final NotNullCondition element15 = new NotNullCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("criterionDescription");
        element12.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut12.setPrefSize(new Dimension(54, 54));
        checkOut8.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.NORTH);
        checkOut12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final StaticLayout element18 = new StaticLayout();
        element18.onCheckOut();
        element18.setAdaptToContentSize(true);
        checkOut12.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut12.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 0, 2));
        appearance4.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance4.onChildrenAdded();
        final String id4 = "recipeIcon";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, image);
        }
        image.setDisplaySize(new Dimension(48, 48));
        image.setNonBlocking(true);
        checkOut12.addBasicElement(image);
        image.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(-2, -2));
        image.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final PixmapElement checkOut14 = PixmapElement.checkOut();
        checkOut14.setElementMap(elementMap);
        image.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("texture");
        element20.setField("iconUrl");
        checkOut14.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        checkOut14.onChildrenAdded();
        image.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setNonBlocking(true);
        element21.setStyle("White10Bordered");
        checkOut12.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.SOUTH_EAST);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance5 = element21.getAppearance();
        appearance5.setElementMap(elementMap);
        element21.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 6, 6, 0));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("quantityText");
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut8.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut16.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element24 = new Padding();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setInsets(new Insets(3, 0, 0, 0));
        appearance6.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        appearance6.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setExpandable(false);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("StyledBoldDark10");
        element25.setText("=");
        element25.setExpandable(false);
        element25.setNonBlocking(true);
        checkOut18.addBasicElement(element25);
        element25.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element25.getAppearance();
        appearance7.setElementMap(elementMap);
        element25.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 0, 0, 5));
        appearance7.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance7.onChildrenAdded();
        element25.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut18.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.NORTH);
        checkOut21.setHorizontal(false);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final TextView element26 = new TextView();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("StyledBoldDark10");
        element26.setExpandable(false);
        element26.setPrefSize(new Dimension(150, 0));
        element26.setNonBlocking(true);
        checkOut20.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("name");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final String id5 = "ingredientList";
        final List list2 = new List();
        list2.onCheckOut();
        list2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, list2);
        }
        list2.setCellSize(new Dimension(27, 26));
        list2.setPrefSize(new Dimension(216, 26));
        list2.setExpandable(false);
        checkOut20.addBasicElement(list2);
        list2.onAttributesInitialized();
        final DecoratorAppearance appearance8 = list2.getAppearance();
        appearance8.setElementMap(elementMap);
        list2.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(3, 0, 0, 0));
        appearance8.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance8.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("content");
        element28.setField("ingredients");
        list2.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final ItemRenderer element29 = new ItemRenderer();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        list2.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ConditionResult element30 = new ConditionResult();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemCondition element31 = new ItemCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final NotNullCondition element32 = new NotNullCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(descIngredient)");
        checkOut23.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut23.setOnPopupHide(onPopupHide2);
        element29.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final String id6 = "descIngredient";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        checkOut23.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setPrefSize(new Dimension(10, 0));
        checkOut24.setStyle("popup");
        popupElement2.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        this.method18(checkOut24);
        this.method19(checkOut24);
        this.method20(checkOut24);
        this.method21(checkOut24);
        checkOut24.onChildrenAdded();
        popupElement2.onChildrenAdded();
        this.method22(checkOut23);
        checkOut23.onChildrenAdded();
        element29.onChildrenAdded();
        list2.onChildrenAdded();
        checkOut20.onChildrenAdded();
        checkOut18.onChildrenAdded();
        this.method23(checkOut16);
        checkOut16.onChildrenAdded();
        checkOut8.onChildrenAdded();
        this.method24(checkOut6);
        this.method25(checkOut6);
        checkOut6.onChildrenAdded();
        element3.onChildrenAdded();
        this.method26(list);
        this.method32(list);
        list.onChildrenAdded();
        return list;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final BorderLayoutData checkOut = BorderLayoutData.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setData(BorderLayoutData.Values.CENTER);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHorizontal(false);
        checkOut.setAlign(Alignment9.NORTH);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("(%desc.missingIngredient%)".replace("%desc.missingIngredient%", Xulor.getInstance().getTranslatedString("desc.missingIngredient")));
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("isPossessed");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 1));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "icon";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, image);
        }
        image.setDisplaySize(new Dimension(26, 26));
        image.setNonBlocking(true);
        checkOut.addBasicElement(image);
        image.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(-2, -2));
        image.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        image.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("texture");
        element3.setField("iconUrl");
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        image.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("White10Bordered");
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.SOUTH_EAST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 4, 4));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("quantity");
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.SOUTH);
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("StyledBoldDark10");
        element.setExpandable(false);
        element.setNonBlocking(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("levelShort");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("craft");
        checkOut4.setAttribute("visible");
        checkOut4.setField("isConceptual");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("StyledBoldDark10");
        element5.setNonBlocking(true);
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("productionPercentageShort");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("craft");
        checkOut6.setAttribute("visible");
        checkOut6.setField("isConceptual");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final FalseCondition element8 = new FalseCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("canUseAsIngredient");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final String id = "displayLinkedRecipesButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("yellowSmall");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.crafts:displayRecipesWithIngredient(recipe)");
        button.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(displayLinkedRecipesPopup,displayLinkedRecipesButton)");
        button.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        button.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        button.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        button.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("magnifyingGlass");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(3, 3, 3, 3));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.crafts:openProducedItemDescription(craftWindow)");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("oddIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "recipe";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("value");
        data.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recipeDesc)");
        checkOut3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut3.setOnPopupHide(onPopupHide);
        checkOut3.setNonBlocking(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final String id2 = "recipeDesc";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setPrefSize(new Dimension(10, 0));
        checkOut4.setStyle("popup");
        popupElement.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("PopupInformation");
        element9.setExpandable(false);
        element9.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance = element9.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element9.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance.onChildrenAdded();
        element9.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("white");
        element10.setMinWidth(1);
        element10.setMaxWidth(250);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("visible");
        element11.setField("criterionDescription");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final NotNullCondition element13 = new NotNullCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance2 = element10.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element10.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("text");
        element14.setField("criterionDescription");
        element10.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(54, 54));
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.NORTH);
        checkOut7.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut7.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 2));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final String id3 = "recipeIcon";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, image);
        }
        image.setDisplaySize(new Dimension(48, 48));
        image.setNonBlocking(true);
        checkOut7.addBasicElement(image);
        image.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(-2, -2));
        image.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        image.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("texture");
        element18.setField("iconUrl");
        checkOut9.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut9.onChildrenAdded();
        image.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(true);
        element19.setStyle("White10Bordered");
        checkOut7.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment17.SOUTH_EAST);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 6, 6, 0));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("quantityText");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut11.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element22 = new Padding();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setInsets(new Insets(3, 0, 0, 0));
        appearance5.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("StyledBoldDark10");
        element23.setText("=");
        element23.setExpandable(false);
        element23.setNonBlocking(true);
        checkOut13.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element23.getAppearance();
        appearance6.setElementMap(elementMap);
        element23.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 0, 0, 5));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        element23.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut13.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.NORTH);
        checkOut16.setHorizontal(false);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("StyledBoldDark10");
        element24.setExpandable(false);
        element24.setPrefSize(new Dimension(150, 0));
        element24.setNonBlocking(true);
        checkOut15.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("text");
        element25.setField("name");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final String id4 = "ingredientList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, list);
        }
        list.setCellSize(new Dimension(27, 26));
        list.setPrefSize(new Dimension(216, 26));
        list.setExpandable(false);
        checkOut15.addBasicElement(list);
        list.onAttributesInitialized();
        final DecoratorAppearance appearance7 = list.getAppearance();
        appearance7.setElementMap(elementMap);
        list.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(3, 0, 0, 0));
        appearance7.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("content");
        element26.setField("ingredients");
        list.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final ItemRenderer element27 = new ItemRenderer();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        list.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ConditionResult element28 = new ConditionResult();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final ItemCondition element29 = new ItemCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final NotNullCondition element30 = new NotNullCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(descIngredient)");
        checkOut18.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut18.setOnPopupHide(onPopupHide2);
        element27.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final String id5 = "descIngredient";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        checkOut18.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        popupElement2.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final BorderLayoutData checkOut20 = BorderLayoutData.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setData(BorderLayoutData.Values.CENTER);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut21.setAlign(Alignment9.NORTH);
        checkOut19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final TextView element31 = new TextView();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("white");
        element31.setExpandable(false);
        checkOut19.addBasicElement(element31);
        element31.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element31.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element31.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("text");
        element32.setField("name");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        final TextView element33 = new TextView();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setStyle("white");
        element33.setText("(%desc.missingIngredient%)".replace("%desc.missingIngredient%", Xulor.getInstance().getTranslatedString("desc.missingIngredient")));
        element33.setExpandable(false);
        checkOut19.addBasicElement(element33);
        element33.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element33.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.WEST);
        element33.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        appearance9.onChildrenAdded();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("visible");
        element34.setField("isPossessed");
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        final FalseCondition element36 = new FalseCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        checkOut19.onChildrenAdded();
        popupElement2.onChildrenAdded();
        this.method27(checkOut18);
        checkOut18.onChildrenAdded();
        element27.onChildrenAdded();
        list.onChildrenAdded();
        checkOut15.onChildrenAdded();
        checkOut13.onChildrenAdded();
        this.method28(checkOut11);
        checkOut11.onChildrenAdded();
        checkOut3.onChildrenAdded();
        this.method29(checkOut);
        this.method30(checkOut);
        this.method31(checkOut);
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 1));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "icon";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, image);
        }
        image.setDisplaySize(new Dimension(26, 26));
        image.setNonBlocking(true);
        checkOut.addBasicElement(image);
        image.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(-2, -2));
        image.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        image.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("texture");
        element3.setField("iconUrl");
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        image.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("White10Bordered");
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.SOUTH_EAST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 4, 4));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("quantity");
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.SOUTH);
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("StyledBoldDark10");
        element.setExpandable(false);
        element.setNonBlocking(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("levelShort");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("craft");
        checkOut4.setAttribute("visible");
        checkOut4.setField("isConceptual");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("StyledBoldDark10");
        element5.setNonBlocking(true);
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("productionPercentageShort");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("craft");
        checkOut6.setAttribute("visible");
        checkOut6.setField("isConceptual");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final FalseCondition element8 = new FalseCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("canUseAsIngredient");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final String id = "displayLinkedRecipesButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("yellowSmall");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.crafts:displayRecipesWithIngredient(recipe)");
        button.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(displayLinkedRecipesPopup,displayLinkedRecipesButton)");
        button.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        button.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        button.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        button.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("magnifyingGlass");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(3, 3, 3, 3));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element = new PlainBorder();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setColor(new Color(1.0f, 1.0f, 1.0f, 0.4f));
        element.setInsets(new Insets(1, 0, 1, 0));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final PlainBackground element2 = new PlainBackground();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setColor(new Color(1.0f, 1.0f, 1.0f, 0.2f));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NullCondition element5 = new NullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("oddIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element8 = new PlainBorder();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(1.0f, 1.0f, 1.0f, 0.4f));
        element8.setInsets(new Insets(1, 0, 1, 0));
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PlainBackground element9 = new PlainBackground();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setColor(new Color(1.0f, 1.0f, 1.0f, 0.2f));
        appearance.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(100.0f, 36));
        element.setHorizontal(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(1);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 20, 0, 10));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("craft");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("idealSizeMinRows");
        checkOut2.setField("numPerPage");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("craft");
        checkOut3.setLocal(true);
        checkOut3.setAttribute("idealSizeMaxRows");
        checkOut3.setField("numPerPage");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("craftDisplayType");
        checkOut4.setAttribute("visible");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final EqualCondition element3 = new EqualCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("1");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("craft");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("content");
        checkOut5.setField("currentHarvestsPage");
        element.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ItemRenderer element4 = new ItemRenderer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.crafts:openProducedItemDescription(craftWindow)");
        element4.setOnItemClick(onItemClick);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final AndCondition element6 = new AndCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final ListCondition element9 = new ListCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setKey("evenIndex");
        element6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final TrueCondition element10 = new TrueCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recipeDesc)");
        checkOut7.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut7.setOnPopupHide(onPopupHide);
        checkOut7.setNonBlocking(false);
        checkOut7.setExpandable(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final String id = "recipeDesc";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut7.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut9.setAlign(Alignment9.NORTH);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("white");
        element11.setExpandable(false);
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("text");
        element12.setField("name");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("PopupInformation");
        element13.setExpandable(false);
        element13.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        checkOut8.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setDisplaySize(new Dimension(32, 32));
        element14.setExpandable(false);
        checkOut7.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PixmapElement checkOut11 = PixmapElement.checkOut();
        checkOut11.setElementMap(elementMap);
        element14.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("texture");
        element15.setField("iconUrl");
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance4 = element14.getAppearance();
        appearance4.setElementMap(elementMap);
        element14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("modulationColor");
        element16.setField("level");
        appearance4.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setValue("1,1,1");
        element17.setElseValue("1,1,1,0.5");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotCondition element18 = new NotCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final GreaterCondition element19 = new GreaterCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("craft");
        checkOut12.setLocal(true);
        checkOut12.setAttribute("value");
        checkOut12.setField("level");
        element19.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        appearance4.onChildrenAdded();
        element14.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut7.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut13.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 5, 0, 5));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setHorizontal(false);
        checkOut13.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("StyledBoldDark10");
        element20.setExpandable(false);
        element20.setMinWidth(250);
        element20.setMaxWidth(250);
        checkOut13.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element20.getAppearance();
        appearance6.setElementMap(elementMap);
        element20.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("actionDescription");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance7 = element20.getAppearance();
        appearance7.setElementMap(elementMap);
        element20.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("modulationColor");
        element22.setField("level");
        appearance7.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setValue("1,1,1");
        element23.setElseValue("1,1,1,0.5");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final NotCondition element24 = new NotCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final GreaterCondition element25 = new GreaterCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("craft");
        checkOut16.setLocal(true);
        checkOut16.setAttribute("value");
        checkOut16.setField("level");
        element25.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        appearance7.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element26 = new TextView();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("StyledBoldDark10");
        element26.setExpandable(false);
        checkOut13.addBasicElement(element26);
        element26.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element26.getAppearance();
        appearance8.setElementMap(elementMap);
        element26.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("levelText");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance9 = element26.getAppearance();
        appearance9.setElementMap(elementMap);
        element26.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("modulationColor");
        element28.setField("level");
        appearance9.addBasicElement(element28);
        element28.onAttributesInitialized();
        final ConditionResult element29 = new ConditionResult();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setValue("1,1,1");
        element29.setElseValue("1,1,1,0.5");
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final NotCondition element30 = new NotCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final GreaterCondition element31 = new GreaterCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setName("craft");
        checkOut17.setLocal(true);
        checkOut17.setAttribute("value");
        checkOut17.setField("level");
        element31.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        appearance9.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final String id2 = "durationText";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textView);
        }
        textView.setStyle("StyledBoldDark10");
        textView.setExpandable(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(harvestDurationPopup,durationText)");
        textView.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        textView.setOnPopupHide(onPopupHide2);
        checkOut7.addBasicElement(textView);
        textView.onAttributesInitialized();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("text");
        element32.setField("duration");
        textView.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("text");
        element33.setField("duration");
        textView.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final DecoratorAppearance appearance10 = textView.getAppearance();
        appearance10.setElementMap(elementMap);
        textView.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("modulationColor");
        element34.setField("level");
        appearance10.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setValue("1,1,1");
        element35.setElseValue("1,1,1,0.5");
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        final NotCondition element36 = new NotCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final GreaterCondition element37 = new GreaterCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("craft");
        checkOut18.setLocal(true);
        checkOut18.setAttribute("value");
        checkOut18.setField("level");
        element37.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        element37.onChildrenAdded();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        appearance10.onChildrenAdded();
        textView.onChildrenAdded();
        final Image element38 = new Image();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setStyle("tripleCharacterIcon");
        element38.setExpandable(false);
        checkOut7.addBasicElement(element38);
        element38.onAttributesInitialized();
        this.method34(element38);
        this.method35(element38);
        element38.onChildrenAdded();
        checkOut7.onChildrenAdded();
        this.method36(checkOut6);
        this.method37(checkOut6);
        this.method38(checkOut6);
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        this.method39(element);
        this.method45(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("multiple");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final String id = "displayLinkedRecipesButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("yellowSmall");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.crafts:displayRecipesWithIngredient(harvestItem)");
        button.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(displayLinkedRecipesPopup,displayLinkedRecipesButton)");
        button.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        button.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        button.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        button.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("magnifyingGlass");
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(3, 3, 3, 3));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(-2, -2));
        element5.setAlign(Alignment17.CENTER);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("visible");
        element6.setField("canUseAsIngredient");
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "harvestItem";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.crafts:openProducedItemDescription(craftWindow)");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("oddIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recipeDesc)");
        checkOut2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut2.setOnPopupHide(onPopupHide);
        checkOut2.setNonBlocking(false);
        checkOut2.setExpandable(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final String id = "recipeDesc";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("white");
        element8.setExpandable(false);
        checkOut3.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance = element8.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element8.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("name");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("PopupInformation");
        element10.setExpandable(false);
        element10.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        checkOut3.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element10.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element10.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDisplaySize(new Dimension(32, 32));
        element11.setExpandable(false);
        checkOut2.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element11.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("texture");
        element12.setField("iconUrl");
        checkOut6.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final DecoratorAppearance appearance3 = element11.getAppearance();
        appearance3.setElementMap(elementMap);
        element11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("modulationColor");
        element13.setField("level");
        appearance3.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setValue("1,1,1");
        element14.setElseValue("1,1,1,0.5");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final NotCondition element15 = new NotCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final GreaterCondition element16 = new GreaterCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("craft");
        checkOut7.setLocal(true);
        checkOut7.setAttribute("value");
        checkOut7.setField("level");
        element16.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        appearance3.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut8.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 5));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("StyledBoldDark10");
        element17.setExpandable(false);
        element17.setMinWidth(250);
        element17.setMaxWidth(250);
        checkOut8.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element17.getAppearance();
        appearance5.setElementMap(elementMap);
        element17.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("actionDescription");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance6 = element17.getAppearance();
        appearance6.setElementMap(elementMap);
        element17.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("modulationColor");
        element19.setField("level");
        appearance6.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setValue("1,1,1");
        element20.setElseValue("1,1,1,0.5");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final NotCondition element21 = new NotCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final GreaterCondition element22 = new GreaterCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("craft");
        checkOut11.setLocal(true);
        checkOut11.setAttribute("value");
        checkOut11.setField("level");
        element22.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        appearance6.onChildrenAdded();
        element17.onChildrenAdded();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("StyledBoldDark10");
        element23.setExpandable(false);
        checkOut8.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element23.getAppearance();
        appearance7.setElementMap(elementMap);
        element23.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("levelText");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance8 = element23.getAppearance();
        appearance8.setElementMap(elementMap);
        element23.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("modulationColor");
        element25.setField("level");
        appearance8.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setValue("1,1,1");
        element26.setElseValue("1,1,1,0.5");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotCondition element27 = new NotCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final GreaterCondition element28 = new GreaterCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("craft");
        checkOut12.setLocal(true);
        checkOut12.setAttribute("value");
        checkOut12.setField("level");
        element28.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        appearance8.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final String id2 = "durationText";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textView);
        }
        textView.setStyle("StyledBoldDark10");
        textView.setExpandable(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(harvestDurationPopup,durationText)");
        textView.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        textView.setOnPopupHide(onPopupHide2);
        checkOut2.addBasicElement(textView);
        textView.onAttributesInitialized();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element29.setField("duration");
        textView.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("text");
        element30.setField("duration");
        textView.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final DecoratorAppearance appearance9 = textView.getAppearance();
        appearance9.setElementMap(elementMap);
        textView.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("modulationColor");
        element31.setField("level");
        appearance9.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setValue("1,1,1");
        element32.setElseValue("1,1,1,0.5");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final NotCondition element33 = new NotCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final GreaterCondition element34 = new GreaterCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("craft");
        checkOut13.setLocal(true);
        checkOut13.setAttribute("value");
        checkOut13.setField("level");
        element34.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        appearance9.onChildrenAdded();
        textView.onChildrenAdded();
        final Image element35 = new Image();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setStyle("tripleCharacterIcon");
        element35.setExpandable(false);
        checkOut2.addBasicElement(element35);
        element35.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element35.getAppearance();
        appearance10.setElementMap(elementMap);
        element35.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 3, 0, 0));
        appearance10.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance10.onChildrenAdded();
        final ItemElement element36 = new ItemElement();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAttribute("visible");
        element36.setField("multiple");
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Spacer element37 = new Spacer();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        checkOut.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance11 = checkOut15.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 0, 0, 5));
        appearance11.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance11.onChildrenAdded();
        final RowLayoutData element38 = new RowLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setAlign(Alignment9.CENTER);
        checkOut15.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        final StaticLayout element39 = new StaticLayout();
        element39.onCheckOut();
        element39.setAdaptToContentSize(true);
        checkOut15.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final String id3 = "displayLinkedRecipesButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, button);
        }
        button.setStyle("yellowSmall");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.crafts:displayRecipesWithIngredient(harvestItem)");
        button.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(displayLinkedRecipesPopup,displayLinkedRecipesButton)");
        button.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        button.setOnPopupHide(onPopupHide3);
        checkOut15.addBasicElement(button);
        button.onAttributesInitialized();
        this.method40(button);
        button.onChildrenAdded();
        this.method41(checkOut15);
        this.method42(checkOut15);
        checkOut15.onChildrenAdded();
        this.method43(checkOut);
        this.method44(checkOut);
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method41(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("magnifyingGlass");
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(3, 3, 3, 3));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method42(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("canUseAsIngredient");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method43(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element = new PlainBorder();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setColor(new Color(1.0f, 1.0f, 1.0f, 0.4f));
        element.setInsets(new Insets(1, 0, 1, 0));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final PlainBackground element2 = new PlainBackground();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setColor(new Color(1.0f, 1.0f, 1.0f, 0.2f));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method44(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "harvestItem";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method45(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NullCondition element5 = new NullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("oddIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element8 = new PlainBorder();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(1.0f, 1.0f, 1.0f, 0.4f));
        element8.setInsets(new Insets(1, 0, 1, 0));
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PlainBackground element9 = new PlainBackground();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setColor(new Color(1.0f, 1.0f, 1.0f, 0.2f));
        appearance.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method46(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(true);
        checkOut2.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setStyle("characterCreationLeftArrow");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.crafts:previousPage(selectedCraft)");
        element.setOnClick(onClick);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("craft");
        checkOut3.setLocal(true);
        checkOut3.setAttribute("enabled");
        checkOut3.setField("currentPage");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotEqualCondition element3 = new NotEqualCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("0");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("StyledBoldDark12");
        element4.setMinWidth(200);
        element4.setMaxWidth(200);
        element4.setExpandable(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("craft");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("text");
        checkOut4.setField("currentPageText");
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance = element4.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.CENTER);
        element4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element4.onChildrenAdded();
        final Button element5 = new Button();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setExpandable(false);
        element5.setStyle("characterCreationRightArrow");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.crafts:nextPage(selectedCraft)");
        element5.setOnClick(onClick2);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("craft");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("enabled");
        checkOut5.setField("currentPage");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final LessCondition element7 = new LessCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("craft");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("value");
        checkOut6.setField("maxNumPages");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method47(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaPane");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(454, 565));
        element.setXOffset(-10);
        element.setYOffset(1);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method48(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.NORTH);
        element.setYOffset(10);
        element.setXOffset(-8);
        element.setSize(new Dimension(-2, 54));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setDisplaySize(new Dimension(125, 46));
        element3.setStyle("NationDecorator");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("craftHammer");
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.CENTER);
        element6.setYOffset(5);
        element6.setXOffset(0);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method49(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 61, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method50(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method51(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "closeCraftPageDialog";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("close");
        button.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        button.setOnClick(onClick);
        basicElement.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.NORTH_EAST);
        element.setXOffset(-18);
        element.setYOffset(-12);
        button.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        button.onChildrenAdded();
        return button;
    }
    
    public BasicElement method52(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.EAST);
        element.setInitValue(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method53(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "recipesDonePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%craft.recipesDone%".replace("%craft.recipesDone%", Xulor.getInstance().getTranslatedString("craft.recipesDone")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method54(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "displayLinkedRecipesPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%craft.displayLinkedRecipes%".replace("%craft.displayLinkedRecipes%", Xulor.getInstance().getTranslatedString("craft.displayLinkedRecipes")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method55(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "actionDurationPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%craft.actionDuration%".replace("%craft.actionDuration%", Xulor.getInstance().getTranslatedString("craft.actionDuration")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method56(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "recipeLevelPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%craft.recipeLevelDesc%".replace("%craft.recipeLevelDesc%", Xulor.getInstance().getTranslatedString("craft.recipeLevelDesc")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method57(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "recipeSuccessRatePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%craft.recipeRecipeChanceDesc%".replace("%craft.recipeRecipeChanceDesc%", Xulor.getInstance().getTranslatedString("craft.recipeRecipeChanceDesc")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method58(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "switchModePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%craft.switchDisplayMode%".replace("%craft.switchDisplayMode%", Xulor.getInstance().getTranslatedString("craft.switchDisplayMode")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method59(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "harvestDurationPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%harvest.duration%".replace("%harvest.duration%", Xulor.getInstance().getTranslatedString("harvest.duration")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
}
