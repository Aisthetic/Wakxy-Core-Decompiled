package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.framework.graphics.image.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;

public class SpellsDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public SpellsDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "characterBookSpellPageContainer";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.setNonBlocking(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.NORTH_WEST);
        element5.setYOffset(-40);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut3.setHorizontal(false);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("mainCharacterSheet");
        checkOut6.setAttribute("visible");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.CENTER);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.NORTH_WEST);
        element8.setYOffset(-40);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setAlign(Alignment9.NORTH);
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final String id2 = "heroesList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, list);
        }
        list.setAutoIdealSize(true);
        list.setHorizontal(false);
        list.setCellSize(new Dimension(50, 57));
        list.setIdealSizeMaxColumns(1);
        list.setIdealSizeMinColumns(1);
        list.setIdealSizeMaxRows(4);
        list.setIdealSizeMinRows(1);
        checkOut9.addBasicElement(list);
        list.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("visible");
        checkOut11.setName("heroesEnabled");
        list.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("content");
        checkOut12.setName("mainCharacterViewForTemplate");
        list.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ItemRenderer element9 = new ItemRenderer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:selectCompanion(characterBookSpellPageContainer)");
        element9.setOnItemClick(onItemClick);
        final DropOutListener onDropOut = new DropOutListener();
        onDropOut.setCallBackFunc("wakfu.characterBook.spellsPage:dropView");
        element9.setOnDropOut(onDropOut);
        list.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemCondition element11 = new ItemCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final NotNullCondition element12 = new NotNullCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final String id3 = "character";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        element9.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("value");
        data.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        element9.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayout element14 = new StaticLayout();
        element14.onCheckOut();
        element14.setAdaptToContentSize(true);
        checkOut13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final RadioButton element15 = new RadioButton();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("companionSlot");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCompanion)");
        element15.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element15.setOnPopupHide(onPopupHide);
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setSize(new Dimension(100.0f, 100.0f));
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final String id4 = "descCompanion";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element15.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        popupElement.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setHorizontal(false);
        checkOut15.setAlign(Alignment9.NORTH);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white");
        element17.setExpandable(false);
        checkOut14.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance = element17.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element17.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("name");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement.onChildrenAdded();
        element15.onChildrenAdded();
        final String id5 = "dndc";
        final DragNDropContainer dragNDropContainer = new DragNDropContainer();
        dragNDropContainer.onCheckOut();
        dragNDropContainer.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, dragNDropContainer);
        }
        checkOut13.addBasicElement(dragNDropContainer);
        dragNDropContainer.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(-2, -2));
        dragNDropContainer.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(40, 40));
        element20.setNonBlocking(true);
        dragNDropContainer.addBasicElement(element20);
        element20.onAttributesInitialized();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element20.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("texture");
        element21.setField("characterSheetSmallIllustrationUrl");
        checkOut16.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element20.onChildrenAdded();
        dragNDropContainer.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element9.onChildrenAdded();
        list.onChildrenAdded();
        final String id6 = "companionsList";
        final List list2 = new List();
        list2.onCheckOut();
        list2.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, list2);
        }
        list2.setAutoIdealSize(true);
        list2.setHorizontal(false);
        list2.setCellSize(new Dimension(50, 57));
        list2.setIdealSizeMaxColumns(1);
        list2.setIdealSizeMinColumns(1);
        list2.setIdealSizeMaxRows(4);
        list2.setIdealSizeMinRows(1);
        checkOut9.addBasicElement(list2);
        list2.onAttributesInitialized();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setName("companionParty");
        checkOut17.setAttribute("content");
        list2.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final ItemRenderer element22 = new ItemRenderer();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        final ItemClickListener onItemClick2 = new ItemClickListener();
        onItemClick2.setCallBackFunc("wakfu.companionsEmbedded:selectCompanion(characterBookSpellPageContainer)");
        element22.setOnItemClick(onItemClick2);
        final DropOutListener onDropOut2 = new DropOutListener();
        onDropOut2.setCallBackFunc("wakfu.characterBook.spellsPage:dropView");
        element22.setOnDropOut(onDropOut2);
        list2.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ItemCondition element24 = new ItemCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        final String id7 = "companion";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id7 != null) {
            elementMap.add(id7, data2);
        }
        element22.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        data2.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        element22.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final RadioButton element28 = new RadioButton();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("companionSlot");
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(descCompanion)");
        element28.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element28.setOnPopupHide(onPopupHide2);
        checkOut18.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setSize(new Dimension(100.0f, 100.0f));
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final String id8 = "descCompanion";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id8 != null) {
            elementMap.add(id8, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element28.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        popupElement2.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setHorizontal(false);
        checkOut20.setAlign(Alignment9.NORTH);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("white");
        element30.setExpandable(false);
        checkOut19.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element30.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element30.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("name");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut19.onChildrenAdded();
        popupElement2.onChildrenAdded();
        element28.onChildrenAdded();
        final String id9 = "dndc";
        final DragNDropContainer dragNDropContainer2 = new DragNDropContainer();
        dragNDropContainer2.onCheckOut();
        dragNDropContainer2.setElementMap(elementMap);
        if (elementMap != null && id9 != null) {
            elementMap.add(id9, dragNDropContainer2);
        }
        checkOut18.addBasicElement(dragNDropContainer2);
        dragNDropContainer2.onAttributesInitialized();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment17.CENTER);
        element32.setSize(new Dimension(-2, -2));
        dragNDropContainer2.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final Image element33 = new Image();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setDisplaySize(new Dimension(40, 40));
        element33.setNonBlocking(true);
        dragNDropContainer2.addBasicElement(element33);
        element33.onAttributesInitialized();
        final PixmapElement checkOut21 = PixmapElement.checkOut();
        checkOut21.setElementMap(elementMap);
        element33.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("texture");
        element34.setField("smallIconUrl");
        checkOut21.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element33.onChildrenAdded();
        dragNDropContainer2.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element22.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("visible");
        checkOut22.setName("companionPartyExists");
        list2.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        list2.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final String id10 = "heroesManagement";
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        if (elementMap != null && id10 != null) {
            elementMap.add(id10, checkOut23);
        }
        checkOut23.setExpandable(false);
        checkOut7.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        this.method0(checkOut23);
        this.method1(checkOut23);
        this.method2(checkOut23);
        this.method3(checkOut23);
        this.method4(checkOut23);
        checkOut23.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        this.method5(element);
        this.method69(element);
        this.method76(element);
        this.method77(element);
        this.method78(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("heroesEnabled");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("mainCharacterSheet");
        checkOut.setAttribute("visible");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("comparedValue");
        checkOut2.setName("tutorialProperty.display");
        element4.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return null;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RadioButton element = new RadioButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("companionSlot");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descAddHero)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.controlCenter:openCompanionsManagement");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("enabled");
        checkOut.setName("heroesPartyIsFull");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final String id = "descAddHero";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("white");
        element5.setExpandable(false);
        element5.setText("%desc.addHero%".replace("%desc.addHero%", Xulor.getInstance().getTranslatedString("desc.addHero")));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance = element5.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element6 = new TextView();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("white");
        element6.setExpandable(false);
        element6.setText("%desc.tooManyHeroes%".replace("%desc.tooManyHeroes%", Xulor.getInstance().getTranslatedString("desc.tooManyHeroes")));
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("heroesPartyIsFull");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(40, 40));
        element.setNonBlocking(true);
        element.setStyle("AddCompanionIcon");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(-2, -2));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("windowNew");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final WindowMovePoint element3 = new WindowMovePoint();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("titleBar");
        element3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("questionMark");
        element6.setExpandable(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCSpellsRestatPopup)");
        element6.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element6.setOnPopupHide(onPopupHide);
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final String id = "descCSpellsRestatPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.SOUTH);
        popupElement.setHotSpotPosition(Alignment9.NORTH);
        element6.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("white");
        element7.setText("%tooltip.Restat%".replace("%tooltip.Restat%", Xulor.getInstance().getTranslatedString("tooltip.Restat")));
        element7.setMinWidth(1);
        element7.setMaxWidth(250);
        checkOut8.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element7.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        element6.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("StyledBold16White");
        element8.setNonBlocking(true);
        element8.setText("%elementalSpells%".replace("%elementalSpells%", Xulor.getInstance().getTranslatedString("elementalSpells")));
        checkOut6.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element8.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.CENTER);
        element8.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(3, 20, 0, 20));
        appearance5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance5.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut10.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 12, 0, 12));
        appearance6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut12);
        }
        checkOut12.setNonBlocking(false);
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final String id3 = "characterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        checkOut12.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setLocal(true);
        checkOut13.setName("characterSheet");
        checkOut13.setAttribute("value");
        data.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setLocal(true);
        checkOut15.setName("characterSheet");
        checkOut15.setAttribute("visible");
        checkOut15.setField("isCompanion");
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut15.addBasicElement(element9);
        element9.onAttributesInitialized();
        final FalseCondition element10 = new FalseCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(false);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut17.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setNeedsScissor(false);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.WEST);
        checkOut18.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final StaticLayout element13 = new StaticLayout();
        element13.onCheckOut();
        element13.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(50, 45));
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.WEST);
        element14.setXOffset(5);
        checkOut19.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut19.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final PlainBackground element15 = new PlainBackground();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        appearance7.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setAttribute("color");
        checkOut20.setLocal(true);
        checkOut20.setName("characterSheet");
        checkOut20.setField("spellsInventory/element0/color");
        element15.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        element15.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setStyle("caracsBackground");
        checkOut21.setPrefSize(new Dimension(60, 50));
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.WEST);
        checkOut21.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setAlign(Alignment9.WEST);
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setExpandable(false);
        checkOut21.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut23.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut23.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Padding element17 = new Padding();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setInsets(new Insets(0, 6, 0, 0));
        appearance8.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        appearance8.onChildrenAdded();
        final StaticLayout element18 = new StaticLayout();
        element18.onCheckOut();
        element18.setAdaptToContentSize(true);
        checkOut23.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        checkOut23.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment17.CENTER);
        element20.setYOffset(10);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setField("spellsInventory/element0/iconStyleMaster");
        checkOut24.setLocal(true);
        checkOut24.setName("characterSheet");
        checkOut24.setAttribute("style");
        element19.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element19.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("bold");
        checkOut23.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.SOUTH);
        element22.setYOffset(4);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance9 = element21.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlignment(Alignment9.CENTER);
        element21.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        appearance9.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setField("spellsInventory/element0/name");
        checkOut25.setLocal(true);
        checkOut25.setName("characterSheet");
        checkOut25.setAttribute("text");
        element21.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut23.onChildrenAdded();
        checkOut21.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final String id4 = "element0List";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, list);
        }
        list.setCellSize(new Dimension(43, 60));
        list.setPrefSize(new Dimension(215, 60));
        list.setHorizontal(false);
        checkOut17.addBasicElement(list);
        list.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setX(55);
        list.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setAttribute("content");
        checkOut26.setLocal(true);
        checkOut26.setName("characterSheet");
        checkOut26.setField("spellsInventory/element0Spells");
        list.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final ItemRenderer element24 = new ItemRenderer();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription;wakfu.characterBook.spellsPage:addToShortcuts");
        element24.setOnItemClick(onItemClick);
        list.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final AndCondition element26 = new AndCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemCondition element27 = new ItemCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setField("currentLevelPercentage");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final NotNullCondition element28 = new NotNullCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        final ItemCondition element29 = new ItemCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element26.addBasicElement(element29);
        element29.onAttributesInitialized();
        final NotNullCondition element30 = new NotNullCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        final String id5 = "spell";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, data2);
        }
        element24.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("value");
        data2.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(spellPopup)");
        checkOut27.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut27.setOnPopupHide(onPopupHide2);
        checkOut27.setNonBlocking(false);
        element24.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        this.method6(checkOut27);
        this.method7(checkOut27);
        this.method8(checkOut27);
        this.method9(checkOut27);
        checkOut27.onChildrenAdded();
        element24.onChildrenAdded();
        this.method10(list);
        this.method11(list);
        list.onChildrenAdded();
        checkOut17.onChildrenAdded();
        this.method12(checkOut14);
        this.method20(checkOut14);
        this.method27(checkOut14);
        this.method28(checkOut14);
        checkOut14.onChildrenAdded();
        this.method33(checkOut12);
        this.method48(checkOut12);
        checkOut12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        this.method68(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return null;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "spellCell";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        checkOut.setStyle("white");
        checkOut.setPrefSize(new Dimension(48, 0));
        checkOut.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut.setOnMouseExit(onMouseExit);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setXOffset(0);
        element.setSize(new Dimension(48, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DragNDropContainer element3 = new DragNDropContainer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setY(12);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setNonBlocking(true);
        element5.setDisplaySize(new Dimension(38, 38));
        element5.setScaled(true);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance = element5.getAppearance();
        appearance.setElementMap(elementMap);
        element5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element5.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("texture");
        element6.setField("smallIconUrl");
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element5.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("dragEnabled");
        element7.setField("isPassive");
        element3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final FalseCondition element9 = new FalseCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(38, 20));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.SOUTH);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ProgressBar element12 = new ProgressBar();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setUseDecreaseProgressTween(false);
        element12.setStyle("XP2");
        element12.setNonBlocking(false);
        checkOut4.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 10));
        element13.setAlign(Alignment17.CENTER);
        element13.setXOffset(1);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance2 = element12.getAppearance();
        appearance2.setElementMap(elementMap);
        element12.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("progressBar");
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("color");
        checkOut6.setLocal(true);
        checkOut6.setName("characterSheet");
        checkOut6.setField("spellsInventory/element0/color");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("value");
        element14.setField("currentLevelPercentage");
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("ProgressBar");
        checkOut7.setPrefSize(new Dimension(0, 11));
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setSize(new Dimension(100.0f, 11));
        element15.setAlign(Alignment17.CENTER);
        checkOut7.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Label element16 = new Label();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setNonBlocking(true);
        element16.setStyle("blackBold");
        checkOut4.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element16.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element16.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setYOffset(1);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("levelTextShort");
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("modulationColor");
        checkOut8.setField("spell/id");
        checkOut8.setLocal(true);
        checkOut8.setName("describedSpell");
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setValue("0.4f,0.5f,0.62f,1f");
        element19.setElseValue("1f,1f,1f,1f");
        checkOut8.addBasicElement(element19);
        element19.onAttributesInitialized();
        final String id2 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, equalCondition);
        }
        element19.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("value");
        element20.setField("spell/id");
        equalCondition.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(38, 38));
        element.setYOffset(5);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element2 = new PlainBackground();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("visible");
        element3.setField("isLocked");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("lock");
        element4.setNonBlocking(true);
        element4.setDisplaySize(new Dimension(38, 38));
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance = element6.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut4);
        }
        checkOut4.setStyle("white");
        checkOut4.setPrefSize(new Dimension(48, 0));
        checkOut4.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut4.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut4.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setXOffset(0);
        element9.setSize(new Dimension(48, 100.0f));
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DragNDropContainer element11 = new DragNDropContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDragEnabled(false);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setY(12);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setDisplaySize(new Dimension(38, 38));
        element13.setScaled(true);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element13.getAppearance();
        appearance2.setElementMap(elementMap);
        element13.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 5, 5, 5));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element13.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(38, 20));
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        checkOut7.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("ProgressBar");
        checkOut8.setPrefSize(new Dimension(0, 11));
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 11));
        element17.setAlign(Alignment17.CENTER);
        checkOut8.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BlackTransparency");
        checkOut4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.CENTER);
        element18.setSize(new Dimension(38, 51));
        element18.setYOffset(-1);
        checkOut9.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("modulationColor");
        checkOut10.setField("spell/id");
        checkOut10.setLocal(true);
        checkOut10.setName("describedSpell");
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setValue("0.4f,0.5f,0.62f,1f");
        element19.setElseValue("1f,1f,1f,1f");
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element19.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("value");
        element20.setField("spell/id");
        equalCondition.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NullCondition element4 = new NullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final String id = "spellCell";
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut2);
        }
        checkOut2.setStyle("white");
        checkOut2.setPrefSize(new Dimension(48, 0));
        checkOut2.setNonBlocking(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.CENTER);
        element6.setXOffset(0);
        element6.setSize(new Dimension(48, 100.0f));
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DragNDropContainer element8 = new DragNDropContainer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setDragEnabled(false);
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(-2, -2));
        element9.setY(12);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element10.setDisplaySize(new Dimension(38, 38));
        element10.setScaled(true);
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance = element10.getAppearance();
        appearance.setElementMap(elementMap);
        element10.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(38, 20));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.SOUTH);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final StaticLayout element12 = new StaticLayout();
        element12.onCheckOut();
        element12.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("ProgressBar");
        checkOut5.setPrefSize(new Dimension(0, 11));
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 11));
        element13.setAlign(Alignment17.CENTER);
        checkOut5.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("BlackTransparency");
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.CENTER);
        element14.setSize(new Dimension(38, 51));
        element14.setYOffset(-1);
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut2.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(0.7f, 0.7f, 0.7f, 1.0f));
        checkOut2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setNeedsScissor(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.WEST);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(50, 45));
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element4.setXOffset(5);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("color");
        checkOut4.setLocal(true);
        checkOut4.setName("characterSheet");
        checkOut4.setField("spellsInventory/element1/color");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("caracsBackground");
        checkOut5.setPrefSize(new Dimension(60, 50));
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.WEST);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(0, 6, 0, 0));
        appearance2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setYOffset(10);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setField("spellsInventory/element1/iconStyleMaster");
        checkOut8.setLocal(true);
        checkOut8.setName("characterSheet");
        checkOut8.setAttribute("style");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("bold");
        checkOut7.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.SOUTH);
        element12.setYOffset(4);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance3 = element11.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setField("spellsInventory/element1/name");
        checkOut9.setLocal(true);
        checkOut9.setName("characterSheet");
        checkOut9.setAttribute("text");
        element11.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final String id = "element1List";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(43, 60));
        list.setPrefSize(new Dimension(215, 60));
        list.setHorizontal(false);
        checkOut.addBasicElement(list);
        list.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setX(55);
        list.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("content");
        checkOut10.setLocal(true);
        checkOut10.setName("characterSheet");
        checkOut10.setField("spellsInventory/element1Spells");
        list.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ItemRenderer element14 = new ItemRenderer();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription;wakfu.characterBook.spellsPage:addToShortcuts");
        element14.setOnItemClick(onItemClick);
        list.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final AndCondition element16 = new AndCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ItemCondition element17 = new ItemCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setField("currentLevelPercentage");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final ItemCondition element19 = new ItemCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element16.addBasicElement(element19);
        element19.onAttributesInitialized();
        final NotNullCondition element20 = new NotNullCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final String id2 = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        element14.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("value");
        data.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut11.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut11.setOnPopupHide(onPopupHide);
        checkOut11.setNonBlocking(false);
        element14.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final String id3 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut11.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        checkOut12.setNonBlocking(false);
        popupElement.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final BorderLayoutData checkOut13 = BorderLayoutData.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setData(BorderLayoutData.Values.CENTER);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("PopupInformation");
        checkOut12.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element22.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element22.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("name");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        checkOut11.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final String id4 = "spellCell";
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, checkOut14);
        }
        checkOut14.setStyle("white");
        checkOut14.setPrefSize(new Dimension(48, 0));
        checkOut14.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut14.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut14.setOnMouseExit(onMouseExit);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment17.CENTER);
        element25.setXOffset(0);
        element25.setSize(new Dimension(48, 100.0f));
        checkOut14.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final StaticLayout element26 = new StaticLayout();
        element26.onCheckOut();
        checkOut14.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DragNDropContainer element27 = new DragNDropContainer();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        checkOut14.addBasicElement(element27);
        element27.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setSize(new Dimension(-2, -2));
        element28.setY(12);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final Image element29 = new Image();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setNonBlocking(true);
        element29.setDisplaySize(new Dimension(38, 38));
        element29.setScaled(true);
        element27.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element29.getAppearance();
        appearance5.setElementMap(elementMap);
        element29.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(5, 5, 5, 5));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element29.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("texture");
        element30.setField("smallIconUrl");
        checkOut16.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element29.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("dragEnabled");
        element31.setField("isPassive");
        element27.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final FalseCondition element33 = new FalseCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element27.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setExpandable(false);
        checkOut17.setPrefSize(new Dimension(38, 20));
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element34 = new StaticLayoutData();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAlign(Alignment17.SOUTH);
        checkOut17.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final StaticLayout element35 = new StaticLayout();
        element35.onCheckOut();
        element35.setAdaptToContentSize(true);
        checkOut17.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final ProgressBar element36 = new ProgressBar();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setUseDecreaseProgressTween(false);
        element36.setStyle("XP2");
        element36.setNonBlocking(false);
        checkOut17.addBasicElement(element36);
        element36.onAttributesInitialized();
        final StaticLayoutData element37 = new StaticLayoutData();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setSize(new Dimension(100.0f, 10));
        element37.setAlign(Alignment17.CENTER);
        element37.setXOffset(1);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final DecoratorAppearance appearance6 = element36.getAppearance();
        appearance6.setElementMap(elementMap);
        element36.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("progressBar");
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("color");
        checkOut19.setLocal(true);
        checkOut19.setName("characterSheet");
        checkOut19.setField("spellsInventory/element1/color");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        checkOut18.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element38 = new ItemElement();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setAttribute("value");
        element38.setField("currentLevelPercentage");
        element36.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        element36.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setStyle("ProgressBar");
        checkOut20.setPrefSize(new Dimension(0, 11));
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element39 = new StaticLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setSize(new Dimension(100.0f, 11));
        element39.setAlign(Alignment17.CENTER);
        checkOut20.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final Label element40 = new Label();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setNonBlocking(true);
        element40.setStyle("blackBold");
        checkOut17.addBasicElement(element40);
        element40.onAttributesInitialized();
        this.method13(element40);
        this.method14(element40);
        this.method15(element40);
        element40.onChildrenAdded();
        checkOut17.onChildrenAdded();
        this.method16(checkOut14);
        checkOut14.onChildrenAdded();
        this.method17(checkOut11);
        checkOut11.onChildrenAdded();
        element14.onChildrenAdded();
        this.method18(list);
        this.method19(list);
        list.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setYOffset(1);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("levelTextShort");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("modulationColor");
        checkOut.setField("spell/id");
        checkOut.setLocal(true);
        checkOut.setName("describedSpell");
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("0.4f,0.5f,0.62f,1f");
        element.setElseValue("1f,1f,1f,1f");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, equalCondition);
        }
        element.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("value");
        element2.setField("spell/id");
        equalCondition.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(38, 38));
        element.setYOffset(5);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element2 = new PlainBackground();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("visible");
        element3.setField("isLocked");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("lock");
        element4.setNonBlocking(true);
        element4.setDisplaySize(new Dimension(38, 38));
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance = element6.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut4);
        }
        checkOut4.setStyle("white");
        checkOut4.setPrefSize(new Dimension(48, 0));
        checkOut4.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut4.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut4.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setXOffset(0);
        element9.setSize(new Dimension(48, 100.0f));
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DragNDropContainer element11 = new DragNDropContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDragEnabled(false);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setY(12);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setDisplaySize(new Dimension(38, 38));
        element13.setScaled(true);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element13.getAppearance();
        appearance2.setElementMap(elementMap);
        element13.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 5, 5, 5));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element13.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(38, 20));
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        checkOut7.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("ProgressBar");
        checkOut8.setPrefSize(new Dimension(0, 11));
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 11));
        element17.setAlign(Alignment17.CENTER);
        checkOut8.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BlackTransparency");
        checkOut4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.CENTER);
        element18.setSize(new Dimension(38, 51));
        element18.setYOffset(-1);
        checkOut9.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("modulationColor");
        checkOut10.setField("spell/id");
        checkOut10.setLocal(true);
        checkOut10.setName("describedSpell");
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setValue("0.4f,0.5f,0.62f,1f");
        element19.setElseValue("1f,1f,1f,1f");
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element19.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("value");
        element20.setField("spell/id");
        equalCondition.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NullCondition element4 = new NullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final String id = "spellCell";
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut2);
        }
        checkOut2.setStyle("white");
        checkOut2.setPrefSize(new Dimension(48, 0));
        checkOut2.setNonBlocking(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.CENTER);
        element6.setXOffset(0);
        element6.setSize(new Dimension(48, 100.0f));
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DragNDropContainer element8 = new DragNDropContainer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setDragEnabled(false);
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(-2, -2));
        element9.setY(12);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element10.setDisplaySize(new Dimension(38, 38));
        element10.setScaled(true);
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance = element10.getAppearance();
        appearance.setElementMap(elementMap);
        element10.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(38, 20));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.SOUTH);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final StaticLayout element12 = new StaticLayout();
        element12.onCheckOut();
        element12.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("ProgressBar");
        checkOut5.setPrefSize(new Dimension(0, 11));
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 11));
        element13.setAlign(Alignment17.CENTER);
        checkOut5.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("BlackTransparency");
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.CENTER);
        element14.setSize(new Dimension(38, 51));
        element14.setYOffset(-1);
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut2.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(0.7f, 0.7f, 0.7f, 1.0f));
        checkOut2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setNeedsScissor(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.WEST);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(50, 45));
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element4.setXOffset(5);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("color");
        checkOut4.setLocal(true);
        checkOut4.setName("characterSheet");
        checkOut4.setField("spellsInventory/element2/color");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("caracsBackground");
        checkOut5.setPrefSize(new Dimension(60, 50));
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.WEST);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(0, 6, 0, 0));
        appearance2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setYOffset(10);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setField("spellsInventory/element2/iconStyleMaster");
        checkOut8.setLocal(true);
        checkOut8.setName("characterSheet");
        checkOut8.setAttribute("style");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("bold");
        checkOut7.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.SOUTH);
        element12.setYOffset(4);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance3 = element11.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setField("spellsInventory/element2/name");
        checkOut9.setLocal(true);
        checkOut9.setName("characterSheet");
        checkOut9.setAttribute("text");
        element11.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final String id = "element2List";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(43, 60));
        list.setPrefSize(new Dimension(215, 60));
        list.setHorizontal(false);
        checkOut.addBasicElement(list);
        list.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setX(55);
        list.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("content");
        checkOut10.setLocal(true);
        checkOut10.setName("characterSheet");
        checkOut10.setField("spellsInventory/element2Spells");
        list.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ItemRenderer element14 = new ItemRenderer();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription;wakfu.characterBook.spellsPage:addToShortcuts");
        element14.setOnItemClick(onItemClick);
        list.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final AndCondition element16 = new AndCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ItemCondition element17 = new ItemCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setField("currentLevelPercentage");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final ItemCondition element19 = new ItemCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element16.addBasicElement(element19);
        element19.onAttributesInitialized();
        final NotNullCondition element20 = new NotNullCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final String id2 = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        element14.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("value");
        data.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut11.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut11.setOnPopupHide(onPopupHide);
        checkOut11.setNonBlocking(false);
        element14.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final String id3 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut11.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        popupElement.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final BorderLayoutData checkOut13 = BorderLayoutData.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setData(BorderLayoutData.Values.CENTER);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("PopupInformation");
        checkOut12.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element22.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element22.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("name");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        checkOut11.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final String id4 = "spellCell";
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, checkOut14);
        }
        checkOut14.setStyle("white");
        checkOut14.setPrefSize(new Dimension(48, 0));
        checkOut14.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut14.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut14.setOnMouseExit(onMouseExit);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment17.CENTER);
        element25.setXOffset(0);
        element25.setSize(new Dimension(48, 100.0f));
        checkOut14.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final StaticLayout element26 = new StaticLayout();
        element26.onCheckOut();
        checkOut14.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DragNDropContainer element27 = new DragNDropContainer();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        checkOut14.addBasicElement(element27);
        element27.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setSize(new Dimension(-2, -2));
        element28.setY(12);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final Image element29 = new Image();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setNonBlocking(true);
        element29.setDisplaySize(new Dimension(38, 38));
        element29.setScaled(true);
        element27.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element29.getAppearance();
        appearance5.setElementMap(elementMap);
        element29.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(5, 5, 5, 5));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element29.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("texture");
        element30.setField("smallIconUrl");
        checkOut16.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element29.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("dragEnabled");
        element31.setField("isPassive");
        element27.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final FalseCondition element33 = new FalseCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element27.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setExpandable(false);
        checkOut17.setPrefSize(new Dimension(38, 20));
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element34 = new StaticLayoutData();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAlign(Alignment17.SOUTH);
        checkOut17.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final StaticLayout element35 = new StaticLayout();
        element35.onCheckOut();
        element35.setAdaptToContentSize(true);
        checkOut17.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final ProgressBar element36 = new ProgressBar();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setUseDecreaseProgressTween(false);
        element36.setStyle("XP2");
        element36.setNonBlocking(false);
        checkOut17.addBasicElement(element36);
        element36.onAttributesInitialized();
        final StaticLayoutData element37 = new StaticLayoutData();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setSize(new Dimension(100.0f, 10));
        element37.setAlign(Alignment17.CENTER);
        element37.setXOffset(1);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final DecoratorAppearance appearance6 = element36.getAppearance();
        appearance6.setElementMap(elementMap);
        element36.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("progressBar");
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("color");
        checkOut19.setLocal(true);
        checkOut19.setName("characterSheet");
        checkOut19.setField("spellsInventory/element2/color");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        checkOut18.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element38 = new ItemElement();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setAttribute("value");
        element38.setField("currentLevelPercentage");
        element36.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        element36.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setStyle("ProgressBar");
        checkOut20.setPrefSize(new Dimension(0, 11));
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element39 = new StaticLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setSize(new Dimension(100.0f, 11));
        element39.setAlign(Alignment17.CENTER);
        checkOut20.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final Label element40 = new Label();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setNonBlocking(true);
        element40.setStyle("blackBold");
        checkOut17.addBasicElement(element40);
        element40.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element40.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.CENTER);
        element40.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        this.method21(element40);
        this.method22(element40);
        element40.onChildrenAdded();
        checkOut17.onChildrenAdded();
        this.method23(checkOut14);
        checkOut14.onChildrenAdded();
        this.method24(checkOut11);
        checkOut11.onChildrenAdded();
        element14.onChildrenAdded();
        this.method25(list);
        this.method26(list);
        list.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setYOffset(1);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("levelTextShort");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("modulationColor");
        checkOut.setField("spell/id");
        checkOut.setLocal(true);
        checkOut.setName("describedSpell");
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("0.4f,0.5f,0.62f,1f");
        element.setElseValue("1f,1f,1f,1f");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, equalCondition);
        }
        element.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("value");
        element2.setField("spell/id");
        equalCondition.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(38, 38));
        element.setYOffset(5);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element2 = new PlainBackground();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("visible");
        element3.setField("isLocked");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("lock");
        element4.setNonBlocking(true);
        element4.setDisplaySize(new Dimension(38, 38));
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance = element6.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut4);
        }
        checkOut4.setStyle("white");
        checkOut4.setPrefSize(new Dimension(48, 0));
        checkOut4.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut4.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut4.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setXOffset(0);
        element9.setSize(new Dimension(48, 100.0f));
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DragNDropContainer element11 = new DragNDropContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDragEnabled(false);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setY(12);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setDisplaySize(new Dimension(38, 38));
        element13.setScaled(true);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element13.getAppearance();
        appearance2.setElementMap(elementMap);
        element13.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 5, 5, 5));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element13.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(38, 20));
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        checkOut7.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("ProgressBar");
        checkOut8.setPrefSize(new Dimension(0, 11));
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 11));
        element17.setAlign(Alignment17.CENTER);
        checkOut8.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BlackTransparency");
        checkOut4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.CENTER);
        element18.setSize(new Dimension(38, 51));
        element18.setYOffset(-1);
        checkOut9.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("modulationColor");
        checkOut10.setField("spell/id");
        checkOut10.setLocal(true);
        checkOut10.setName("describedSpell");
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setValue("0.4f,0.5f,0.62f,1f");
        element19.setElseValue("1f,1f,1f,1f");
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element19.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("value");
        element20.setField("spell/id");
        equalCondition.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NullCondition element4 = new NullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final String id = "spellCell";
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut2);
        }
        checkOut2.setStyle("white");
        checkOut2.setPrefSize(new Dimension(48, 0));
        checkOut2.setNonBlocking(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.CENTER);
        element6.setXOffset(0);
        element6.setSize(new Dimension(48, 100.0f));
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DragNDropContainer element8 = new DragNDropContainer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setDragEnabled(false);
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(-2, -2));
        element9.setY(12);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element10.setDisplaySize(new Dimension(38, 38));
        element10.setScaled(true);
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance = element10.getAppearance();
        appearance.setElementMap(elementMap);
        element10.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(38, 20));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.SOUTH);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final StaticLayout element12 = new StaticLayout();
        element12.onCheckOut();
        element12.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("ProgressBar");
        checkOut5.setPrefSize(new Dimension(0, 11));
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 11));
        element13.setAlign(Alignment17.CENTER);
        checkOut5.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("BlackTransparency");
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.CENTER);
        element14.setSize(new Dimension(38, 51));
        element14.setYOffset(-1);
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut2.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(0.7f, 0.7f, 0.7f, 1.0f));
        checkOut2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("titleBar");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.CENTER);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(2, 0, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("StyledBold16White");
        element4.setNonBlocking(true);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.CENTER);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setField("breedInfo/supportSpellsText");
        checkOut5.setLocal(true);
        checkOut5.setName("characterSheet");
        checkOut5.setAttribute("text");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setNeedsScissor(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.WEST);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(50, 90));
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element4.setXOffset(5);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("color");
        checkOut4.setLocal(true);
        checkOut4.setName("characterSheet");
        checkOut4.setField("spellsInventory/elementSupport/color");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("caracsBackground");
        checkOut5.setPrefSize(new Dimension(60, 100));
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.WEST);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(0, 6, 0, 0));
        appearance2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setYOffset(10);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setField("spellsInventory/elementSupport/iconStyleMaster");
        checkOut8.setLocal(true);
        checkOut8.setName("characterSheet");
        checkOut8.setAttribute("style");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("bold");
        checkOut7.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.SOUTH);
        element12.setYOffset(4);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance3 = element11.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.SOUTH);
        element13.setYOffset(29);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setField("spellsInventory/elementSupport/name");
        checkOut9.setLocal(true);
        checkOut9.setName("characterSheet");
        checkOut9.setAttribute("text");
        element11.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final String id = "elementSupportList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(43, 60));
        list.setPrefSize(new Dimension(215, 120));
        list.setHorizontal(false);
        checkOut.addBasicElement(list);
        list.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setX(55);
        list.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("content");
        checkOut10.setLocal(true);
        checkOut10.setName("characterSheet");
        checkOut10.setField("spellsInventory/elementSupportSpells");
        list.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ItemRenderer element15 = new ItemRenderer();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription;wakfu.characterBook.spellsPage:addToShortcuts");
        element15.setOnItemClick(onItemClick);
        list.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final AndCondition element17 = new AndCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ItemCondition element18 = new ItemCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setField("currentLevelPercentage");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final NotNullCondition element19 = new NotNullCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final ItemCondition element20 = new ItemCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element17.addBasicElement(element20);
        element20.onAttributesInitialized();
        final NotNullCondition element21 = new NotNullCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        final String id2 = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        element15.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("value");
        data.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut11.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut11.setOnPopupHide(onPopupHide);
        checkOut11.setNonBlocking(false);
        element15.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final String id3 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut11.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        popupElement.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final BorderLayoutData checkOut13 = BorderLayoutData.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setData(BorderLayoutData.Values.CENTER);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element23 = new Label();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("PopupInformation");
        checkOut12.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element23.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element23.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element25 = new StaticLayout();
        element25.onCheckOut();
        checkOut11.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final String id4 = "spellCell";
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, checkOut14);
        }
        checkOut14.setStyle("white");
        checkOut14.setPrefSize(new Dimension(48, 0));
        checkOut14.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut14.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut14.setOnMouseExit(onMouseExit);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment17.CENTER);
        element26.setXOffset(0);
        element26.setSize(new Dimension(48, 100.0f));
        checkOut14.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        checkOut14.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DragNDropContainer element28 = new DragNDropContainer();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setDragEnabled(true);
        checkOut14.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setSize(new Dimension(-2, -2));
        element29.setY(12);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final Image element30 = new Image();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setNonBlocking(true);
        element30.setDisplaySize(new Dimension(38, 38));
        element30.setScaled(true);
        element28.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element30.getAppearance();
        appearance5.setElementMap(elementMap);
        element30.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(5, 5, 5, 5));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element30.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("texture");
        element31.setField("smallIconUrl");
        checkOut16.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element30.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("dragEnabled");
        element32.setField("isPassive");
        element28.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ConditionResult element33 = new ConditionResult();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final FalseCondition element34 = new FalseCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element28.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setExpandable(false);
        checkOut17.setPrefSize(new Dimension(38, 20));
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element35 = new StaticLayoutData();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAlign(Alignment17.SOUTH);
        checkOut17.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final StaticLayout element36 = new StaticLayout();
        element36.onCheckOut();
        element36.setAdaptToContentSize(true);
        checkOut17.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final ProgressBar element37 = new ProgressBar();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setUseDecreaseProgressTween(false);
        element37.setStyle("XP2");
        element37.setNonBlocking(false);
        checkOut17.addBasicElement(element37);
        element37.onAttributesInitialized();
        final StaticLayoutData element38 = new StaticLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setSize(new Dimension(100.0f, 10));
        element38.setAlign(Alignment17.CENTER);
        element38.setXOffset(1);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        final DecoratorAppearance appearance6 = element37.getAppearance();
        appearance6.setElementMap(elementMap);
        element37.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("progressBar");
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("color");
        checkOut19.setLocal(true);
        checkOut19.setName("characterSheet");
        checkOut19.setField("spellsInventory/elementSupport/color");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        checkOut18.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element39 = new ItemElement();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setAttribute("value");
        element39.setField("currentLevelPercentage");
        element37.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        element37.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setStyle("ProgressBar");
        checkOut20.setPrefSize(new Dimension(0, 11));
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element40 = new StaticLayoutData();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setSize(new Dimension(100.0f, 11));
        element40.setAlign(Alignment17.CENTER);
        checkOut20.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        checkOut20.onChildrenAdded();
        this.method29(checkOut17);
        checkOut17.onChildrenAdded();
        this.method30(checkOut14);
        checkOut14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element15.onChildrenAdded();
        this.method31(list);
        this.method32(list);
        list.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setStyle("blackBold");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setYOffset(1);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("text");
        element3.setField("levelTextShort");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("modulationColor");
        checkOut.setField("spell/id");
        checkOut.setLocal(true);
        checkOut.setName("describedSpell");
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("0.4f,0.5f,0.62f,1f");
        element.setElseValue("1f,1f,1f,1f");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, equalCondition);
        }
        element.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("value");
        element2.setField("spell/id");
        equalCondition.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance = element6.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut4);
        }
        checkOut4.setStyle("white");
        checkOut4.setPrefSize(new Dimension(48, 0));
        checkOut4.setNonBlocking(false);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut4.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut4.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setXOffset(0);
        element9.setSize(new Dimension(48, 100.0f));
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DragNDropContainer element11 = new DragNDropContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDragEnabled(false);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setY(12);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setDisplaySize(new Dimension(38, 38));
        element13.setScaled(true);
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element13.getAppearance();
        appearance2.setElementMap(elementMap);
        element13.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 5, 5, 5));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element13.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(38, 20));
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        checkOut7.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("ProgressBar");
        checkOut8.setPrefSize(new Dimension(0, 11));
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 11));
        element17.setAlign(Alignment17.CENTER);
        checkOut8.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("BlackTransparency");
        checkOut4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.CENTER);
        element18.setSize(new Dimension(38, 51));
        element18.setYOffset(-1);
        checkOut9.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("modulationColor");
        checkOut10.setField("spell/id");
        checkOut10.setLocal(true);
        checkOut10.setName("describedSpell");
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setValue("0.4f,0.5f,0.62f,1f");
        element19.setElseValue("1f,1f,1f,1f");
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element19.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("value");
        element20.setField("spell/id");
        equalCondition.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NullCondition element4 = new NullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final String id = "spellCell";
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut2);
        }
        checkOut2.setStyle("white");
        checkOut2.setPrefSize(new Dimension(48, 0));
        checkOut2.setNonBlocking(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.CENTER);
        element6.setXOffset(0);
        element6.setSize(new Dimension(48, 100.0f));
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DragNDropContainer element8 = new DragNDropContainer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setDragEnabled(false);
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(-2, -2));
        element9.setY(12);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element10.setDisplaySize(new Dimension(38, 38));
        element10.setScaled(true);
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance = element10.getAppearance();
        appearance.setElementMap(elementMap);
        element10.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(38, 20));
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.SOUTH);
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final StaticLayout element12 = new StaticLayout();
        element12.onCheckOut();
        element12.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("ProgressBar");
        checkOut5.setPrefSize(new Dimension(0, 11));
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 11));
        element13.setAlign(Alignment17.CENTER);
        checkOut5.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("BlackTransparency");
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.CENTER);
        element14.setSize(new Dimension(38, 51));
        element14.setYOffset(-1);
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut2.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(0.7f, 0.7f, 0.7f, 1.0f));
        checkOut2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("characterSheet");
        checkOut2.setAttribute("visible");
        checkOut2.setField("isCompanion");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("white");
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(10, 10, 10, 10));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(62, 143));
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element4.setYOffset(-5);
        checkOut5.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(0, 4, 0, 0));
        appearance2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("MultimanVerticalLeftSpellsDecorator");
        element6.setDisplaySize(new Dimension(62, 143));
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(62, 143));
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.EAST);
        element7.setYOffset(-5);
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(0, 0, 0, 4));
        appearance3.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("MultimanVerticalRightSpellsDecorator");
        element9.setDisplaySize(new Dimension(62, 143));
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut7.setStyle("CompanionsSpells");
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setSize(new Dimension(-2, 100.0f));
        checkOut7.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut7.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element11 = new Padding();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setInsets(new Insets(0, 10, 10, 10));
        appearance4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(4, 0, 40, 0));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut9.setAlign(Alignment9.NORTH);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap);
        element12.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setLocal(true);
        checkOut11.setName("characterSheet");
        checkOut11.setAttribute("texture");
        checkOut11.setField("spellsIllustrationUrl");
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setStyle("dimensionalBagRoomManagerCell");
        checkOut12.setNonBlocking(true);
        checkOut3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.SOUTH);
        element13.setSize(new Dimension(186, 106));
        checkOut12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut12.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 30, 0));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setNonBlocking(true);
        checkOut3.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.SOUTH);
        checkOut14.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut14.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 0, 75, 0));
        appearance6.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id = "animatedElementViewer";
        final AnimatedElementViewer animatedElementViewer = new AnimatedElementViewer();
        animatedElementViewer.onCheckOut();
        animatedElementViewer.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, animatedElementViewer);
        }
        animatedElementViewer.setScale(2.0f);
        animatedElementViewer.setAnimName("AnimStatique");
        animatedElementViewer.setDirection(3);
        animatedElementViewer.setNonBlocking(true);
        checkOut14.addBasicElement(animatedElementViewer);
        animatedElementViewer.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setLocal(true);
        checkOut16.setName("characterSheet");
        checkOut16.setAttribute("animatedElement");
        checkOut16.setField("actorDescriptorLibrary");
        animatedElementViewer.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setLocal(true);
        checkOut17.setName("characterSheet");
        checkOut17.setAttribute("equipment");
        checkOut17.setField("actorEquipment");
        animatedElementViewer.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setLocal(true);
        checkOut18.setName("characterSheet");
        checkOut18.setAttribute("scale");
        checkOut18.setField("actorStandardScale");
        animatedElementViewer.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        animatedElementViewer.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final String id2 = "characterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut3.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setLocal(true);
        checkOut19.setName("characterSheet");
        checkOut19.setAttribute("value");
        data.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.SOUTH);
        element15.setSize(new Dimension(100.0f, 100.0f));
        checkOut20.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut21.setAlign(Alignment9.SOUTH);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut20.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(0, 0, 5, 0));
        appearance7.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance7.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setExpandable(false);
        checkOut20.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setExpandable(false);
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.WEST);
        checkOut24.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final RowLayout checkOut25 = RowLayout.checkOut();
        checkOut25.setHorizontal(false);
        checkOut25.setAlign(Alignment9.SOUTH);
        checkOut24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final RenderableContainer element17 = new RenderableContainer();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setExpandable(false);
        element17.setPrefSize(new Dimension(48, 44));
        checkOut24.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element17.getAppearance();
        appearance8.setElementMap(elementMap);
        element17.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(0, 4, 5, 5));
        appearance8.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setLocal(true);
        checkOut27.setName("characterSheet");
        checkOut27.setAttribute("content");
        checkOut27.setField("spellsInventory/spell7");
        element17.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final ItemRenderer element18 = new ItemRenderer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element18.setOnItemClick(onItemClick);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ItemCondition element20 = new ItemCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final NotNullCondition element21 = new NotNullCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final String id3 = "spell";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        element18.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("value");
        data2.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut28.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut28.setOnPopupHide(onPopupHide);
        checkOut28.setNonBlocking(false);
        element18.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final DecoratorAppearance appearance9 = checkOut28.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut28.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut29 = Margin.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setInsets(new Insets(0, 5, 5, 5));
        appearance9.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        appearance9.onChildrenAdded();
        final String id4 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut28.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setPrefSize(new Dimension(10, 0));
        checkOut30.setStyle("popup");
        popupElement.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final BorderLayoutData checkOut31 = BorderLayoutData.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setData(BorderLayoutData.Values.CENTER);
        checkOut30.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final Label element23 = new Label();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("PopupInformation");
        checkOut30.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element23.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlignment(Alignment9.WEST);
        element23.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut30.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id5 = "spellCell";
        final Container checkOut32 = Container.checkOut();
        checkOut32.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, checkOut32);
        }
        checkOut32.setNonBlocking(false);
        checkOut32.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut32.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut32.setOnMouseExit(onMouseExit);
        checkOut28.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        final StaticLayout element25 = new StaticLayout();
        element25.onCheckOut();
        checkOut32.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        this.method34(checkOut32);
        this.method35(checkOut32);
        checkOut32.onChildrenAdded();
        checkOut28.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        this.method36(checkOut24);
        this.method37(checkOut24);
        checkOut24.onChildrenAdded();
        this.method38(checkOut23);
        this.method39(checkOut23);
        checkOut23.onChildrenAdded();
        this.method42(checkOut20);
        checkOut20.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("modulationColor");
        checkOut.setField("spell/id");
        checkOut.setLocal(true);
        checkOut.setName("describedSpell");
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("0.4f,0.5f,0.62f,1f");
        element.setElseValue("1f,1f,1f,1f");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, equalCondition);
        }
        element.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("value");
        element2.setField("spell/id");
        equalCondition.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setScaled(true);
        element.setDisplaySize(new Dimension(31, 31));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("texture");
        element3.setField("smallIconUrl");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RenderableContainer element = new RenderableContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setPrefSize(new Dimension(48, 44));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 4, 5, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("characterSheet");
        checkOut2.setAttribute("content");
        checkOut2.setField("spellsInventory/spell6");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element2.setOnItemClick(onItemClick);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element2.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut3.setOnPopupHide(onPopupHide);
        checkOut3.setNonBlocking(false);
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 5, 5));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final BorderLayoutData checkOut6 = BorderLayoutData.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setData(BorderLayoutData.Values.CENTER);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("name");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut7);
        }
        checkOut7.setNonBlocking(false);
        checkOut7.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut7.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut7.setOnMouseExit(onMouseExit);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut7.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("modulationColor");
        checkOut8.setField("spell/id");
        checkOut8.setLocal(true);
        checkOut8.setName("describedSpell");
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0.4f,0.5f,0.62f,1f");
        element10.setElseValue("1f,1f,1f,1f");
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element10.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("spell/id");
        equalCondition.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setScaled(true);
        element12.setDisplaySize(new Dimension(31, 31));
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element12.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RenderableContainer element = new RenderableContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setPrefSize(new Dimension(48, 44));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 4, 5, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("characterSheet");
        checkOut2.setAttribute("content");
        checkOut2.setField("spellsInventory/spell5");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element2.setOnItemClick(onItemClick);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element2.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut3.setOnPopupHide(onPopupHide);
        checkOut3.setNonBlocking(false);
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 5, 5));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final BorderLayoutData checkOut6 = BorderLayoutData.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setData(BorderLayoutData.Values.CENTER);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("name");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut7);
        }
        checkOut7.setNonBlocking(false);
        checkOut7.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut7.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut7.setOnMouseExit(onMouseExit);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut7.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("modulationColor");
        checkOut8.setField("spell/id");
        checkOut8.setLocal(true);
        checkOut8.setName("describedSpell");
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0.4f,0.5f,0.62f,1f");
        element10.setElseValue("1f,1f,1f,1f");
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element10.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("spell/id");
        equalCondition.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setScaled(true);
        element12.setDisplaySize(new Dimension(31, 31));
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element12.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.EAST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.SOUTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final RenderableContainer element2 = new RenderableContainer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setExpandable(false);
        element2.setPrefSize(new Dimension(48, 44));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 5, 6));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("characterSheet");
        checkOut4.setAttribute("content");
        checkOut4.setField("spellsInventory/spell10");
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element3.setOnItemClick(onItemClick);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("value");
        data.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut5.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut5.setOnPopupHide(onPopupHide);
        checkOut5.setNonBlocking(false);
        element3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 5, 5));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut5.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setPrefSize(new Dimension(10, 0));
        checkOut7.setStyle("popup");
        popupElement.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final BorderLayoutData checkOut8 = BorderLayoutData.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setData(BorderLayoutData.Values.CENTER);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("PopupInformation");
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("name");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut9);
        }
        checkOut9.setNonBlocking(false);
        checkOut9.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut9.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut9.setOnMouseExit(onMouseExit);
        checkOut5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("modulationColor");
        checkOut10.setField("spell/id");
        checkOut10.setLocal(true);
        checkOut10.setName("describedSpell");
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setValue("0.4f,0.5f,0.62f,1f");
        element11.setElseValue("1f,1f,1f,1f");
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element11.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("value");
        element12.setField("spell/id");
        equalCondition.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setScaled(true);
        element13.setDisplaySize(new Dimension(31, 31));
        checkOut9.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setSize(new Dimension(100.0f, 100.0f));
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final PixmapElement checkOut11 = PixmapElement.checkOut();
        checkOut11.setElementMap(elementMap);
        element13.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("texture");
        element15.setField("smallIconUrl");
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final RenderableContainer element16 = new RenderableContainer();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setExpandable(false);
        element16.setPrefSize(new Dimension(48, 44));
        checkOut.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element16.getAppearance();
        appearance5.setElementMap(elementMap);
        element16.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 5, 5, 6));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setLocal(true);
        checkOut13.setName("characterSheet");
        checkOut13.setAttribute("content");
        checkOut13.setField("spellsInventory/spell9");
        element16.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final ItemRenderer element17 = new ItemRenderer();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        final ItemClickListener onItemClick2 = new ItemClickListener();
        onItemClick2.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element17.setOnItemClick(onItemClick2);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ConditionResult element18 = new ConditionResult();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemCondition element19 = new ItemCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final NotNullCondition element20 = new NotNullCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final String id5 = "spell";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, data2);
        }
        element17.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("value");
        data2.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(spellPopup)");
        checkOut14.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut14.setOnPopupHide(onPopupHide2);
        checkOut14.setNonBlocking(false);
        element17.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut14.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 5, 5, 5));
        appearance6.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id6 = "spellPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        checkOut14.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        popupElement2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final BorderLayoutData checkOut17 = BorderLayoutData.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setData(BorderLayoutData.Values.CENTER);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("PopupInformation");
        checkOut16.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element22.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.WEST);
        element22.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("name");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut16.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final String id7 = "spellCell";
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        if (elementMap != null && id7 != null) {
            elementMap.add(id7, checkOut18);
        }
        checkOut18.setNonBlocking(false);
        checkOut18.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter2 = new MouseEnteredListener();
        onMouseEnter2.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut18.setOnMouseEnter(onMouseEnter2);
        final MouseExitedListener onMouseExit2 = new MouseExitedListener();
        onMouseExit2.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut18.setOnMouseExit(onMouseExit2);
        checkOut14.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        checkOut18.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance8 = checkOut18.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("modulationColor");
        checkOut19.setField("spell/id");
        checkOut19.setLocal(true);
        checkOut19.setName("describedSpell");
        appearance8.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("0.4f,0.5f,0.62f,1f");
        element25.setElseValue("1f,1f,1f,1f");
        checkOut19.addBasicElement(element25);
        element25.onAttributesInitialized();
        final String id8 = "equal";
        final EqualCondition equalCondition2 = new EqualCondition();
        equalCondition2.onCheckOut();
        equalCondition2.setElementMap(elementMap);
        if (elementMap != null && id8 != null) {
            elementMap.add(id8, equalCondition2);
        }
        element25.addBasicElement(equalCondition2);
        equalCondition2.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        element26.setField("spell/id");
        equalCondition2.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        equalCondition2.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut19.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Image element27 = new Image();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setNonBlocking(true);
        element27.setScaled(true);
        element27.setDisplaySize(new Dimension(31, 31));
        checkOut18.addBasicElement(element27);
        element27.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setSize(new Dimension(100.0f, 100.0f));
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final PixmapElement checkOut20 = PixmapElement.checkOut();
        checkOut20.setElementMap(elementMap);
        element27.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("texture");
        element29.setField("smallIconUrl");
        checkOut20.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut18.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        final RenderableContainer element30 = new RenderableContainer();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setExpandable(false);
        element30.setPrefSize(new Dimension(48, 44));
        checkOut.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element30.getAppearance();
        appearance9.setElementMap(elementMap);
        element30.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 5, 5, 6));
        appearance9.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance9.onChildrenAdded();
        this.method40(element30);
        this.method41(element30);
        element30.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("characterSheet");
        checkOut.setAttribute("content");
        checkOut.setField("spellsInventory/spell8");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method41(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 5, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.CENTER);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut5);
        }
        checkOut5.setNonBlocking(false);
        checkOut5.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut5.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut5.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("modulationColor");
        checkOut6.setField("spell/id");
        checkOut6.setLocal(true);
        checkOut6.setName("describedSpell");
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setValue("0.4f,0.5f,0.62f,1f");
        element9.setElseValue("1f,1f,1f,1f");
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element9.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("value");
        element10.setField("spell/id");
        equalCondition.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setNonBlocking(true);
        element11.setScaled(true);
        element11.setDisplaySize(new Dimension(31, 31));
        checkOut5.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(100.0f, 100.0f));
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element11.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("texture");
        element13.setField("smallIconUrl");
        checkOut7.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method42(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RenderableContainer element = new RenderableContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setPrefSize(new Dimension(48, 44));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 4, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("characterSheet");
        checkOut3.setAttribute("content");
        checkOut3.setField("spellsInventory/spell0");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element2.setOnItemClick(onItemClick);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element2.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut4.setOnPopupHide(onPopupHide);
        checkOut4.setNonBlocking(false);
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 5, 5, 5));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut4.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(10, 0));
        checkOut6.setStyle("popup");
        popupElement.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final BorderLayoutData checkOut7 = BorderLayoutData.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setData(BorderLayoutData.Values.CENTER);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("name");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut8);
        }
        checkOut8.setNonBlocking(false);
        checkOut8.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut8.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut8.setOnMouseExit(onMouseExit);
        checkOut4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        checkOut8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut8.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setAttribute("modulationColor");
        checkOut9.setField("spell/id");
        checkOut9.setLocal(true);
        checkOut9.setName("describedSpell");
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0.4f,0.5f,0.62f,1f");
        element10.setElseValue("1f,1f,1f,1f");
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element10.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("spell/id");
        equalCondition.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setScaled(true);
        element12.setDisplaySize(new Dimension(31, 31));
        checkOut8.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap);
        element12.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut10.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final RenderableContainer element15 = new RenderableContainer();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setExpandable(false);
        element15.setPrefSize(new Dimension(48, 44));
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element15.getAppearance();
        appearance5.setElementMap(elementMap);
        element15.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 0, 0, 5));
        appearance5.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setLocal(true);
        checkOut12.setName("characterSheet");
        checkOut12.setAttribute("content");
        checkOut12.setField("spellsInventory/spell1");
        element15.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ItemRenderer element16 = new ItemRenderer();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        final ItemClickListener onItemClick2 = new ItemClickListener();
        onItemClick2.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element16.setOnItemClick(onItemClick2);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ItemCondition element18 = new ItemCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final NotNullCondition element19 = new NotNullCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final String id5 = "spell";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, data2);
        }
        element16.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("value");
        data2.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(spellPopup)");
        checkOut13.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut13.setOnPopupHide(onPopupHide2);
        checkOut13.setNonBlocking(false);
        element16.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 5, 5, 5));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id6 = "spellPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        checkOut13.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setPrefSize(new Dimension(10, 0));
        checkOut15.setStyle("popup");
        popupElement2.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final BorderLayoutData checkOut16 = BorderLayoutData.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setData(BorderLayoutData.Values.CENTER);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("PopupInformation");
        checkOut15.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element21.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.WEST);
        element21.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("text");
        element22.setField("name");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut15.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final String id7 = "spellCell";
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        if (elementMap != null && id7 != null) {
            elementMap.add(id7, checkOut17);
        }
        checkOut17.setNonBlocking(false);
        checkOut17.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter2 = new MouseEnteredListener();
        onMouseEnter2.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut17.setOnMouseEnter(onMouseEnter2);
        final MouseExitedListener onMouseExit2 = new MouseExitedListener();
        onMouseExit2.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut17.setOnMouseExit(onMouseExit2);
        checkOut13.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayout element23 = new StaticLayout();
        element23.onCheckOut();
        checkOut17.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final DecoratorAppearance appearance8 = checkOut17.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("modulationColor");
        checkOut18.setField("spell/id");
        checkOut18.setLocal(true);
        checkOut18.setName("describedSpell");
        appearance8.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setValue("0.4f,0.5f,0.62f,1f");
        element24.setElseValue("1f,1f,1f,1f");
        checkOut18.addBasicElement(element24);
        element24.onAttributesInitialized();
        final String id8 = "equal";
        final EqualCondition equalCondition2 = new EqualCondition();
        equalCondition2.onCheckOut();
        equalCondition2.setElementMap(elementMap);
        if (elementMap != null && id8 != null) {
            elementMap.add(id8, equalCondition2);
        }
        element24.addBasicElement(equalCondition2);
        equalCondition2.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("value");
        element25.setField("spell/id");
        equalCondition2.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        equalCondition2.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut18.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Image element26 = new Image();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setNonBlocking(true);
        element26.setScaled(true);
        element26.setDisplaySize(new Dimension(31, 31));
        checkOut17.addBasicElement(element26);
        element26.onAttributesInitialized();
        final StaticLayoutData element27 = new StaticLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setSize(new Dimension(100.0f, 100.0f));
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element26.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("texture");
        element28.setField("smallIconUrl");
        checkOut19.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final RenderableContainer element29 = new RenderableContainer();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setExpandable(false);
        element29.setPrefSize(new Dimension(48, 44));
        checkOut.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element29.getAppearance();
        appearance9.setElementMap(elementMap);
        element29.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 0, 5));
        appearance9.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance9.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setLocal(true);
        checkOut21.setName("characterSheet");
        checkOut21.setAttribute("content");
        checkOut21.setField("spellsInventory/spell2");
        element29.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final ItemRenderer element30 = new ItemRenderer();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        final ItemClickListener onItemClick3 = new ItemClickListener();
        onItemClick3.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element30.setOnItemClick(onItemClick3);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        this.method43(element30);
        this.method44(element30);
        this.method45(element30);
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        this.method46(checkOut);
        this.method47(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method43(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemCondition element2 = new ItemCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method44(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method45(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        checkOut.setNonBlocking(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 5, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        popupElement.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.CENTER);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id2 = "spellCell";
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut5);
        }
        checkOut5.setNonBlocking(false);
        checkOut5.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut5.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut5.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("modulationColor");
        checkOut6.setField("spell/id");
        checkOut6.setLocal(true);
        checkOut6.setName("describedSpell");
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("0.4f,0.5f,0.62f,1f");
        element4.setElseValue("1f,1f,1f,1f");
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        final String id3 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, equalCondition);
        }
        element4.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        element5.setField("spell/id");
        equalCondition.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setNonBlocking(true);
        element6.setScaled(true);
        element6.setDisplaySize(new Dimension(31, 31));
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("texture");
        element8.setField("smallIconUrl");
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method46(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RenderableContainer element = new RenderableContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setPrefSize(new Dimension(48, 44));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("characterSheet");
        checkOut2.setAttribute("content");
        checkOut2.setField("spellsInventory/spell3");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element2.setOnItemClick(onItemClick);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element2.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut3.setOnPopupHide(onPopupHide);
        checkOut3.setNonBlocking(false);
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 5, 5));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final BorderLayoutData checkOut6 = BorderLayoutData.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setData(BorderLayoutData.Values.CENTER);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("name");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut7);
        }
        checkOut7.setNonBlocking(false);
        checkOut7.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut7.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut7.setOnMouseExit(onMouseExit);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut7.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("modulationColor");
        checkOut8.setField("spell/id");
        checkOut8.setLocal(true);
        checkOut8.setName("describedSpell");
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0.4f,0.5f,0.62f,1f");
        element10.setElseValue("1f,1f,1f,1f");
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element10.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("spell/id");
        equalCondition.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setScaled(true);
        element12.setDisplaySize(new Dimension(31, 31));
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element12.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method47(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RenderableContainer element = new RenderableContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setPrefSize(new Dimension(48, 44));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 6));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("characterSheet");
        checkOut2.setAttribute("content");
        checkOut2.setField("spellsInventory/spell4");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription(characterView)");
        element2.setOnItemClick(onItemClick);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "spell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element2.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut3.setOnPopupHide(onPopupHide);
        checkOut3.setNonBlocking(false);
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 5, 5));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id2 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final BorderLayoutData checkOut6 = BorderLayoutData.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setData(BorderLayoutData.Values.CENTER);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("name");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut7);
        }
        checkOut7.setNonBlocking(false);
        checkOut7.setStyle("ShortcutBarBoxBackground");
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut7.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,spell)");
        checkOut7.setOnMouseExit(onMouseExit);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut7.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("modulationColor");
        checkOut8.setField("spell/id");
        checkOut8.setLocal(true);
        checkOut8.setName("describedSpell");
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0.4f,0.5f,0.62f,1f");
        element10.setElseValue("1f,1f,1f,1f");
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id4 = "equal";
        final EqualCondition equalCondition = new EqualCondition();
        equalCondition.onCheckOut();
        equalCondition.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, equalCondition);
        }
        element10.addBasicElement(equalCondition);
        equalCondition.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("spell/id");
        equalCondition.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        equalCondition.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setScaled(true);
        element12.setDisplaySize(new Dimension(31, 31));
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element12.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("smallIconUrl");
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method48(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "container";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        checkOut.setStyle("darkBackgrounded");
        checkOut.setVisible(false);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(250, 0));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 10, 5, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("visible");
        checkOut4.setName("describedSpell");
        checkOut4.setLocal(true);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final String id2 = "stateDetailPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final ElementMap parentElementMap = elementMap;
        final ElementMap elementMap2 = this.env.createElementMap(((elementMap != null) ? elementMap.getId() : "") + ".itemDetailPopupInc");
        elementMap2.setParentElementMap(parentElementMap);
        this.elementMaps.push(elementMap2);
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap2);
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut6.setAlign(Alignment9.NORTH);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap2);
        checkOut7.setExpandable(false);
        checkOut7.setVisible(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap2);
        checkOut8.setName("describedIcon");
        checkOut8.setAttribute("visible");
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap2);
        checkOut8.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap2);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap2);
        element5.setStyle("white11");
        element5.setMultiline(false);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap2);
        checkOut9.setName("describedIcon");
        checkOut9.setAttribute("text");
        element5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap2);
        checkOut10.setExpandable(false);
        checkOut5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap2);
        checkOut11.setName("describedState");
        checkOut11.setAttribute("visible");
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap2);
        checkOut11.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap2);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap2);
        checkOut10.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap2);
        element8.setExpandable(false);
        element8.setDisplaySize(new Dimension(32, 32));
        checkOut13.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap2);
        element9.setAlign(Alignment9.WEST);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap2);
        element8.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap2);
        checkOut16.setName("describedState");
        checkOut16.setAttribute("texture");
        checkOut16.setField("iconUrl");
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap2);
        checkOut13.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut17.getAppearance();
        appearance2.setElementMap(elementMap2);
        checkOut17.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap2);
        checkOut18.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap2);
        checkOut20.setExpandable(false);
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.WEST);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap2);
        element10.setStyle("bigTitle");
        element10.setExpandable(false);
        element10.setMinWidth(190);
        element10.setNonBlocking(true);
        checkOut20.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element10.getAppearance();
        appearance3.setElementMap(elementMap2);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.NORTH_WEST);
        element10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap2);
        checkOut22.setName("describedState");
        checkOut22.setAttribute("text");
        checkOut22.setField("nameWithFormat");
        element10.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element10.onChildrenAdded();
        final Spacer element11 = new Spacer();
        element11.onCheckOut();
        element11.setElementMap(elementMap2);
        checkOut20.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap2);
        element12.setStyle("11light");
        element12.setExpandable(false);
        checkOut20.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element12.getAppearance();
        appearance4.setElementMap(elementMap2);
        element12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap2);
        checkOut23.setInsets(new Insets(0, 5, 0, 0));
        appearance4.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final ColorElement checkOut24 = ColorElement.checkOut();
        checkOut24.setElementMap(elementMap2);
        checkOut24.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap2);
        checkOut25.setAttribute("visible");
        checkOut25.setName("describedState");
        checkOut25.setField("maxLevelValue");
        element12.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap2);
        checkOut25.addBasicElement(element13);
        element13.onAttributesInitialized();
        final GreaterCondition element14 = new GreaterCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap2);
        element14.setValue("1");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut25.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap2);
        checkOut26.setName("describedState");
        checkOut26.setAttribute("text");
        checkOut26.setField("level");
        element12.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap2);
        element15.setStyle("stateCumulable");
        checkOut17.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap2);
        element16.setAlign(Alignment9.WEST);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap2);
        checkOut27.setName("describedState");
        checkOut27.setAttribute("visible");
        checkOut27.setField("isCumulable");
        element15.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap2);
        checkOut10.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final RowLayout checkOut29 = RowLayout.checkOut();
        checkOut29.setHorizontal(false);
        checkOut28.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        final PropertyElement checkOut30 = PropertyElement.checkOut();
        checkOut30.setElementMap(elementMap2);
        checkOut30.setName("describedState");
        checkOut30.setAttribute("visible");
        checkOut30.setField("description");
        checkOut28.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap2);
        checkOut30.addBasicElement(element17);
        element17.onAttributesInitialized();
        final AndCondition element18 = new AndCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap2);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final NotNullCondition element19 = new NotNullCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap2);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final NotEqualCondition element20 = new NotEqualCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap2);
        element20.setValue("");
        element18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut30.onChildrenAdded();
        final Container checkOut31 = Container.checkOut();
        checkOut31.setElementMap(elementMap2);
        checkOut31.setExpandable(false);
        checkOut31.setStyle("lineSeparator2");
        checkOut31.setPrefSize(new Dimension(50, 1));
        checkOut28.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut31.getAppearance();
        appearance5.setElementMap(elementMap2);
        checkOut31.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut32 = Margin.checkOut();
        checkOut32.setElementMap(elementMap2);
        checkOut32.setInsets(new Insets(5, 20, 5, 20));
        appearance5.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut31.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap2);
        element21.setExpandable(false);
        element21.setStyle("narrow12");
        element21.setMinWidth(230);
        checkOut28.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap2);
        element22.setAlign(Alignment9.WEST);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance6 = element21.getAppearance();
        appearance6.setElementMap(elementMap2);
        element21.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut33 = Margin.checkOut();
        checkOut33.setElementMap(elementMap2);
        checkOut33.setInsets(new Insets(0, 10, 0, 0));
        appearance6.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        checkOut33.onChildrenAdded();
        final ColorElement checkOut34 = ColorElement.checkOut();
        checkOut34.setElementMap(elementMap2);
        checkOut34.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance6.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        checkOut34.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut35 = PropertyElement.checkOut();
        checkOut35.setElementMap(elementMap2);
        checkOut35.setName("describedState");
        checkOut35.setAttribute("text");
        checkOut35.setField("description");
        element21.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        checkOut35.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final Container checkOut36 = Container.checkOut();
        checkOut36.setElementMap(elementMap2);
        checkOut10.addBasicElement(checkOut36);
        checkOut36.onAttributesInitialized();
        final RowLayout checkOut37 = RowLayout.checkOut();
        checkOut37.setHorizontal(false);
        checkOut36.addBasicElement(checkOut37);
        checkOut37.onAttributesInitialized();
        checkOut37.onChildrenAdded();
        final PropertyElement checkOut38 = PropertyElement.checkOut();
        checkOut38.setElementMap(elementMap2);
        checkOut38.setName("describedState");
        checkOut38.setAttribute("visible");
        checkOut38.setField("effectDescription");
        checkOut36.addBasicElement(checkOut38);
        checkOut38.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap2);
        checkOut38.addBasicElement(element23);
        element23.onAttributesInitialized();
        final AndCondition element24 = new AndCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap2);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap2);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final NotEqualCondition element26 = new NotEqualCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap2);
        element26.setValue("");
        element24.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut38.onChildrenAdded();
        final Container checkOut39 = Container.checkOut();
        checkOut39.setElementMap(elementMap2);
        checkOut39.setExpandable(false);
        checkOut39.setStyle("lineSeparator2");
        checkOut39.setPrefSize(new Dimension(50, 1));
        checkOut36.addBasicElement(checkOut39);
        checkOut39.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut39.getAppearance();
        appearance7.setElementMap(elementMap2);
        checkOut39.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut40 = Margin.checkOut();
        checkOut40.setElementMap(elementMap2);
        checkOut40.setInsets(new Insets(5, 20, 5, 20));
        appearance7.addBasicElement(checkOut40);
        checkOut40.onAttributesInitialized();
        checkOut40.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut39.onChildrenAdded();
        final StackList element27 = new StackList();
        element27.onCheckOut();
        element27.setElementMap(elementMap2);
        element27.setHorizontal(false);
        checkOut36.addBasicElement(element27);
        element27.onAttributesInitialized();
        final PropertyElement checkOut41 = PropertyElement.checkOut();
        checkOut41.setElementMap(elementMap2);
        checkOut41.setName("describedState");
        checkOut41.setAttribute("content");
        checkOut41.setField("effectDescription");
        element27.addBasicElement(checkOut41);
        checkOut41.onAttributesInitialized();
        checkOut41.onChildrenAdded();
        this.method49(element27);
        element27.onChildrenAdded();
        checkOut36.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut5.onChildrenAdded();
        this.elementMaps.pop();
        final ElementMap elementMap3 = this.elementMaps.peek();
        popupElement.onChildrenAdded();
        this.method50(checkOut);
        this.method60(checkOut);
        this.method61(checkOut);
        this.method66(checkOut);
        this.method67(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method49(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("white11");
        element5.setMinWidth(230);
        element5.setMaxWidth(230);
        element5.setExpandable(false);
        element5.setEnableOnlySelectablePartInteraction(true);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element5.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element5.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance = element5.getAppearance();
        appearance.setElementMap(elementMap);
        element5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method50(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setDisplaySize(new Dimension(54, 54));
        element.setScaled(true);
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("describedSpell");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("texture");
        checkOut4.setField("smallIconUrl");
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final String id = "spellNameTextWidget";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textView);
        }
        textView.setMaxWidth(190);
        textView.setMultiline(false);
        textView.setStyle("DefaultBold14White");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popupIfReduced(completeNamePopup,spellNameTextWidget,1)");
        textView.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        textView.setOnPopupHide(onPopupHide);
        textView.setExpandable(false);
        textView.setNonBlocking(false);
        checkOut5.addBasicElement(textView);
        textView.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        textView.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = textView.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        textView.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 5, 5, 0));
        appearance.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setLocal(true);
        checkOut8.setAttribute("text");
        checkOut8.setField("name");
        textView.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final String id2 = "completeNamePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        textView.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final BorderLayoutData checkOut10 = BorderLayoutData.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setData(BorderLayoutData.Values.CENTER);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("PopupInformation");
        element3.setExpandable(false);
        checkOut9.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("describedSpell");
        checkOut12.setLocal(true);
        checkOut12.setAttribute("text");
        checkOut12.setField("name");
        element3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element3.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("PopupInformation");
        element4.setExpandable(false);
        checkOut9.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element4.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 3, 0, 0));
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("visible");
        checkOut14.setName("describedSpell");
        checkOut14.setLocal(true);
        checkOut14.setField("type");
        element4.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        checkOut14.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("text");
        checkOut15.setName("describedSpell");
        checkOut15.setLocal(true);
        checkOut15.setField("type");
        element4.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        textView.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setExpandable(false);
        checkOut5.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.EAST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut18.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(0, 5, 0, 2));
        appearance4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("describedSpell");
        checkOut19.setLocal(true);
        checkOut19.setAttribute("visible");
        checkOut19.setField("isSupport");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut19.addBasicElement(element9);
        element9.onAttributesInitialized();
        final AndCondition element10 = new AndCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final FalseCondition element11 = new FalseCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final TrueCondition element12 = new TrueCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("describedSpell");
        checkOut20.setLocal(true);
        checkOut20.setAttribute("comparedValue");
        checkOut20.setField("maxLevel");
        element12.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        checkOut20.addBasicElement(element13);
        element13.onAttributesInitialized();
        final GreaterCondition element14 = new GreaterCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setValue("0");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final ProgressBar element15 = new ProgressBar();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setUseDecreaseProgressTween(false);
        element15.setStyle("XP2");
        element15.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(xpPopup,1)");
        element15.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element15.setOnPopupHide(onPopupHide2);
        checkOut18.addBasicElement(element15);
        element15.onAttributesInitialized();
        final String id3 = "xpPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element15.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement2.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final Label element16 = new Label();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("PopupInformation");
        element16.setText("%experience%".replace("%experience%", Xulor.getInstance().getTranslatedString("experience")));
        checkOut21.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element16.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element16.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut21.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 13));
        element17.setAlign(Alignment17.CENTER);
        element17.setXOffset(1);
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("describedSpell");
        checkOut22.setLocal(true);
        checkOut22.setAttribute("value");
        checkOut22.setField("currentLevelPercentage");
        element15.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setStyle("ProgressBar");
        checkOut23.setPrefSize(new Dimension(0, 11));
        checkOut18.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setSize(new Dimension(100.0f, 14));
        element18.setAlign(Alignment17.CENTER);
        checkOut23.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(true);
        element19.setStyle("White10Bordered");
        checkOut18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element19.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.CENTER);
        element19.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment17.CENTER);
        element20.setYOffset(1);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("describedSpell");
        checkOut24.setLocal(true);
        checkOut24.setAttribute("text");
        checkOut24.setField("currentLevelString");
        element19.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("11Light");
        element21.setNonBlocking(true);
        element21.setExpandable(false);
        checkOut16.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element21.getAppearance();
        appearance7.setElementMap(elementMap);
        element21.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(0, 0, 0, 2));
        appearance7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final Padding element22 = new Padding();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setInsets(new Insets(0, 0, 2, 0));
        appearance7.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setName("describedSpell");
        checkOut26.setLocal(true);
        checkOut26.setAttribute("text");
        checkOut26.setField("levelTextShort");
        element21.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setName("describedSpell");
        checkOut27.setLocal(true);
        checkOut27.setAttribute("visible");
        checkOut27.setField("maxLevel");
        element21.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        checkOut27.addBasicElement(element23);
        element23.onAttributesInitialized();
        final GreaterCondition element24 = new GreaterCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setValue("0");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut27.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setExpandable(false);
        checkOut5.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.EAST);
        checkOut28.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final RowLayout checkOut29 = RowLayout.checkOut();
        checkOut29.setHorizontal(true);
        checkOut28.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setExpandable(false);
        checkOut30.setPrefSize(new Dimension(0, 25));
        checkOut28.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.EAST);
        checkOut30.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final Container checkOut31 = Container.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setExpandable(false);
        checkOut31.setNonBlocking(false);
        checkOut31.setVisible(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(chragePopup,1)");
        checkOut31.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut31.setOnPopupHide(onPopupHide3);
        checkOut30.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        this.method51(checkOut31);
        this.method52(checkOut31);
        this.method53(checkOut31);
        this.method54(checkOut31);
        this.method55(checkOut31);
        checkOut31.onChildrenAdded();
        this.method56(checkOut30);
        this.method57(checkOut30);
        this.method58(checkOut30);
        this.method59(checkOut30);
        checkOut30.onChildrenAdded();
        checkOut28.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method51(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "chragePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%critere.chrage%".replace("%critere.chrage%", Xulor.getInstance().getTranslatedString("critere.chrage")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method52(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHgap((short)2);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method53(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("editableDescribedSpell");
        checkOut.setField("chrage");
        checkOut.setLocal(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final GreaterCondition element2 = new GreaterCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method54(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("11Light");
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("editableDescribedSpell");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("chrage");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method55(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("iconCHRAGE");
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method56(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setNonBlocking(false);
        checkOut.setVisible(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(apPopup,1)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "apPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%APShort%".replace("%APShort%", Xulor.getInstance().getTranslatedString("APShort")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHgap((short)2);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("visible");
        checkOut4.setName("editableDescribedSpell");
        checkOut4.setField("ap");
        checkOut4.setLocal(true);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("0");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setExpandable(false);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("text");
        checkOut5.setField("ap");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("iconAP");
        element5.setExpandable(false);
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method57(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setVisible(false);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(mpPopup,1)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "mpPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%MPShort%".replace("%MPShort%", Xulor.getInstance().getTranslatedString("MPShort")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHgap((short)2);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setField("mp");
        checkOut5.setLocal(true);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("0");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setExpandable(false);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("editableDescribedSpell");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("mp");
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("iconMP");
        element5.setExpandable(false);
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method58(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setVisible(false);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(wpPopup,1)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "wpPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setText("%WPShort%".replace("%WPShort%", Xulor.getInstance().getTranslatedString("WPShort")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHgap((short)2);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setField("wp");
        checkOut5.setLocal(true);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("0");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setExpandable(false);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("editableDescribedSpell");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("wp");
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("iconWP");
        element5.setExpandable(false);
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method59(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("editableDescribedSpell");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("isPassive");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final FalseCondition element2 = new FalseCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.EAST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHgap((short)2);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("11Light");
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("text");
        checkOut5.setField("range");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("rangeIcon");
        element5.setExpandable(false);
        element5.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(rangePopup,1)");
        element5.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element5.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final String id = "rangePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element5.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(10, 0));
        checkOut6.setStyle("popup");
        popupElement.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.NORTH);
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("PopupInformation");
        element6.setText("%RANGE%".replace("%RANGE%", Xulor.getInstance().getTranslatedString("RANGE")));
        element6.setExpandable(false);
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut6.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("editableDescribedSpell");
        checkOut8.setLocal(true);
        checkOut8.setAttribute("style");
        checkOut8.setField("testLineOfSight");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("rangeIcon");
        element7.setElseValue("noLineOfSightIcon");
        checkOut8.addBasicElement(element7);
        element7.onAttributesInitialized();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element5.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("UnlockedRange");
        element9.setExpandable(false);
        element9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(modifiableRangePopup,1)");
        element9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide2);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final String id2 = "modifiableRangePopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element9.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.NORTH);
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("PopupInformation");
        element10.setText("%modifiableRange%".replace("%modifiableRange%", Xulor.getInstance().getTranslatedString("modifiableRange")));
        element10.setExpandable(false);
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element10.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("editableDescribedSpell");
        checkOut11.setLocal(true);
        checkOut11.setAttribute("visible");
        checkOut11.setField("modifiableRange");
        element10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("editableDescribedSpell");
        checkOut12.setLocal(true);
        checkOut12.setAttribute("visible");
        checkOut12.setField("modifiableRange");
        element9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element9.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("SpellInLine");
        element11.setExpandable(false);
        element11.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(modifiableRangePopup,1)");
        element11.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element11.setOnPopupHide(onPopupHide3);
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final String id3 = "modifiableRangePopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH);
        popupElement3.setHotSpotPosition(Alignment9.SOUTH);
        element11.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setPrefSize(new Dimension(10, 0));
        checkOut13.setStyle("popup");
        popupElement3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.NORTH);
        checkOut14.setHorizontal(false);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("PopupInformation");
        element12.setText("%spellDetail.castLineValid%".replace("%spellDetail.castLineValid%", Xulor.getInstance().getTranslatedString("spellDetail.castLineValid")));
        element12.setExpandable(false);
        checkOut13.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element12.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("editableDescribedSpell");
        checkOut15.setLocal(true);
        checkOut15.setAttribute("visible");
        checkOut15.setField("castOnlyInLine");
        element12.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut13.onChildrenAdded();
        popupElement3.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("editableDescribedSpell");
        checkOut16.setLocal(true);
        checkOut16.setAttribute("visible");
        checkOut16.setField("castOnlyInLine");
        element11.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method60(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 85));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("describedSpell");
        checkOut2.setField("longDescription");
        checkOut2.setLocal(true);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("false");
        element.setElseValue("true");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NullCondition element2 = new NullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 5, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ScrollContainer element3 = new ScrollContainer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setVerticalScrollBarPosition(1.0f);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        element4.setStyle("narrow12");
        element4.setMinWidth(260);
        element4.setEnableOnlySelectablePartInteraction(true);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.WEST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 5, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("describedSpell");
        checkOut7.setLocal(true);
        checkOut7.setAttribute("text");
        checkOut7.setField("longDescription");
        element4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method61(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "tabbedContainer";
        final TabbedContainer tabbedContainer = new TabbedContainer();
        tabbedContainer.onCheckOut();
        tabbedContainer.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, tabbedContainer);
        }
        tabbedContainer.setTabsSizesEquilibrate(true);
        tabbedContainer.setTextOrientation(Orientation.EAST);
        tabbedContainer.setTabsLabelAlignment(Alignment9.CENTER);
        tabbedContainer.setTabsPosition(Alignment4.NORTH);
        tabbedContainer.setTabsAlignment(Alignment5.WEST);
        tabbedContainer.setExpandable(false);
        tabbedContainer.setPrefSize(new Dimension(0, 150));
        tabbedContainer.setStyle("dark");
        basicElement.addBasicElement(tabbedContainer);
        tabbedContainer.onAttributesInitialized();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%effects%".replace("%effects%", Xulor.getInstance().getTranslatedString("effects")));
        tabbedContainer.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("editableDescribedSpell");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("isPassive");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("%passive%".replace("%passive%", Xulor.getInstance().getTranslatedString("passive")));
        element2.setElseValue("%effects%".replace("%effects%", Xulor.getInstance().getTranslatedString("effects")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        final ScrollContainer element4 = new ScrollContainer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setVerticalScrollBarPosition(1.0f);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance = element4.getAppearance();
        appearance.setElementMap(elementMap);
        element4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element5 = new PlainBorder();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(1, 0, 1, 0));
        element5.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element4.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final List element6 = new List();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setCellSize(new Dimension(100.0f, 16));
        element6.setPrefSize(new Dimension(250, 120));
        element6.setHorizontal(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("editableDescribedSpell");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("content");
        checkOut4.setField("shortDescription");
        element6.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ItemRenderer element7 = new ItemRenderer();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final AndCondition element9 = new AndCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ItemCondition element10 = new ItemCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final NotNullCondition element11 = new NotNullCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final ListCondition element12 = new ListCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setKey("evenIndex");
        element9.addBasicElement(element12);
        element12.onAttributesInitialized();
        final TrueCondition element13 = new TrueCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element7.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element14 = new PlainBackground();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance2.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final String id2 = "effectTextWidget";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textView);
        }
        textView.setStyle("white11");
        textView.setMultiline(false);
        textView.setMinWidth(230);
        textView.setMaxWidth(230);
        textView.setExpandable(false);
        textView.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popupIfReduced(effectDescPopup,effectTextWidget,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        textView.setOnPopupHide(onPopupHide);
        checkOut5.addBasicElement(textView);
        textView.onAttributesInitialized();
        final String id3 = "effectDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        textView.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setPrefSize(new Dimension(10, 0));
        checkOut7.setStyle("popup");
        popupElement.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("white11");
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut7.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut7.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance3 = textView.getAppearance();
        appearance3.setElementMap(elementMap);
        textView.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        textView.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        textView.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element7.onChildrenAdded();
        final ItemRenderer element18 = new ItemRenderer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element6.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final AndCondition element20 = new AndCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemCondition element21 = new ItemCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final NotNullCondition element22 = new NotNullCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        final ListCondition element23 = new ListCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setKey("oddIndex");
        element20.addBasicElement(element23);
        element23.onAttributesInitialized();
        final TrueCondition element24 = new TrueCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        element18.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBackground element25 = new PlainBackground();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance4.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final String id4 = "effectTextWidget";
        final TextView textView2 = new TextView();
        textView2.onCheckOut();
        textView2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, textView2);
        }
        textView2.setStyle("white11");
        textView2.setMultiline(false);
        textView2.setMinWidth(230);
        textView2.setMaxWidth(230);
        textView2.setExpandable(false);
        textView2.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView2.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popupIfReduced(effectDescPopup,effectTextWidget,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView2.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        textView2.setOnPopupHide(onPopupHide2);
        checkOut9.addBasicElement(textView2);
        textView2.onAttributesInitialized();
        final String id5 = "effectDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_WEST);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH_WEST);
        textView2.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        popupElement2.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final TextView element26 = new TextView();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("white11");
        element26.setMultiline(false);
        element26.setExpandable(false);
        checkOut11.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut11.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final DecoratorAppearance appearance5 = textView2.getAppearance();
        appearance5.setElementMap(elementMap);
        textView2.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        textView2.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        textView2.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element18.onChildrenAdded();
        final ItemRenderer element29 = new ItemRenderer();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element6.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ConditionResult element30 = new ConditionResult();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final AndCondition element31 = new AndCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ItemCondition element32 = new ItemCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final NullCondition element33 = new NullCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        final String id6 = "test";
        final ListCondition listCondition = new ListCondition();
        listCondition.onCheckOut();
        listCondition.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, listCondition);
        }
        listCondition.setKey("oddIndex");
        element31.addBasicElement(listCondition);
        listCondition.onAttributesInitialized();
        final TrueCondition element34 = new TrueCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        listCondition.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        listCondition.onChildrenAdded();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        element29.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBackground element35 = new PlainBackground();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance6.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element29.onChildrenAdded();
        final ItemRenderer element36 = new ItemRenderer();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element6.addBasicElement(element36);
        element36.onAttributesInitialized();
        final ConditionResult element37 = new ConditionResult();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        final AndCondition element38 = new AndCondition();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        final ItemCondition element39 = new ItemCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        final NullCondition element40 = new NullCondition();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element39.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        element39.onChildrenAdded();
        final ListCondition element41 = new ListCondition();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setKey("evenIndex");
        element38.addBasicElement(element41);
        element41.onAttributesInitialized();
        final TrueCondition element42 = new TrueCondition();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element41.addBasicElement(element42);
        element42.onAttributesInitialized();
        element42.onChildrenAdded();
        element41.onChildrenAdded();
        element38.onChildrenAdded();
        element37.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        element36.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut14.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        this.method62(appearance7);
        appearance7.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element36.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        this.method63(tabbedContainer);
        this.method64(tabbedContainer);
        tabbedContainer.onChildrenAdded();
        return tabbedContainer;
    }
    
    public BasicElement method62(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PlainBackground element = new PlainBackground();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method63(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%critical%".replace("%critical%", Xulor.getInstance().getTranslatedString("critical")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("editableDescribedSpell");
        checkOut.setField("hasCriticalEffect");
        checkOut.setLocal(true);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ScrollContainer element2 = new ScrollContainer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setVerticalScrollBarPosition(1.0f);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element3 = new PlainBorder();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(1, 0, 1, 0));
        element3.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final List element4 = new List();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setCellSize(new Dimension(100.0f, 16));
        element4.setPrefSize(new Dimension(250, 120));
        element4.setHorizontal(false);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("editableDescribedSpell");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("content");
        checkOut4.setField("criticalDescription");
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final AndCondition element7 = new AndCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ItemCondition element8 = new ItemCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final NotNullCondition element9 = new NotNullCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final ListCondition element10 = new ListCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setKey("evenIndex");
        element7.addBasicElement(element10);
        element10.onAttributesInitialized();
        final TrueCondition element11 = new TrueCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element12 = new PlainBackground();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance2.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final String id = "effectTextWidget";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textView);
        }
        textView.setStyle("white11");
        textView.setMultiline(false);
        textView.setMinWidth(230);
        textView.setMaxWidth(230);
        textView.setExpandable(false);
        textView.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popupIfReduced(effectDescPopup,effectTextWidget,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        textView.setOnPopupHide(onPopupHide);
        checkOut5.addBasicElement(textView);
        textView.onAttributesInitialized();
        final String id2 = "effectDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        textView.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setPrefSize(new Dimension(10, 0));
        checkOut7.setStyle("popup");
        popupElement.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("white11");
        element13.setMultiline(false);
        element13.setExpandable(false);
        checkOut7.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("text");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut7.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance3 = textView.getAppearance();
        appearance3.setElementMap(elementMap);
        textView.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        textView.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        textView.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        final ItemRenderer element16 = new ItemRenderer();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element4.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final AndCondition element18 = new AndCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemCondition element19 = new ItemCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final NotNullCondition element20 = new NotNullCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final ListCondition element21 = new ListCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setKey("oddIndex");
        element18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final TrueCondition element22 = new TrueCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        element16.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBackground element23 = new PlainBackground();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance4.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final String id3 = "effectTextWidget";
        final TextView textView2 = new TextView();
        textView2.onCheckOut();
        textView2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, textView2);
        }
        textView2.setStyle("white11");
        textView2.setMultiline(false);
        textView2.setMinWidth(230);
        textView2.setMaxWidth(230);
        textView2.setExpandable(false);
        textView2.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView2.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popupIfReduced(effectDescPopup,effectTextWidget,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView2.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        textView2.setOnPopupHide(onPopupHide2);
        checkOut9.addBasicElement(textView2);
        textView2.onAttributesInitialized();
        final String id4 = "effectDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_WEST);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH_WEST);
        textView2.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        popupElement2.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("white11");
        element24.setMultiline(false);
        element24.setExpandable(false);
        checkOut11.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("text");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut11.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final DecoratorAppearance appearance5 = textView2.getAppearance();
        appearance5.setElementMap(elementMap);
        textView2.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("text");
        textView2.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        textView2.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element16.onChildrenAdded();
        final ItemRenderer element27 = new ItemRenderer();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element4.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ConditionResult element28 = new ConditionResult();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final AndCondition element29 = new AndCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ItemCondition element30 = new ItemCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final NullCondition element31 = new NullCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        final String id5 = "test";
        final ListCondition listCondition = new ListCondition();
        listCondition.onCheckOut();
        listCondition.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, listCondition);
        }
        listCondition.setKey("oddIndex");
        element29.addBasicElement(listCondition);
        listCondition.onAttributesInitialized();
        final TrueCondition element32 = new TrueCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        listCondition.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        listCondition.onChildrenAdded();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        element27.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBackground element33 = new PlainBackground();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance6.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element27.onChildrenAdded();
        final ItemRenderer element34 = new ItemRenderer();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element4.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        final AndCondition element36 = new AndCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final ItemCondition element37 = new ItemCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        final NullCondition element38 = new NullCondition();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        element37.onChildrenAdded();
        final ListCondition element39 = new ListCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setKey("evenIndex");
        element36.addBasicElement(element39);
        element39.onAttributesInitialized();
        final TrueCondition element40 = new TrueCondition();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element39.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        element39.onChildrenAdded();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        element34.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut14.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final PlainBackground element41 = new PlainBackground();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance7.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element34.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method64(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%requirements%".replace("%requirements%", Xulor.getInstance().getTranslatedString("requirements")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("editableDescribedSpell");
        checkOut.setField("hasCastIntervalRestrictions");
        checkOut.setLocal(true);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final OrCondition element3 = new OrCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("comparedValue");
        checkOut2.setName("editableDescribedSpell");
        checkOut2.setField("conditionsDescription");
        checkOut2.setLocal(true);
        element5.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotCondition element7 = new NotCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NullCondition element8 = new NullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        final ScrollContainer element9 = new ScrollContainer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setVerticalScrollBarPosition(1.0f);
        element.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance = element9.getAppearance();
        appearance.setElementMap(elementMap);
        element9.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element10 = new PlainBorder();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setInsets(new Insets(1, 0, 1, 0));
        element10.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element9.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final List element11 = new List();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setCellSize(new Dimension(100.0f, 15));
        element11.setPrefSize(new Dimension(250, 120));
        element11.setHorizontal(false);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("editableDescribedSpell");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("content");
        checkOut5.setField("conditionsDescription");
        element11.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ItemRenderer element12 = new ItemRenderer();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final AndCondition element14 = new AndCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemCondition element15 = new ItemCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final NotNullCondition element16 = new NotNullCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final ListCondition element17 = new ListCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setKey("evenIndex");
        element14.addBasicElement(element17);
        element17.onAttributesInitialized();
        final TrueCondition element18 = new TrueCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element12.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut6.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element19 = new PlainBackground();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance2.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final String id = "effectTextWidget";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textView);
        }
        textView.setStyle("white11");
        textView.setMultiline(false);
        textView.setMinWidth(230);
        textView.setMaxWidth(230);
        textView.setExpandable(false);
        textView.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popupIfReduced(effectDescPopup,effectTextWidget,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        textView.setOnPopupHide(onPopupHide);
        checkOut6.addBasicElement(textView);
        textView.onAttributesInitialized();
        final String id2 = "effectDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        textView.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("white11");
        element20.setMultiline(false);
        element20.setExpandable(false);
        checkOut8.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance3 = textView.getAppearance();
        appearance3.setElementMap(elementMap);
        textView.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("text");
        textView.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        textView.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element12.onChildrenAdded();
        final ItemRenderer element23 = new ItemRenderer();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element11.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final AndCondition element25 = new AndCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemCondition element26 = new ItemCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final ListCondition element28 = new ListCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setKey("oddIndex");
        element25.addBasicElement(element28);
        element28.onAttributesInitialized();
        final TrueCondition element29 = new TrueCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element23.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBackground element30 = new PlainBackground();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance4.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final String id3 = "effectTextWidget";
        final TextView textView2 = new TextView();
        textView2.onCheckOut();
        textView2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, textView2);
        }
        textView2.setStyle("white11");
        textView2.setMultiline(false);
        textView2.setMinWidth(230);
        textView2.setMaxWidth(230);
        textView2.setExpandable(false);
        textView2.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView2.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popupIfReduced(effectDescPopup,effectTextWidget,1);wakfu.spellDetails:processText(container,stateDetailPopup)");
        textView2.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        textView2.setOnPopupHide(onPopupHide2);
        checkOut10.addBasicElement(textView2);
        textView2.onAttributesInitialized();
        final String id4 = "effectDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_WEST);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH_WEST);
        textView2.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        popupElement2.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final TextView element31 = new TextView();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("white11");
        element31.setMultiline(false);
        element31.setExpandable(false);
        checkOut12.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("text");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final DecoratorAppearance appearance5 = textView2.getAppearance();
        appearance5.setElementMap(elementMap);
        textView2.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("text");
        textView2.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        textView2.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element23.onChildrenAdded();
        final ItemRenderer element34 = new ItemRenderer();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element11.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        final AndCondition element36 = new AndCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final ItemCondition element37 = new ItemCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        final NullCondition element38 = new NullCondition();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        element37.onChildrenAdded();
        final String id5 = "test";
        final ListCondition listCondition = new ListCondition();
        listCondition.onCheckOut();
        listCondition.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, listCondition);
        }
        listCondition.setKey("oddIndex");
        element36.addBasicElement(listCondition);
        listCondition.onAttributesInitialized();
        final TrueCondition element39 = new TrueCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        listCondition.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        listCondition.onChildrenAdded();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        element34.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut14.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBackground element40 = new PlainBackground();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance6.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element34.onChildrenAdded();
        final ItemRenderer element41 = new ItemRenderer();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element11.addBasicElement(element41);
        element41.onAttributesInitialized();
        final ConditionResult element42 = new ConditionResult();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element41.addBasicElement(element42);
        element42.onAttributesInitialized();
        final AndCondition element43 = new AndCondition();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element42.addBasicElement(element43);
        element43.onAttributesInitialized();
        final ItemCondition element44 = new ItemCondition();
        element44.onCheckOut();
        element44.setElementMap(elementMap);
        element43.addBasicElement(element44);
        element44.onAttributesInitialized();
        final NullCondition element45 = new NullCondition();
        element45.onCheckOut();
        element45.setElementMap(elementMap);
        element44.addBasicElement(element45);
        element45.onAttributesInitialized();
        element45.onChildrenAdded();
        element44.onChildrenAdded();
        final ListCondition element46 = new ListCondition();
        element46.onCheckOut();
        element46.setElementMap(elementMap);
        element46.setKey("evenIndex");
        element43.addBasicElement(element46);
        element46.onAttributesInitialized();
        final TrueCondition element47 = new TrueCondition();
        element47.onCheckOut();
        element47.setElementMap(elementMap);
        element46.addBasicElement(element47);
        element47.onAttributesInitialized();
        element47.onChildrenAdded();
        element46.onChildrenAdded();
        element43.onChildrenAdded();
        element42.onChildrenAdded();
        this.method65(element41);
        element41.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element9.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method65(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element = new PlainBackground();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setColor(new Color(0.35f, 0.44f, 0.42f, 1.0f));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method66(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(0, 33));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedSpell");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("maxLevel");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method67(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedSpell");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("maxLevel");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final GreaterCondition element2 = new GreaterCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setText("%characterBook.progress%%colon%".replace("%characterBook.progress%", Xulor.getInstance().getTranslatedString("characterBook.progress")).replace("%colon%", Xulor.getInstance().getTranslatedString("colon")));
        element3.setExpandable(false);
        element3.setStyle("11");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 0, 2));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(0, 0, 2, 0));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("11Light");
        element5.setText("0");
        element5.setExpandable(false);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 2));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        final Slider element6 = new Slider();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setHorizontal(true);
        element6.setStyle("volume");
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.spellDetails:setSpellLevel");
        element6.setOnSliderMove(onSliderMove);
        element6.setMinBound(0);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("maxBound");
        checkOut6.setName("editableDescribedSpell");
        checkOut6.setField("maxLevel");
        checkOut6.setLocal(true);
        element6.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("value");
        checkOut7.setName("editableDescribedSpell");
        checkOut7.setField("level");
        checkOut7.setLocal(true);
        element6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(5, 2, 5, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("11Light");
        element7.setExpandable(false);
        checkOut9.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element7.getAppearance();
        appearance4.setElementMap(elementMap);
        element7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 2, 0, 5));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("text");
        checkOut11.setName("editableDescribedSpell");
        checkOut11.setField("maxLevel");
        checkOut11.setLocal(true);
        element7.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element7.onChildrenAdded();
        final String id = "levelTextEditor";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textEditor);
        }
        textEditor.setStyle("dark");
        textEditor.setPrefSize(new Dimension(25, 15));
        textEditor.setExpandable(false);
        textEditor.setMaxChars(3);
        textEditor.setRestrict("[0-9]+");
        final KeyTypedListener onKeyType = new KeyTypedListener();
        onKeyType.setCallBackFunc("wakfu.spellDetails:keyType(levelTextEditor)");
        textEditor.setOnKeyType(onKeyType);
        checkOut9.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("text");
        checkOut12.setName("editableDescribedSpell");
        checkOut12.setField("level");
        checkOut12.setLocal(true);
        textEditor.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance5 = textEditor.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.EAST);
        textEditor.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Button element8 = new Button();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:restore");
        element8.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(restorePopup)");
        element8.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element8.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element8.getAppearance();
        appearance6.setElementMap(elementMap);
        element8.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 5, 0, 0));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id2 = "restorePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element8.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        popupElement.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("PopupInformation");
        element9.setText("%restore%".replace("%restore%", Xulor.getInstance().getTranslatedString("restore")));
        checkOut14.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element9.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.WEST);
        element9.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("GoBackIcon");
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method68(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("insets");
        checkOut2.setName("localPlayer");
        checkOut2.setField("canLockSpell");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("0,0,44,55");
        element.setElseValue("0,0,44,0");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final OrCondition element2 = new OrCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("comparedValue");
        checkOut3.setName("localPlayer");
        checkOut3.setField("spellXpHasArrears");
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method69(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("localPlayer");
        checkOut2.setField("canLockSpell");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final OrCondition element3 = new OrCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("comparedValue");
        checkOut3.setName("localPlayer");
        checkOut3.setField("spellXpHasArrears");
        element5.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.EAST);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut5.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(50, 0, 0, 0));
        appearance.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.NORTH);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final String id = "cont4";
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut7);
        }
        checkOut7.setStyle("LockSpellBackground");
        checkOut7.setPrefSize(new Dimension(38, 50));
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.CENTER);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final String id2 = "lockedSpell";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut5.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("value");
        checkOut8.setName("localPlayer");
        checkOut8.setField("lockedSpell");
        data.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        data.onChildrenAdded();
        final RenderableContainer element9 = new RenderableContainer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 0, 0, 15));
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setSize(new Dimension(50, 60));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("content");
        checkOut10.setName("localPlayer");
        checkOut10.setField("lockedSpell");
        element9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        final DropListener onDrop = new DropListener();
        onDrop.setCallBackFunc("wakfu.characterBook.spellsPage:dropLockedSpell");
        element11.setOnDrop(onDrop);
        final DropOutListener onDropOut = new DropOutListener();
        onDropOut.setCallBackFunc("wakfu.characterBook.spellsPage:dropOutLockedSpell");
        element11.setOnDropOut(onDropOut);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:openSpellDescription");
        element11.setOnItemClick(onItemClick);
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemCondition element13 = new ItemCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final String id3 = "spellCell";
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut11);
        }
        checkOut11.setStyle("white");
        checkOut11.setPrefSize(new Dimension(48, 0));
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.companionsEmbedded:onMouseOverSpell(spellCell)");
        checkOut11.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.companionsEmbedded:onMouseOutSpell(spellCell,lockedSpell)");
        checkOut11.setOnMouseExit(onMouseExit);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(spellPopup)");
        checkOut11.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut11.setOnPopupHide(onPopupHide);
        checkOut11.setNonBlocking(false);
        element11.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.CENTER);
        element15.setXOffset(0);
        element15.setSize(new Dimension(48, 100.0f));
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        checkOut11.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DragNDropContainer element17 = new DragNDropContainer();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        checkOut11.addBasicElement(element17);
        element17.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setSize(new Dimension(-2, -2));
        element18.setY(12);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(true);
        element19.setDisplaySize(new Dimension(38, 38));
        element19.setScaled(true);
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element19.getAppearance();
        appearance3.setElementMap(elementMap);
        element19.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PixmapElement checkOut13 = PixmapElement.checkOut();
        checkOut13.setElementMap(elementMap);
        element19.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("texture");
        element20.setField("smallIconUrl");
        checkOut13.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element19.onChildrenAdded();
        element17.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut14.setPrefSize(new Dimension(38, 20));
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment17.SOUTH);
        checkOut14.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final StaticLayout element22 = new StaticLayout();
        element22.onCheckOut();
        element22.setAdaptToContentSize(true);
        checkOut14.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final ProgressBar element23 = new ProgressBar();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setUseDecreaseProgressTween(false);
        element23.setStyle("XP2");
        element23.setNonBlocking(true);
        checkOut14.addBasicElement(element23);
        element23.onAttributesInitialized();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setSize(new Dimension(100.0f, 10));
        element24.setAlign(Alignment17.CENTER);
        element24.setXOffset(1);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance4 = element23.getAppearance();
        appearance4.setElementMap(elementMap);
        element23.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("progressBar");
        appearance4.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("value");
        element25.setField("currentLevelPercentage");
        element23.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element23.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setStyle("ProgressBar");
        checkOut16.setPrefSize(new Dimension(0, 11));
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(100.0f, 11));
        element26.setAlign(Alignment17.CENTER);
        checkOut16.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setNonBlocking(true);
        element27.setStyle("blackBold");
        checkOut14.addBasicElement(element27);
        element27.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element27.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.CENTER);
        element27.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment17.CENTER);
        element28.setYOffset(1);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element29.setField("levelTextShort");
        element27.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final String id4 = "spellPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut11.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setPrefSize(new Dimension(10, 0));
        checkOut17.setStyle("popup");
        popupElement.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final BorderLayoutData checkOut18 = BorderLayoutData.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setData(BorderLayoutData.Values.CENTER);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Label element30 = new Label();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("PopupInformation");
        checkOut17.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element30.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element30.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("name");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut17.onChildrenAdded();
        popupElement.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element11.onChildrenAdded();
        final ItemRenderer element32 = new ItemRenderer();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        final DropListener onDrop2 = new DropListener();
        onDrop2.setCallBackFunc("wakfu.characterBook.spellsPage:dropLockedSpell");
        element32.setOnDrop(onDrop2);
        element9.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ConditionResult element33 = new ConditionResult();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final ItemCondition element34 = new ItemCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        final NullCondition element35 = new NullCondition();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        element32.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayout element36 = new StaticLayout();
        element36.onCheckOut();
        element36.setAdaptToContentSize(true);
        checkOut19.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final String id5 = "spellCell";
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, checkOut20);
        }
        checkOut20.setStyle("white");
        checkOut20.setPrefSize(new Dimension(48, 0));
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(lockDescPopup)");
        checkOut20.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut20.setOnPopupHide(onPopupHide2);
        checkOut20.setNonBlocking(false);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element37 = new StaticLayoutData();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setAlign(Alignment17.CENTER);
        element37.setXOffset(0);
        element37.setSize(new Dimension(48, 100.0f));
        checkOut20.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final StaticLayout element38 = new StaticLayout();
        element38.onCheckOut();
        checkOut20.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        final DragNDropContainer element39 = new DragNDropContainer();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        checkOut20.addBasicElement(element39);
        element39.onAttributesInitialized();
        final StaticLayoutData element40 = new StaticLayoutData();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setSize(new Dimension(-2, -2));
        element40.setY(12);
        element39.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        this.method70(element39);
        this.method71(element39);
        element39.onChildrenAdded();
        this.method72(checkOut20);
        this.method73(checkOut20);
        this.method74(checkOut20);
        checkOut20.onChildrenAdded();
        this.method75(checkOut19);
        checkOut19.onChildrenAdded();
        element32.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method70(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(true);
        element.setDisplaySize(new Dimension(38, 38));
        element.setScaled(true);
        element.setStyle("RecycleSpell");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("modulationColor");
        checkOut2.setName("localPlayer");
        checkOut2.setField("hasMissingSpellXp");
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("1,1,1,0.3");
        element2.setElseValue("1,1,1");
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method71(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("modulationColor");
        checkOut.setName("localPlayer");
        checkOut.setField("hasMissingSpellXp");
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("1,1,1,0.3");
        element.setElseValue("1,1,1");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final TrueCondition element2 = new TrueCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method72(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(38, 20));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.SOUTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("ProgressBar");
        checkOut2.setPrefSize(new Dimension(0, 11));
        checkOut2.setNonBlocking(true);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 11));
        element3.setAlign(Alignment17.CENTER);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("modulationColor");
        checkOut3.setName("localPlayer");
        checkOut3.setField("hasMissingSpellXp");
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("1,1,1,0.3");
        element4.setElseValue("1,1,1");
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method73(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "lockDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.SOUTH);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%spellLock.desc%".replace("%spellLock.desc%", Xulor.getInstance().getTranslatedString("spellLock.desc")));
        element.setMinWidth(1);
        element.setMaxWidth(250);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%spellLock.missingXpDesc%".replace("%spellLock.missingXpDesc%", Xulor.getInstance().getTranslatedString("spellLock.missingXpDesc")));
        element2.setMinWidth(1);
        element2.setMaxWidth(250);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut3 = ColorElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setColor(new Color(1.0f, 0.0f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(5, 0, 0, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("localPlayer");
        checkOut5.setField("hasMissingSpellXp");
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method74(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("modulationColor");
        checkOut.setName("localPlayer");
        checkOut.setField("hasMissingSpellXp");
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("1,1,1,0.3");
        element.setElseValue("1,1,1");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final TrueCondition element2 = new TrueCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method75(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("localPlayer");
        checkOut2.setField("hasMissingSpellXp");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(38, 38));
        element.setYOffset(5);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("lock");
        element2.setNonBlocking(true);
        element2.setDisplaySize(new Dimension(38, 38));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.8f));
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method76(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "closeSpellsDialog";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("close");
        button.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        button.setOnClick(onClick);
        basicElement.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.NORTH_EAST);
        element.setXOffset(-18);
        element.setYOffset(-12);
        button.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = button.getAppearance();
        appearance.setElementMap(elementMap);
        button.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id2 = "property";
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut2);
        }
        checkOut2.setAttribute("insets");
        checkOut2.setName("localPlayer");
        checkOut2.setField("canLockSpell");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("2,0,0,59");
        element2.setElseValue("2,0,0,4");
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final OrCondition element3 = new OrCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("comparedValue");
        checkOut3.setName("localPlayer");
        checkOut3.setField("spellXpHasArrears");
        element5.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        button.onChildrenAdded();
        return button;
    }
    
    public BasicElement method77(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.EAST);
        element.setInitValue(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method78(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "spellDetailPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final ElementMap parentElementMap = elementMap;
        final ElementMap elementMap2 = this.env.createElementMap(((elementMap != null) ? elementMap.getId() : "") + ".itemDetailPopupInc");
        elementMap2.setParentElementMap(parentElementMap);
        this.elementMaps.push(elementMap2);
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap2);
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap2);
        checkOut2.setStyle("popup");
        checkOut2.setPrefSize(new Dimension(240, 0));
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap2);
        checkOut3.setName("describedSpell");
        checkOut3.setAttribute("visible");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap2);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap2);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap2);
        checkOut5.setExpandable(false);
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap2);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap2);
        checkOut8.setExpandable(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setAlign(Alignment9.WEST);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap2);
        element3.setPrefSize(new Dimension(24, 24));
        element3.setExpandable(false);
        checkOut8.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap2);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap2);
        element3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap2);
        checkOut11.setName("describedSpell");
        checkOut11.setAttribute("texture");
        checkOut11.setField("elementsUsedIconURL");
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap2);
        element5.setStyle("DefaultBold14White");
        element5.setExpandable(false);
        element5.setMinWidth(1);
        element5.setMaxWidth(180);
        checkOut8.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap2);
        element6.setAlign(Alignment9.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance = element5.getAppearance();
        appearance.setElementMap(elementMap2);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH_WEST);
        element5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap2);
        checkOut12.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap2);
        checkOut13.setName("describedSpell");
        checkOut13.setAttribute("text");
        checkOut13.setField("name");
        element5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Spacer element7 = new Spacer();
        element7.onCheckOut();
        element7.setElementMap(elementMap2);
        checkOut7.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap2);
        checkOut14.setExpandable(false);
        checkOut7.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap2);
        element8.setStyle("11light");
        checkOut14.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element8.getAppearance();
        appearance2.setElementMap(elementMap2);
        element8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap2);
        checkOut15.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap2);
        checkOut16.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap2);
        checkOut17.setName("describedSpell");
        checkOut17.setAttribute("text");
        checkOut17.setField("levelTextShort");
        element8.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap2);
        checkOut18.setExpandable(false);
        checkOut5.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut18.getAppearance();
        appearance3.setElementMap(elementMap2);
        checkOut18.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap2);
        checkOut19.setInsets(new Insets(0, 0, 0, 0));
        appearance3.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.EAST);
        checkOut18.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap2);
        checkOut21.setExpandable(false);
        checkOut21.setVisible(false);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHgap((short)2);
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap2);
        checkOut23.setAttribute("visible");
        checkOut23.setName("describedSpell");
        checkOut23.setField("ap");
        checkOut21.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap2);
        checkOut23.addBasicElement(element9);
        element9.onAttributesInitialized();
        final GreaterCondition element10 = new GreaterCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap2);
        element10.setValue("0");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap2);
        element11.setStyle("11Light");
        element11.setExpandable(false);
        checkOut21.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap2);
        checkOut24.setName("describedSpell");
        checkOut24.setAttribute("text");
        checkOut24.setField("ap");
        element11.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap2);
        element12.setStyle("iconAP");
        element12.setExpandable(false);
        checkOut21.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut21.getAppearance();
        appearance4.setElementMap(elementMap2);
        checkOut21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap2);
        checkOut25.setInsets(new Insets(0, 3, 0, 0));
        appearance4.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap2);
        checkOut26.setExpandable(false);
        checkOut26.setVisible(false);
        checkOut18.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setHgap((short)2);
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final PropertyElement checkOut28 = PropertyElement.checkOut();
        checkOut28.setElementMap(elementMap2);
        checkOut28.setAttribute("visible");
        checkOut28.setName("describedSpell");
        checkOut28.setField("chrage");
        checkOut26.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap2);
        checkOut28.addBasicElement(element13);
        element13.onAttributesInitialized();
        final GreaterCondition element14 = new GreaterCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap2);
        element14.setValue("0");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap2);
        element15.setStyle("11Light");
        element15.setExpandable(false);
        checkOut26.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap2);
        checkOut29.setName("describedSpell");
        checkOut29.setAttribute("text");
        checkOut29.setField("chrage");
        element15.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        element15.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap2);
        element16.setStyle("iconCHRAGE");
        element16.setExpandable(false);
        checkOut26.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut26.getAppearance();
        appearance5.setElementMap(elementMap2);
        checkOut26.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap2);
        checkOut30.setInsets(new Insets(0, 3, 0, 0));
        appearance5.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut26.onChildrenAdded();
        final Container checkOut31 = Container.checkOut();
        checkOut31.setElementMap(elementMap2);
        checkOut31.setExpandable(false);
        checkOut31.setVisible(false);
        checkOut18.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        final RowLayout checkOut32 = RowLayout.checkOut();
        checkOut32.setHgap((short)2);
        checkOut31.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        final PropertyElement checkOut33 = PropertyElement.checkOut();
        checkOut33.setElementMap(elementMap2);
        checkOut33.setAttribute("visible");
        checkOut33.setName("describedSpell");
        checkOut33.setField("mp");
        checkOut31.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap2);
        checkOut33.addBasicElement(element17);
        element17.onAttributesInitialized();
        final GreaterCondition element18 = new GreaterCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap2);
        element18.setValue("0");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut33.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap2);
        element19.setStyle("11Light");
        element19.setExpandable(false);
        checkOut31.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PropertyElement checkOut34 = PropertyElement.checkOut();
        checkOut34.setElementMap(elementMap2);
        checkOut34.setName("describedSpell");
        checkOut34.setAttribute("text");
        checkOut34.setField("mp");
        element19.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        checkOut34.onChildrenAdded();
        element19.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap2);
        element20.setStyle("iconMP");
        element20.setExpandable(false);
        checkOut31.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut31.getAppearance();
        appearance6.setElementMap(elementMap2);
        checkOut31.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut35 = Margin.checkOut();
        checkOut35.setElementMap(elementMap2);
        checkOut35.setInsets(new Insets(0, 3, 0, 0));
        appearance6.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        checkOut35.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut31.onChildrenAdded();
        final Container checkOut36 = Container.checkOut();
        checkOut36.setElementMap(elementMap2);
        checkOut36.setExpandable(false);
        checkOut36.setVisible(false);
        checkOut18.addBasicElement(checkOut36);
        checkOut36.onAttributesInitialized();
        final RowLayout checkOut37 = RowLayout.checkOut();
        checkOut37.setHgap((short)2);
        checkOut36.addBasicElement(checkOut37);
        checkOut37.onAttributesInitialized();
        checkOut37.onChildrenAdded();
        final PropertyElement checkOut38 = PropertyElement.checkOut();
        checkOut38.setElementMap(elementMap2);
        checkOut38.setAttribute("visible");
        checkOut38.setName("describedSpell");
        checkOut38.setField("wp");
        checkOut36.addBasicElement(checkOut38);
        checkOut38.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap2);
        checkOut38.addBasicElement(element21);
        element21.onAttributesInitialized();
        final GreaterCondition element22 = new GreaterCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap2);
        element22.setValue("0");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut38.onChildrenAdded();
        final Label element23 = new Label();
        element23.onCheckOut();
        element23.setElementMap(elementMap2);
        element23.setStyle("11Light");
        element23.setExpandable(false);
        checkOut36.addBasicElement(element23);
        element23.onAttributesInitialized();
        final PropertyElement checkOut39 = PropertyElement.checkOut();
        checkOut39.setElementMap(elementMap2);
        checkOut39.setName("describedSpell");
        checkOut39.setAttribute("text");
        checkOut39.setField("wp");
        element23.addBasicElement(checkOut39);
        checkOut39.onAttributesInitialized();
        checkOut39.onChildrenAdded();
        element23.onChildrenAdded();
        final Image element24 = new Image();
        element24.onCheckOut();
        element24.setElementMap(elementMap2);
        element24.setStyle("iconWP");
        element24.setExpandable(false);
        checkOut36.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut36.getAppearance();
        appearance7.setElementMap(elementMap2);
        checkOut36.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut40 = Margin.checkOut();
        checkOut40.setElementMap(elementMap2);
        checkOut40.setInsets(new Insets(0, 3, 0, 0));
        appearance7.addBasicElement(checkOut40);
        checkOut40.onAttributesInitialized();
        checkOut40.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut36.onChildrenAdded();
        final Container checkOut41 = Container.checkOut();
        checkOut41.setElementMap(elementMap2);
        checkOut41.setExpandable(false);
        checkOut18.addBasicElement(checkOut41);
        checkOut41.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut41.getAppearance();
        appearance8.setElementMap(elementMap2);
        checkOut41.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut42 = Margin.checkOut();
        checkOut42.setElementMap(elementMap2);
        checkOut42.setInsets(new Insets(2, 0, 0, 0));
        appearance8.addBasicElement(checkOut42);
        checkOut42.onAttributesInitialized();
        checkOut42.onChildrenAdded();
        appearance8.onChildrenAdded();
        this.method79(checkOut41);
        this.method80(checkOut41);
        this.method81(checkOut41);
        this.method82(checkOut41);
        this.method83(checkOut41);
        this.method84(checkOut41);
        this.method85(checkOut41);
        checkOut41.onChildrenAdded();
        checkOut18.onChildrenAdded();
        checkOut5.onChildrenAdded();
        this.method86(checkOut2);
        this.method87(checkOut2);
        this.method88(checkOut2);
        this.method89(checkOut2);
        this.method90(checkOut2);
        this.method91(checkOut2);
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        this.elementMaps.pop();
        final ElementMap elementMap3 = this.elementMaps.peek();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method79(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.EAST);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method80(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHgap((short)2);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method81(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("11Light");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("text");
        checkOut.setField("range");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method82(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("rangeIcon");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("style");
        checkOut.setField("testLineOfSight");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("rangeIcon");
        element2.setElseValue("noLineOfSightIcon");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method83(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("UnlockedRange");
        element.setExpandable(false);
        element.setNonBlocking(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("visible");
        checkOut.setField("modifiableRange");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method84(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("SpellInLine");
        element.setExpandable(false);
        element.setNonBlocking(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedSpell");
        checkOut.setAttribute("visible");
        checkOut.setField("castOnlyInLine");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method85(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method86(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("describedSpell");
        checkOut2.setField("longDescription");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setValue("false");
        element.setElseValue("true");
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NullCondition element2 = new NullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setStyle("narrow12");
        element3.setMinWidth(1);
        element3.setMaxWidth(230);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setAttribute("text");
        checkOut8.setField("longDescription");
        element3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method87(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("describedSpell");
        checkOut2.setField("hasCastIntervalRestrictions");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%requirements%".replace("%requirements%", Xulor.getInstance().getTranslatedString("requirements")));
        element.setStyle("11BoldLight");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 5, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white11");
        element2.setMinWidth(1);
        element2.setMaxWidth(225);
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance3 = element2.getAppearance();
        appearance3.setElementMap(elementMap);
        element2.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 5, 0));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setAttribute("text");
        checkOut8.setField("castIntervalRestrictionsDescription");
        element2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method88(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut3.setStyle("lineSeparator2");
        checkOut3.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("describedSpell");
        checkOut5.setField("effectNumber");
        element.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("false");
        element3.setElseValue("true");
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final EqualCondition element4 = new EqualCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("0");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white11");
        element9.setMultiline(false);
        element9.setMinWidth(250);
        element9.setMaxWidth(250);
        element9.setExpandable(false);
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element5.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("describedSpell");
        checkOut8.setAttribute("content");
        checkOut8.setField("description");
        element.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method89(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut3.setStyle("lineSeparator2");
        checkOut3.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("white11");
        element7.setMultiline(false);
        element7.setMinWidth(250);
        element7.setMaxWidth(250);
        element7.setExpandable(false);
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method90(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setStyle("lineSeparator2");
        checkOut.setPrefSize(new Dimension(50, 1));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method91(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setMultiline(true);
        element.setMinWidth(0);
        element.setStyle("PopupInformation");
        element.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
