package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class FreeCollectMachineDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public FreeCollectMachineDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "collectMachineWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setNonBlocking(true);
        element9.setText("%chat.contactList%".replace("%chat.contactList%", Xulor.getInstance().getTranslatedString("chat.contactList")));
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("text");
        checkOut8.setName("collectMachine");
        checkOut8.setField("name");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut9.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut11);
        }
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut12.getAppearance();
        appearance6.setElementMap(elementMap);
        appearance6.setModulationColor(new Color(0.9f, 0.9f, 0.9f, 1.0f));
        checkOut12.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setAlign(Alignment9.NORTH);
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final String id3 = "localMoney";
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut16);
        }
        checkOut16.setExpandable(false);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.EAST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut16.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setStyle("characterSheetAptitudePoints");
        checkOut18.setPrefSize(new Dimension(120, 31));
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.CENTER);
        element11.setSize(new Dimension(100.0f, 100.0f));
        element11.setYOffset(2);
        checkOut18.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        checkOut19.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut19.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 0, 10));
        appearance7.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance7.onChildrenAdded();
        final String id4 = "money";
        final Label label = new Label();
        label.onCheckOut();
        label.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, label);
        }
        label.setStyle("smallTitle");
        label.setPrefSize(new Dimension(75, 0));
        label.setExpandable(false);
        checkOut19.addBasicElement(label);
        label.onAttributesInitialized();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("collectMachine");
        checkOut21.setAttribute("text");
        checkOut21.setField("kama");
        label.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final DecoratorAppearance appearance8 = label.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlignment(Alignment9.EAST);
        label.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(0, 0, 2, 5));
        appearance8.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance8.onChildrenAdded();
        label.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("kamas");
        element13.setExpandable(false);
        checkOut19.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element13.getAppearance();
        appearance9.setElementMap(elementMap);
        element13.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 0, 2, 0));
        appearance9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance9.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut19.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut14.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final RowLayout checkOut25 = RowLayout.checkOut();
        checkOut25.setHorizontal(false);
        checkOut24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final Button element14 = new Button();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setText("%takeKamas%".replace("%takeKamas%", Xulor.getInstance().getTranslatedString("takeKamas")));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.collectMachine:takeKamas");
        element14.setOnClick(onClick);
        element14.setExpandable(false);
        checkOut24.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element14.getAppearance();
        appearance10.setElementMap(elementMap);
        element14.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(0, 0, 0, 5));
        appearance10.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance10.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut24.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut14.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final RowLayout checkOut28 = RowLayout.checkOut();
        checkOut28.setHorizontal(false);
        checkOut27.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final Button element15 = new Button();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setText("%giveKamas%".replace("%giveKamas%", Xulor.getInstance().getTranslatedString("giveKamas")));
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.collectMachine:giveKamas");
        element15.setOnClick(onClick2);
        element15.setExpandable(false);
        checkOut27.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance11 = element15.getAppearance();
        appearance11.setElementMap(elementMap);
        element15.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut29 = Margin.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setInsets(new Insets(0, 0, 0, 5));
        appearance11.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        appearance11.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut27.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setStyle("white");
        checkOut30.setExpandable(false);
        checkOut12.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final DecoratorAppearance appearance12 = checkOut30.getAppearance();
        appearance12.setElementMap(elementMap);
        appearance12.setModulationColor(new Color(0.73f, 0.77f, 0.79f, 1.0f));
        checkOut30.addBasicElement(appearance12);
        appearance12.onAttributesInitialized();
        final Padding element16 = new Padding();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setInsets(new Insets(10, 10, 10, 10));
        appearance12.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        appearance12.onChildrenAdded();
        final String id5 = "itemList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, list);
        }
        list.setCellSize(new Dimension(40, 40));
        list.setHorizontal(false);
        list.setAutoIdealSize(true);
        list.setIdealSizeMinRows(5);
        list.setIdealSizeMaxRows(5);
        list.setIdealSizeMaxColumns(8);
        list.setIdealSizeMinColumns(8);
        list.setSelectionTogglable(false);
        checkOut30.addBasicElement(list);
        list.onAttributesInitialized();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.WEST);
        list.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PropertyElement checkOut31 = PropertyElement.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setName("collectMachine");
        checkOut31.setAttribute("content");
        checkOut31.setField("content");
        list.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final ItemRenderer element18 = new ItemRenderer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        final ItemDoubleClickListener onItemDoubleClick = new ItemDoubleClickListener();
        onItemDoubleClick.setCallBackFunc("wakfu.collectMachine:onItemDoubleClick");
        element18.setOnItemDoubleClick(onItemDoubleClick);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.equipment:openItemDetailWindow(collectMachineWindow)");
        element18.setOnItemClick(onItemClick);
        list.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ItemCondition element20 = new ItemCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final NotNullCondition element21 = new NotNullCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final String id6 = "currentItem";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, data);
        }
        element18.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("value");
        data.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut32 = Container.checkOut();
        checkOut32.setElementMap(elementMap);
        element18.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        final StaticLayout element23 = new StaticLayout();
        element23.onCheckOut();
        checkOut32.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final String id7 = "itemContainer";
        final Container checkOut33 = Container.checkOut();
        checkOut33.setElementMap(elementMap);
        if (elementMap != null && id7 != null) {
            elementMap.add(id7, checkOut33);
        }
        checkOut33.setNonBlocking(false);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.collectMachine:changeItemBackground(currentItem,collectMachineWindow,itemPopup)");
        checkOut33.setOnMouseExit(onMouseExit);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.collectMachine:changeItemBackground(currentItem,collectMachineWindow,itemPopup)");
        checkOut33.setOnMouseEnter(onMouseEnter);
        checkOut32.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment17.CENTER);
        element24.setSize(new Dimension(43, 43));
        checkOut33.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        this.method0(checkOut33);
        this.method1(checkOut33);
        this.method2(checkOut33);
        checkOut33.onChildrenAdded();
        this.method3(checkOut32);
        checkOut32.onChildrenAdded();
        element18.onChildrenAdded();
        this.method4(list);
        this.method5(list);
        list.onChildrenAdded();
        checkOut30.onChildrenAdded();
        checkOut12.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method6(element);
        this.method7(element);
        this.method8(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "itemPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteBold");
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("style");
        element.setField("backgroundStyle");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DragNDropContainer element = new DragNDropContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final DropListener onDrop = new DropListener();
        onDrop.setCallBackFunc("wakfu.collectMachine:dropItem");
        element.setOnDrop(onDrop);
        final DragListener onDrag = new DragListener();
        onDrag.setCallBackFunc("wakfu.collectMachine:dragItem");
        element.setOnDrag(onDrag);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("dragEnabled");
        element2.setField("movable");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setNonBlocking(true);
        element4.setDisplaySize(new Dimension(38, 38));
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.CENTER);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        element4.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("texture");
        element6.setField("iconUrl");
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.CENTER);
        element7.setSize(new Dimension(40, 40));
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("visible");
        element8.setField("movable");
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final FalseCondition element10 = new FalseCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element11 = new PlainBackground();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        appearance.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setStyle("White10Bordered");
        element.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("visible");
        element13.setField("quantity");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final GreaterCondition element15 = new GreaterCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setValue("1");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.SOUTH_WEST);
        element12.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance2 = element12.getAppearance();
        appearance2.setElementMap(elementMap);
        element12.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 6, 6, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("quantity");
        element12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element12.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(true);
        checkOut.setStyle("ItemBackgroundPerfectVariant");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(43, 43));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("isPerfect");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NullCondition element5 = new NullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("tableIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final LessCondition element7 = new LessCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("collectMachine");
        checkOut.setField("freeBagSlotsSize");
        checkOut.setAttribute("value");
        element7.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final String id = "itemBackgroundContainer";
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut3);
        }
        checkOut3.setStyle("itemBackground");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setSize(new Dimension(43, 43));
        checkOut3.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DragNDropContainer element10 = new DragNDropContainer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        final DropListener onDrop = new DropListener();
        onDrop.setCallBackFunc("wakfu.collectMachine:dropItem");
        element10.setOnDrop(onDrop);
        checkOut3.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NullCondition element5 = new NullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("tableIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotCondition element7 = new NotCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final LessCondition element8 = new LessCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("collectMachine");
        checkOut.setField("freeBagSlotsSize");
        checkOut.setAttribute("value");
        element8.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        checkOut2.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final String id = "itemBackgroundContainer";
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut3);
        }
        checkOut3.setStyle("itemBackground");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setSize(new Dimension(43, 43));
        checkOut3.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.1f));
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.WEST);
        element.setResizeOnce(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
