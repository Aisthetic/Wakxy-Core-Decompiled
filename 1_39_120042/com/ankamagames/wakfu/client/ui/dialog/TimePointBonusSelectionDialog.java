package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;

public class TimePointBonusSelectionDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public TimePointBonusSelectionDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("backgroundPopup");
        checkOut.setNonBlocking(false);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(25, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(8, 8, 8, 8));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(150, 61));
        checkOut4.setNonBlocking(false);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final String id = "fighter";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut4.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("value");
        checkOut5.setName("selectedFighter");
        data.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        data.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, -2));
        element3.setAlign(Alignment17.SOUTH_EAST);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(0.2f, 0.2f, 0.2f, 0.8f));
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setPrefSize(new Dimension(132, 41));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.NORTH_WEST);
        element6.setYOffset(-20);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("texture");
        checkOut8.setName("fight.timePointSelectionChooser");
        checkOut8.setField("timelineIllustrationUrl");
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("titleBar");
        checkOut9.setPrefSize(new Dimension(0, 20));
        checkOut4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, -2));
        element7.setAlign(Alignment17.NORTH);
        checkOut9.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut9.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(0, 10, 0, 10));
        appearance3.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("title");
        element9.setNonBlocking(true);
        element9.setMaxWidth(130);
        element9.setExpandable(false);
        element9.setEnableAutoZoomShrink(true);
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("text");
        checkOut11.setName("fight.timePointSelectionChooser");
        checkOut11.setField("name");
        element9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(-2, -2));
        element10.setAlign(Alignment17.NORTH_EAST);
        element10.setYOffset(-30);
        checkOut12.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("smallBoldBordered");
        element11.setNonBlocking(true);
        element11.setExpandable(false);
        checkOut12.addBasicElement(element11);
        element11.onAttributesInitialized();
        final RowLayoutData element12 = new RowLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment9.EAST);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance5 = element11.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.CENTER);
        element11.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 0, 0, 3));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("text");
        checkOut15.setColor(new Color(0.95f, 0.64f, 0.25f, 1.0f));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setAttribute("text");
        checkOut16.setName("fight.timePointSelectionChooser");
        checkOut16.setField("level");
        element11.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element11.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setPrefSize(new Dimension(18, 0));
        checkOut12.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("iconHP");
        checkOut17.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("smallBoldBordered");
        checkOut17.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element14.getAppearance();
        appearance6.setElementMap(elementMap);
        element14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 0, 0, 3));
        appearance6.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setAttribute("text");
        checkOut20.setName("fight.timePointSelectionChooser");
        checkOut20.setField("characteristics/TOTAL_HP/minMax");
        element14.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut12.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final String id2 = "list";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, list);
        }
        list.setHorizontal(true);
        list.setCellSize(new Dimension(50, 50));
        list.setAutoIdealSize(true);
        list.setIdealSizeMinRows(2);
        list.setIdealSizeMaxRows(2);
        checkOut.addBasicElement(list);
        list.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.CENTER);
        list.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("fight.timePointAvailableBonuses");
        checkOut21.setAttribute("content");
        list.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final ItemRenderer element16 = new ItemRenderer();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        list.addBasicElement(element16);
        element16.onAttributesInitialized();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setStyle("white");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(bonusPopup2)");
        checkOut22.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut22.setOnPopupHide(onPopupHide);
        checkOut22.setNonBlocking(false);
        checkOut22.setExpandable(false);
        element16.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.CENTER);
        checkOut22.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final String id3 = "bonusPopup2";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.SOUTH);
        popupElement.setHotSpotPosition(Alignment9.NORTH);
        checkOut22.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setPrefSize(new Dimension(10, 0));
        checkOut23.setStyle("popup");
        popupElement.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHorizontal(false);
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("whiteBold");
        element18.setText("%timePoint.bonus%".replace("%timePoint.bonus%", Xulor.getInstance().getTranslatedString("timePoint.bonus")));
        checkOut23.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("white");
        checkOut23.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("text");
        element20.setField("description");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("white");
        element21.setText("%timePoint.bonusAlreadySelected%".replace("%timePoint.bonusAlreadySelected%", Xulor.getInstance().getTranslatedString("timePoint.bonusAlreadySelected")));
        checkOut23.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element21.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setTextColor(new Color(1.0f, 0.0f, 0.0f, 1.0f));
        element21.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut25 = ColorElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("text");
        checkOut25.setColor(new Color(1.0f, 0.0f, 0.0f, 1.0f));
        appearance7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance7.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut23.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance8 = checkOut22.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("modulationColor");
        element22.setField("isAvailable");
        appearance8.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setValue("1,1,1,1");
        element23.setElseValue("1,1,1,0.0");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final TrueCondition element24 = new TrueCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        appearance8.onChildrenAdded();
        final StaticLayout element25 = new StaticLayout();
        element25.onCheckOut();
        element25.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final String id4 = "bonus";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, data2);
        }
        checkOut22.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        data2.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        data2.onChildrenAdded();
        final Button element27 = new Button();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("flat");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.timePointSelection:selectEffect(bonus)");
        element27.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(bonusPopup)");
        element27.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element27.setOnPopupHide(onPopupHide2);
        checkOut22.addBasicElement(element27);
        element27.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setSize(new Dimension(100.0f, 100.0f));
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final String id5 = "bonusPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement2);
        }
        popupElement2.setAlign(Alignment9.SOUTH);
        popupElement2.setHotSpotPosition(Alignment9.NORTH);
        element27.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setPrefSize(new Dimension(10, 0));
        checkOut26.setStyle("popup");
        popupElement2.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setHorizontal(false);
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        this.method0(checkOut26);
        this.method1(checkOut26);
        checkOut26.onChildrenAdded();
        popupElement2.onChildrenAdded();
        this.method2(element27);
        element27.onChildrenAdded();
        this.method3(checkOut22);
        this.method4(checkOut22);
        checkOut22.onChildrenAdded();
        element16.onChildrenAdded();
        list.onChildrenAdded();
        this.method5(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteBold");
        element.setText("%timePoint.bonus%".replace("%timePoint.bonus%", Xulor.getInstance().getTranslatedString("timePoint.bonus")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("description");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("isAvailable");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "image";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, image);
        }
        image.setDisplaySize(new Dimension(48, 48));
        image.setNonBlocking(true);
        image.setExpandable(false);
        basicElement.addBasicElement(image);
        image.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.CENTER);
        image.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("modulationColor");
        element2.setField("isAvailable");
        image.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("1,1,1,1");
        element3.setElseValue("1,1,1,0.5");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        image.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("texture");
        element5.setField("iconUrl");
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        image.onChildrenAdded();
        return image;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("backgroundPopupLight");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("stack");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("1");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(2, 2, 2, 2));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.SOUTH_EAST);
        element5.setSize(new Dimension(-2, -2));
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("White10Bordered");
        element6.setExpandable(false);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("stack");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(3, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final String id = "progressBar";
        final ProgressBar progressBar = new ProgressBar();
        progressBar.onCheckOut();
        progressBar.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, progressBar);
        }
        progressBar.setStyle("XP2");
        progressBar.setUseIncreaseProgressTween(false);
        checkOut.addBasicElement(progressBar);
        progressBar.onAttributesInitialized();
        final DecoratorAppearance appearance2 = progressBar.getAppearance();
        appearance2.setElementMap(elementMap);
        progressBar.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(1, 1, 1, 1));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 15));
        element2.setAlign(Alignment17.CENTER);
        element2.setYOffset(-1);
        progressBar.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        progressBar.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("ProgressBar");
        checkOut4.setNonBlocking(true);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 15));
        element3.setAlign(Alignment17.CENTER);
        element3.setYOffset(-1);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
