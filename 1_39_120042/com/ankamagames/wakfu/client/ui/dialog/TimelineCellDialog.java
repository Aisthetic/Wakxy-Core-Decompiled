package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import java.awt.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.decorator.mesh.*;
import com.ankamagames.xulor2.appearance.*;

public class TimelineCellDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public TimelineCellDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final WatcherContainer watcherContainer = new WatcherContainer();
        watcherContainer.onCheckOut();
        watcherContainer.setElementMap(elementMap);
        watcherContainer.setPack(true);
        watcherContainer.setAlign(Alignment9.NORTH);
        watcherContainer.setNonBlocking(true);
        watcherContainer.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(true);
        watcherContainer.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("timeline.displayHPBar");
        checkOut2.setAttribute("visible");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setAttribute("comparedValue");
        checkOut3.setName("timeline.fighter");
        checkOut3.setField("visible");
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut5.setNonBlocking(true);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut5.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 5, 0));
        appearance.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setLocal(true);
        checkOut7.setAttribute("visible");
        checkOut7.setName("timeline.fighter");
        checkOut7.setField("characteristics/ARMOR_PLATE/value");
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        final GreaterCondition element6 = new GreaterCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("0");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bigTitle");
        element7.setExpandable(false);
        element7.setNonBlocking(true);
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setAttribute("text");
        checkOut8.setName("timeline.fighter");
        checkOut8.setField("characteristics/ARMOR_PLATE/value");
        element7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("IconFecaArmor");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut9.setNonBlocking(true);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setLocal(true);
        checkOut10.setAttribute("visible");
        checkOut10.setName("timeline.fighter");
        checkOut10.setField("characteristics/ARMOR/value");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut10.addBasicElement(element9);
        element9.onAttributesInitialized();
        final GreaterCondition element10 = new GreaterCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut9.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBorder element11 = new PlainBorder();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setInsets(new Insets(1, 1, 1, 1));
        element11.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance2.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PlainBackground element12 = new PlainBackground();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        appearance2.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element13 = new StaticLayout();
        element13.onCheckOut();
        element13.setAdaptToContentSize(true);
        checkOut9.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final ProgressBar element14 = new ProgressBar();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("hp");
        element14.setUseIncreaseProgressTween(true);
        element14.setUseDecreaseProgressTween(true);
        element14.setPrefSize(new Dimension(45, 6));
        element14.setNonBlocking(true);
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setLocal(true);
        checkOut11.setAttribute("maxBound");
        checkOut11.setName("timeline.fighter");
        checkOut11.setField("characteristics/ARMOR/max");
        element14.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setLocal(true);
        checkOut12.setAttribute("value");
        checkOut12.setName("timeline.fighter");
        checkOut12.setField("characteristics/ARMOR/value");
        element14.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance3 = element14.getAppearance();
        appearance3.setElementMap(elementMap);
        element14.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.0f, 0.4f, 0.1f, 1.0f));
        checkOut13.setName("progressBar");
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setSize(new Dimension(100.0f, 100.0f));
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setNonBlocking(true);
        checkOut9.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setSize(new Dimension(100.0f, 100.0f));
        checkOut14.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut14.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final GradientBackground element17 = new GradientBackground();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        appearance4.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        checkOut15.setColor(new Color(1.0f, 1.0f, 1.0f, 0.45f));
        element17.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        checkOut16.setColor(new Color(1.0f, 1.0f, 1.0f, 0.45f));
        element17.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final ColorElement checkOut17 = ColorElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        checkOut17.setColor(new Color(1.0f, 1.0f, 1.0f, 0.0f));
        element17.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        checkOut18.setColor(new Color(1.0f, 1.0f, 1.0f, 0.0f));
        element17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        element17.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setExpandable(false);
        checkOut19.setNonBlocking(true);
        checkOut.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut19.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final PlainBorder element18 = new PlainBorder();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setInsets(new Insets(1, 1, 1, 1));
        element18.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance5.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PlainBackground element19 = new PlainBackground();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        appearance5.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayout element20 = new StaticLayout();
        element20.onCheckOut();
        element20.setAdaptToContentSize(true);
        checkOut19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ProgressBar element21 = new ProgressBar();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("hp2");
        element21.setUseIncreaseProgressTween(true);
        element21.setUseDecreaseProgressTween(true);
        element21.setPrefSize(new Dimension(45, 6));
        element21.setNonBlocking(true);
        checkOut19.addBasicElement(element21);
        element21.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setLocal(true);
        checkOut20.setAttribute("maxBound");
        checkOut20.setName("timeline.fighter");
        checkOut20.setField("characteristics/TOTAL_HP/max");
        element21.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setLocal(true);
        checkOut21.setAttribute("value");
        checkOut21.setName("timeline.fighter");
        checkOut21.setField("characteristics/TOTAL_HP/value");
        element21.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setSize(new Dimension(100.0f, 100.0f));
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        final ProgressBar element23 = new ProgressBar();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("hp");
        element23.setUseIncreaseProgressTween(true);
        element23.setUseDecreaseProgressTween(true);
        element23.setPrefSize(new Dimension(45, 6));
        element23.setNonBlocking(true);
        checkOut19.addBasicElement(element23);
        element23.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setLocal(true);
        checkOut22.setAttribute("maxBound");
        checkOut22.setName("timeline.fighter");
        checkOut22.setField("characteristics/TOTAL_HP/max");
        element23.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setLocal(true);
        checkOut23.setAttribute("value");
        checkOut23.setName("timeline.fighter");
        checkOut23.setField("characteristics/HP/value");
        element23.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setSize(new Dimension(100.0f, 100.0f));
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setNonBlocking(true);
        checkOut19.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setSize(new Dimension(100.0f, 100.0f));
        checkOut24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut24.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut24.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final GradientBackground element26 = new GradientBackground();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        appearance6.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ColorElement checkOut25 = ColorElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        checkOut25.setColor(new Color(1.0f, 1.0f, 1.0f, 0.45f));
        element26.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final ColorElement checkOut26 = ColorElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        checkOut26.setColor(new Color(1.0f, 1.0f, 1.0f, 0.45f));
        element26.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final ColorElement checkOut27 = ColorElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        checkOut27.setColor(new Color(1.0f, 1.0f, 1.0f, 0.0f));
        element26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final ColorElement checkOut28 = ColorElement.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        checkOut28.setColor(new Color(1.0f, 1.0f, 1.0f, 0.0f));
        element26.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        element26.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut24.onChildrenAdded();
        checkOut19.onChildrenAdded();
        checkOut.onChildrenAdded();
        watcherContainer.onChildrenAdded();
        return watcherContainer;
    }
}
