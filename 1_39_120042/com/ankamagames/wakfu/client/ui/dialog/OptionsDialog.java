package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.form.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.layout.*;

public class OptionsDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public OptionsDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Window element3 = new Window();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("windowNew");
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final WindowMovePoint element8 = new WindowMovePoint();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        checkOut3.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element8.getAppearance();
        appearance2.setElementMap(elementMap);
        element8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("titleBar");
        element8.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("StyledBold16White");
        element11.setNonBlocking(true);
        element11.setText("%options%".replace("%options%", Xulor.getInstance().getTranslatedString("options")));
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element11.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element11.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut9.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id = "windowContentContainer";
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut11);
        }
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setNonBlocking(false);
        checkOut13.setExpandable(false);
        checkOut13.setPrefSize(new Dimension(500, 320));
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayout element12 = new StaticLayout();
        element12.onCheckOut();
        element12.setAdaptToContentSize(true);
        checkOut13.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final String id2 = "tabbedContainer";
        final TabbedContainer tabbedContainer = new TabbedContainer();
        tabbedContainer.onCheckOut();
        tabbedContainer.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, tabbedContainer);
        }
        tabbedContainer.setTabsXOffset(6);
        tabbedContainer.setTabsYOffset(-6);
        tabbedContainer.setTabsSizesEquilibrate(false);
        tabbedContainer.setTextOrientation(Orientation.EAST);
        tabbedContainer.setTabsLabelAlignment(Alignment9.CENTER);
        tabbedContainer.setTabsPosition(Alignment4.NORTH);
        tabbedContainer.setTabsAlignment(Alignment5.WEST);
        tabbedContainer.setExpandable(false);
        tabbedContainer.setPrefSize(new Dimension(0, 320));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.options:tabClick(tabbedContainer)");
        tabbedContainer.setOnClick(onClick);
        checkOut13.addBasicElement(tabbedContainer);
        tabbedContainer.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.SOUTH);
        element13.setSize(new Dimension(100.0f, 335));
        tabbedContainer.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance6 = tabbedContainer.getAppearance();
        appearance6.setElementMap(elementMap);
        tabbedContainer.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(5, 0, 0, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("isInGame");
        checkOut15.setAttribute("selectedTabIndex");
        tabbedContainer.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setValue("0");
        element14.setElseValue("1");
        checkOut15.addBasicElement(element14);
        element14.onAttributesInitialized();
        final TrueCondition element15 = new TrueCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final String id3 = "game";
        final TabItem tabItem = new TabItem();
        tabItem.onCheckOut();
        tabItem.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, tabItem);
        }
        tabItem.setText("%game%".replace("%game%", Xulor.getInstance().getTranslatedString("game")));
        tabbedContainer.addBasicElement(tabItem);
        tabItem.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("isInGame");
        checkOut16.setAttribute("enabled");
        tabItem.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setStyle("white");
        tabItem.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut17.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Padding element16 = new Padding();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setInsets(new Insets(0, 15, 10, 15));
        appearance7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ScrollContainer element17 = new ScrollContainer();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        checkOut17.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element17.getAppearance();
        appearance8.setElementMap(elementMap);
        element17.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Padding element18 = new Padding();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setInsets(new Insets(10, 0, 0, 0));
        appearance8.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        element17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut19.setAlign(Alignment9.NORTH);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("bold");
        element19.setText("%options.playability%".replace("%options.playability%", Xulor.getInstance().getTranslatedString("options.playability")));
        element19.setExpandable(false);
        checkOut18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element19.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.WEST);
        element19.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 2, 0));
        appearance9.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance9.onChildrenAdded();
        element19.onChildrenAdded();
        final ToggleButton element20 = new ToggleButton();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setText("%options.interactionOnLeftClick%".replace("%options.interactionOnLeftClick%", Xulor.getInstance().getTranslatedString("options.interactionOnLeftClick")));
        element20.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setInteractionOnLeftClick");
        element20.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(leftClickPopup,1)");
        element20.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element20.setOnPopupHide(onPopupHide);
        checkOut18.addBasicElement(element20);
        element20.onAttributesInitialized();
        final String id4 = "leftClickPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element20.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setMaxWidth(200);
        element21.setMinWidth(1);
        element21.setStyle("white");
        element21.setText("%options.desc.leftClick%".replace("%options.desc.leftClick%", Xulor.getInstance().getTranslatedString("options.desc.leftClick")));
        checkOut21.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element21.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.WEST);
        element21.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut21.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("selected");
        checkOut22.setName("gamePreferences");
        checkOut22.setField("interactionOnLeftClick");
        element20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element20.onChildrenAdded();
        final ToggleButton element22 = new ToggleButton();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setText("%options.addSeedsToShortcutBar%".replace("%options.addSeedsToShortcutBar%", Xulor.getInstance().getTranslatedString("options.addSeedsToShortcutBar")));
        element22.setExpandable(false);
        final SelectionChangedListener onSelectionChange2 = new SelectionChangedListener();
        onSelectionChange2.setCallBackFunc("wakfu.options:setAddSeedsToShortcutBar");
        element22.setOnSelectionChange(onSelectionChange2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(addSeedsToShortcutBarPopup,1)");
        element22.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element22.setOnPopupHide(onPopupHide2);
        checkOut18.addBasicElement(element22);
        element22.onAttributesInitialized();
        final String id5 = "addSeedsToShortcutBarPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element22.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setPrefSize(new Dimension(10, 0));
        checkOut23.setStyle("popup");
        popupElement2.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setMaxWidth(200);
        element23.setMinWidth(1);
        element23.setStyle("white");
        element23.setText("%options.desc.addSeedsToShortcutBar%".replace("%options.desc.addSeedsToShortcutBar%", Xulor.getInstance().getTranslatedString("options.desc.addSeedsToShortcutBar")));
        checkOut23.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance11 = element23.getAppearance();
        appearance11.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance11).setAlign(Alignment9.WEST);
        element23.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        appearance11.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut23.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final DecoratorAppearance appearance12 = element22.getAppearance();
        appearance12.setElementMap(elementMap);
        element22.addBasicElement(appearance12);
        appearance12.onAttributesInitialized();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(0, 0, 10, 0));
        appearance12.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance12.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("selected");
        checkOut25.setName("gamePreferences");
        checkOut25.setField("addSeedsToShortcutBar");
        element22.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        element22.onChildrenAdded();
        final Label element24 = new Label();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("bold");
        element24.setText("%options.fight%".replace("%options.fight%", Xulor.getInstance().getTranslatedString("options.fight")));
        element24.setExpandable(false);
        checkOut18.addBasicElement(element24);
        element24.onAttributesInitialized();
        final DecoratorAppearance appearance13 = element24.getAppearance();
        appearance13.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance13).setAlign(Alignment9.WEST);
        element24.addBasicElement(appearance13);
        appearance13.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(0, 0, 2, 0));
        appearance13.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance13.onChildrenAdded();
        element24.onChildrenAdded();
        this.method0(checkOut18);
        this.method1(checkOut18);
        this.method2(checkOut18);
        this.method3(checkOut18);
        this.method4(checkOut18);
        this.method5(checkOut18);
        this.method6(checkOut18);
        this.method7(checkOut18);
        this.method8(checkOut18);
        this.method9(checkOut18);
        this.method10(checkOut18);
        this.method11(checkOut18);
        this.method12(checkOut18);
        this.method13(checkOut18);
        this.method14(checkOut18);
        checkOut18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut17.onChildrenAdded();
        tabItem.onChildrenAdded();
        this.method15(tabbedContainer);
        this.method28(tabbedContainer);
        this.method35(tabbedContainer);
        this.method36(tabbedContainer);
        tabbedContainer.onChildrenAdded();
        this.method37(checkOut13);
        checkOut13.onChildrenAdded();
        this.method38(checkOut11);
        checkOut11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut3.onChildrenAdded();
        this.method39(element3);
        this.method40(element3);
        element3.onChildrenAdded();
        this.method41(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.autoLockFights%".replace("%options.autoLockFights%", Xulor.getInstance().getTranslatedString("options.autoLockFights")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setAutoLockFights");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(autoLockFightPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "autoLockFightPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.autoLock%".replace("%options.desc.autoLock%", Xulor.getInstance().getTranslatedString("options.desc.autoLock")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("autoLockFights");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.tacticalView%".replace("%options.tacticalView%", Xulor.getInstance().getTranslatedString("options.tacticalView")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setTacticalView");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(tacticalViewPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "tacticalViewPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.tacticalView%".replace("%options.desc.tacticalView%", Xulor.getInstance().getTranslatedString("options.desc.tacticalView")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("tacticalView");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.hideFightOccluders.showNone%".replace("%options.hideFightOccluders.showNone%", Xulor.getInstance().getTranslatedString("options.hideFightOccluders.showNone")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setHideFightOccluders");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(hideFightOccludersPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "hideFightOccludersPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.wallTransparency%".replace("%options.desc.wallTransparency%", Xulor.getInstance().getTranslatedString("options.desc.wallTransparency")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("hideFightOccludersActivated");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.displayHpBar%".replace("%options.displayHpBar%", Xulor.getInstance().getTranslatedString("options.displayHpBar")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setDisplayHPBar");
        element.setOnSelectionChange(onSelectionChange);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("displayHPBar");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.displayXpBar%".replace("%options.displayXpBar%", Xulor.getInstance().getTranslatedString("options.displayXpBar")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setDisplayXPBar");
        element.setOnSelectionChange(onSelectionChange);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("displayXpBar");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bold");
        element.setText("%options.chat%".replace("%options.chat%", Xulor.getInstance().getTranslatedString("options.chat")));
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(10, 0, 2, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.chatAutomaticDisactivation%".replace("%options.chatAutomaticDisactivation%", Xulor.getInstance().getTranslatedString("options.chatAutomaticDisactivation")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setChatAutomaticDisactivation");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(chatBoxLockPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "chatBoxLockPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.chatBoxLock%".replace("%options.desc.chatBoxLock%", Xulor.getInstance().getTranslatedString("options.desc.chatBoxLock")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setSpacing(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("selected");
        checkOut3.setName("gamePreferences");
        checkOut3.setField("chatAutomaticDisactivation");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.lockChatFade%".replace("%options.lockChatFade%", Xulor.getInstance().getTranslatedString("options.lockChatFade")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setChatLockFade");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(chatBoxFadePopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "chatBoxFadePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.chatBoxTransparency%".replace("%options.desc.chatBoxTransparency%", Xulor.getInstance().getTranslatedString("options.desc.chatBoxTransparency")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("chatFade");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.setChatTime%".replace("%options.setChatTime%", Xulor.getInstance().getTranslatedString("options.setChatTime")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setChatTime");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(chatTimePopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "chatTimePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.chatTimePopup%".replace("%options.desc.chatTimePopup%", Xulor.getInstance().getTranslatedString("options.desc.chatTimePopup")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("chatTime");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(50, 0));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 10, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%options.chatfontSize%".replace("%options.chatfontSize%", Xulor.getInstance().getTranslatedString("options.chatfontSize")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element.getAppearance();
        appearance3.setElementMap(elementMap);
        element.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 3));
        appearance3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance3.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut6.setPrefSize(new Dimension(0, 30));
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Slider element3 = new Slider();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setHorizontal(true);
        element3.setStyle("volume");
        element3.setNumFixedValues(3);
        element3.setPrefSize(new Dimension(150, 10));
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.options:setFontSize");
        element3.setOnSliderMove(onSliderMove);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(chatFontSizePopup,1)");
        element3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element3.setOnPopupHide(onPopupHide);
        checkOut6.addBasicElement(element3);
        element3.onAttributesInitialized();
        final String id = "chatFontSizePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setPrefSize(new Dimension(10, 0));
        checkOut7.setStyle("popup");
        popupElement.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setMaxWidth(200);
        element4.setMinWidth(1);
        element4.setStyle("white");
        element4.setText("%options.desc.chatTextHeight%".replace("%options.desc.chatTextHeight%", Xulor.getInstance().getTranslatedString("options.desc.chatTextHeight")));
        checkOut7.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element4.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element4.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut7.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.CENTER);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("value");
        checkOut8.setName("gamePreferences");
        checkOut8.setField("chatTextFontSize");
        element3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element3.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setText("%little.f%".replace("%little.f%", Xulor.getInstance().getTranslatedString("little.f")));
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.SOUTH_WEST);
        element7.setXOffset(5);
        element7.setYOffset(-5);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setText("%medium.f%".replace("%medium.f%", Xulor.getInstance().getTranslatedString("medium.f")));
        checkOut6.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.SOUTH);
        element9.setYOffset(-5);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setText("%high.f%".replace("%high.f%", Xulor.getInstance().getTranslatedString("high.f")));
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.SOUTH_EAST);
        element11.setYOffset(-5);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bold");
        element.setText("%options.misc%".replace("%options.misc%", Xulor.getInstance().getTranslatedString("options.misc")));
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 2, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.emoteIconsActivated%".replace("%options.emoteIconsActivated%", Xulor.getInstance().getTranslatedString("options.emoteIconsActivated")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setEmoteIconsActivated");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(smileyPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "smileyPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.smiley%".replace("%options.desc.smiley%", Xulor.getInstance().getTranslatedString("options.desc.smiley")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("emoteIconsActivated");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.censorActivated%".replace("%options.censorActivated%", Xulor.getInstance().getTranslatedString("options.censorActivated")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setCensorActivated");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(censorPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "censorPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.censor%".replace("%options.desc.censor%", Xulor.getInstance().getTranslatedString("options.desc.censor")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("censorActivated");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final OrCondition element4 = new OrCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final FalseCondition element6 = new FalseCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("systemConfiguration");
        checkOut3.setAttribute("comparedValue");
        checkOut3.setField("clientCanDisableProfanityFilter");
        element6.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("systemConfiguration");
        checkOut4.setAttribute("enabled");
        checkOut4.setField("clientCanDisableProfanityFilter");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.tipsActivated%".replace("%options.tipsActivated%", Xulor.getInstance().getTranslatedString("options.tipsActivated")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setTipsActivated");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(tipsActivatedPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "tipsActivatedPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.tipsActivated%".replace("%options.desc.tipsActivated%", Xulor.getInstance().getTranslatedString("options.desc.tipsActivated")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("tipsActivated");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(50, 0));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 10, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%options.setOverHeadDelay%".replace("%options.setOverHeadDelay%", Xulor.getInstance().getTranslatedString("options.setOverHeadDelay")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element.getAppearance();
        appearance3.setElementMap(elementMap);
        element.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 3));
        appearance3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance3.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut6.setPrefSize(new Dimension(0, 30));
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Slider element3 = new Slider();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setHorizontal(true);
        element3.setStyle("volume");
        element3.setNumFixedValues(3);
        element3.setPrefSize(new Dimension(150, 10));
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.options:setOverHeadDelay");
        element3.setOnSliderMove(onSliderMove);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(overlayDelayPopup,1)");
        element3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element3.setOnPopupHide(onPopupHide);
        checkOut6.addBasicElement(element3);
        element3.onAttributesInitialized();
        final String id = "overlayDelayPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setPrefSize(new Dimension(10, 0));
        checkOut7.setStyle("popup");
        popupElement.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setMaxWidth(200);
        element4.setMinWidth(1);
        element4.setStyle("white");
        element4.setText("%options.desc.tooltipTime%".replace("%options.desc.tooltipTime%", Xulor.getInstance().getTranslatedString("options.desc.tooltipTime")));
        checkOut7.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element4.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element4.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut7.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.CENTER);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("value");
        checkOut8.setName("gamePreferences");
        checkOut8.setField("overHeadDelay");
        element3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element3.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setText("0s");
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.SOUTH_WEST);
        element7.setXOffset(5);
        element7.setYOffset(-5);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setText("0,5s");
        checkOut6.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.SOUTH);
        element9.setYOffset(-5);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setText("1s");
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.SOUTH_EAST);
        element11.setYOffset(-5);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%video%".replace("%video%", Xulor.getInstance().getTranslatedString("video")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("white");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 10, 15));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ScrollContainer element3 = new ScrollContainer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setVerticalScrollBarPosition(50.0f);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 0, 0, 0));
        appearance2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("bold");
        element5.setText("%options.display%".replace("%options.display%", Xulor.getInstance().getTranslatedString("options.display")));
        element5.setExpandable(false);
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 0, 10));
        appearance3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final String id = "resolutionForm";
        final Form element6 = new Form();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element6);
        }
        this.env.openForm(((elementMap != null) ? elementMap.getId() : "") + ".resolutionForm", element6);
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(0, 26));
        checkOut5.setExpandable(false);
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut5.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 10, 0));
        appearance4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final String id2 = "screenModeComboBox";
        final ComboBox comboBox = new ComboBox();
        comboBox.onCheckOut();
        comboBox.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, comboBox);
        }
        comboBox.setExpandable(false);
        comboBox.setPrefSize(new Dimension(200, 0));
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.options:onScreenModeChanged()");
        comboBox.setOnListSelectionChange(onListSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(displayModePopup,1)");
        comboBox.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        comboBox.setOnPopupHide(onPopupHide);
        checkOut7.addBasicElement(comboBox);
        comboBox.onAttributesInitialized();
        final String id3 = "displayModePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        comboBox.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setMaxWidth(200);
        element7.setMinWidth(1);
        element7.setStyle("white");
        element7.setText("%options.desc.display%".replace("%options.desc.display%", Xulor.getInstance().getTranslatedString("options.desc.display")));
        checkOut8.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element7.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element7.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setAttribute("content");
        checkOut9.setName("resolutionsManager");
        checkOut9.setField("availableModes");
        comboBox.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("selectedValue");
        checkOut10.setName("resolutionsManager");
        checkOut10.setField("selectedMode");
        comboBox.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final RenderableContainer element8 = new RenderableContainer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        comboBox.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ItemRenderer element9 = new ItemRenderer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("text");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final List element12 = new List();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setHorizontal(false);
        element12.setCellSize(new Dimension(100.0f, 16));
        comboBox.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemRenderer element13 = new ItemRenderer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setNonBlocking(true);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        comboBox.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(0, 26));
        checkOut11.setExpandable(false);
        element6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 0, 10, 0));
        appearance6.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setAttribute("visible");
        checkOut13.setName("resolutionsManager");
        checkOut13.setField("isFullScreenModeSelected");
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Label element16 = new Label();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setText("%resolution%".replace("%resolution%", Xulor.getInstance().getTranslatedString("resolution")));
        element16.setExpandable(false);
        checkOut14.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element16.getAppearance();
        appearance7.setElementMap(elementMap);
        element16.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 0, 0, 10));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance7.onChildrenAdded();
        element16.onChildrenAdded();
        final String id4 = "screenResolutionComboBox";
        final ComboBox comboBox2 = new ComboBox();
        comboBox2.onCheckOut();
        comboBox2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, comboBox2);
        }
        comboBox2.setExpandable(false);
        comboBox2.setPrefSize(new Dimension(150, 0));
        final ListSelectionChangedListener onListSelectionChange2 = new ListSelectionChangedListener();
        onListSelectionChange2.setCallBackFunc("wakfu.options:onScreenSizeChanged()");
        comboBox2.setOnListSelectionChange(onListSelectionChange2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(resolutionPopup,1)");
        comboBox2.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        comboBox2.setOnPopupHide(onPopupHide2);
        checkOut14.addBasicElement(comboBox2);
        comboBox2.onAttributesInitialized();
        final String id5 = "resolutionPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        comboBox2.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        popupElement2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setMaxWidth(200);
        element17.setMinWidth(1);
        element17.setStyle("white");
        element17.setText("%options.desc.resolution%".replace("%options.desc.resolution%", Xulor.getInstance().getTranslatedString("options.desc.resolution")));
        checkOut16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element17.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element17.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut16.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setAttribute("content");
        checkOut17.setName("resolutionsManager");
        checkOut17.setField("availableResolutions");
        comboBox2.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("selectedValue");
        checkOut18.setName("resolutionsManager");
        checkOut18.setField("selectedResolution");
        comboBox2.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final RenderableContainer element18 = new RenderableContainer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        comboBox2.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final Label element20 = new Label();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setNonBlocking(true);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final List element22 = new List();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setHorizontal(false);
        element22.setCellSize(new Dimension(100.0f, 16));
        comboBox2.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ItemRenderer element23 = new ItemRenderer();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final Label element24 = new Label();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setNonBlocking(true);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("text");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        comboBox2.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element6.onChildrenAdded();
        this.env.closeForm(((elementMap != null) ? elementMap.getId() : "") + ".resolutionForm");
        final Label element26 = new Label();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("bold");
        element26.setText("%options.graphicalPresets%".replace("%options.graphicalPresets%", Xulor.getInstance().getTranslatedString("options.graphicalPresets")));
        element26.setExpandable(false);
        checkOut3.addBasicElement(element26);
        element26.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element26.getAppearance();
        appearance9.setElementMap(elementMap);
        element26.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 0, 0, 0));
        appearance9.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance9.onChildrenAdded();
        element26.onChildrenAdded();
        final String id6 = "graphicalPresetsComboBox";
        final ComboBox comboBox3 = new ComboBox();
        comboBox3.onCheckOut();
        comboBox3.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, comboBox3);
        }
        comboBox3.setExpandable(false);
        comboBox3.setPrefSize(new Dimension(200, 0));
        final ListSelectionChangedListener onListSelectionChange3 = new ListSelectionChangedListener();
        onListSelectionChange3.setCallBackFunc("wakfu.options:onGraphicalPresetsChanged");
        comboBox3.setOnListSelectionChange(onListSelectionChange3);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(graphicalPresetsPopup,1)");
        comboBox3.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        comboBox3.setOnPopupHide(onPopupHide3);
        checkOut3.addBasicElement(comboBox3);
        comboBox3.onAttributesInitialized();
        final RowLayoutData element27 = new RowLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAlign(Alignment9.WEST);
        comboBox3.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance10 = comboBox3.getAppearance();
        appearance10.setElementMap(elementMap);
        comboBox3.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 5, 0));
        appearance10.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance10.onChildrenAdded();
        final String id7 = "graphicalPresetsPopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id7 != null) {
            elementMap.add(id7, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH);
        popupElement3.setHotSpotPosition(Alignment9.SOUTH);
        comboBox3.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement3.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final TextView element28 = new TextView();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setMaxWidth(200);
        element28.setMinWidth(1);
        element28.setStyle("white");
        element28.setText("%options.desc.graphicalPresets%".replace("%options.desc.graphicalPresets%", Xulor.getInstance().getTranslatedString("options.desc.graphicalPresets")));
        checkOut21.addBasicElement(element28);
        element28.onAttributesInitialized();
        this.method16(element28);
        element28.onChildrenAdded();
        checkOut21.onChildrenAdded();
        popupElement3.onChildrenAdded();
        this.method17(comboBox3);
        this.method18(comboBox3);
        this.method19(comboBox3);
        this.method20(comboBox3);
        comboBox3.onChildrenAdded();
        this.method21(checkOut3);
        this.method22(checkOut3);
        this.method23(checkOut3);
        this.method24(checkOut3);
        this.method25(checkOut3);
        this.method26(checkOut3);
        this.method27(checkOut3);
        checkOut3.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("content");
        checkOut.setName("options.graphicalPresets");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("selectedValue");
        checkOut.setName("gamePreferences");
        checkOut.setField("graphicalPresets");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RenderableContainer element = new RenderableContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setNonBlocking(true);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("text");
        element4.setField("name");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(false);
        element.setCellSize(new Dimension(100.0f, 16));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setNonBlocking(true);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("text");
        element4.setField("name");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%options.LODLevel% %min%".replace("%options.LODLevel%", Xulor.getInstance().getTranslatedString("options.LODLevel")).replace("%min%", Xulor.getInstance().getTranslatedString("min")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final String id = "lod";
        final Slider slider = new Slider();
        slider.onCheckOut();
        slider.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, slider);
        }
        slider.setExpandable(false);
        slider.setHorizontal(true);
        slider.setStyle("volume");
        slider.setPrefSize(new Dimension(150, 0));
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.options:setLODLevel");
        slider.setOnSliderMove(onSliderMove);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(lodPopup,1)");
        slider.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        slider.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(slider);
        slider.onAttributesInitialized();
        final String id2 = "lodPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        slider.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.detailLevel%".replace("%options.desc.detailLevel%", Xulor.getInstance().getTranslatedString("options.desc.detailLevel")));
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element2.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("gamePreferences");
        checkOut6.setAttribute("value");
        checkOut6.setField("LODLevel");
        slider.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("options.numLOD");
        checkOut7.setAttribute("numFixedValues");
        slider.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        slider.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setText("%max%".replace("%max%", Xulor.getInstance().getTranslatedString("max")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element3.getAppearance();
        appearance4.setElementMap(elementMap);
        element3.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 3, 0, 0));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%options.FightLODLevel% %min%".replace("%options.FightLODLevel%", Xulor.getInstance().getTranslatedString("options.FightLODLevel")).replace("%min%", Xulor.getInstance().getTranslatedString("min")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final String id = "fightLod";
        final Slider slider = new Slider();
        slider.onCheckOut();
        slider.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, slider);
        }
        slider.setExpandable(false);
        slider.setHorizontal(true);
        slider.setStyle("volume");
        slider.setPrefSize(new Dimension(150, 0));
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.options:setFightLODLevel");
        slider.setOnSliderMove(onSliderMove);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(fightLodPopup,1)");
        slider.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        slider.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(slider);
        slider.onAttributesInitialized();
        final String id2 = "fightLodPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        slider.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.detailFightLevel%".replace("%options.desc.detailFightLevel%", Xulor.getInstance().getTranslatedString("options.desc.detailFightLevel")));
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element2.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("gamePreferences");
        checkOut6.setAttribute("value");
        checkOut6.setField("FightLODLevel");
        slider.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("options.numFightLOD");
        checkOut7.setAttribute("numFixedValues");
        slider.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        slider.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setText("%max%".replace("%max%", Xulor.getInstance().getTranslatedString("max")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element3.getAppearance();
        appearance4.setElementMap(elementMap);
        element3.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 3, 0, 0));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.activateVSync%".replace("%options.activateVSync%", Xulor.getInstance().getTranslatedString("options.activateVSync")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:activateVSync");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(vsyncPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "vsyncPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.verticalSync%".replace("%options.desc.verticalSync%", Xulor.getInstance().getTranslatedString("options.desc.verticalSync")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 10, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("selected");
        checkOut3.setName("gamePreferences");
        checkOut3.setField("vsyncActivated");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.enableRunningRadius%".replace("%options.enableRunningRadius%", Xulor.getInstance().getTranslatedString("options.enableRunningRadius")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:enableRunningRadius");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(runnninRadiusPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "runnninRadiusPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.runningRadius%".replace("%options.desc.runningRadius%", Xulor.getInstance().getTranslatedString("options.desc.runningRadius")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 10, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("selected");
        checkOut3.setName("gamePreferences");
        checkOut3.setField("enableRunningRadius");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.maskWorld%".replace("%options.maskWorld%", Xulor.getInstance().getTranslatedString("options.maskWorld")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setMaskWorld");
        element.setOnSelectionChange(onSelectionChange);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("alphaMaskActivated");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.activateShaders%".replace("%options.activateShaders%", Xulor.getInstance().getTranslatedString("options.activateShaders")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:activateShaders");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(shadersPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "shadersPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.shaders%".replace("%options.desc.shaders%", Xulor.getInstance().getTranslatedString("options.desc.shaders")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 10, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("selected");
        checkOut3.setName("gamePreferences");
        checkOut3.setField("shadersActivated");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("enabled");
        checkOut4.setName("hardwareManager");
        checkOut4.setField("fragmentShadersSupported");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%options.activateMeteoEffect%".replace("%options.activateMeteoEffect%", Xulor.getInstance().getTranslatedString("options.activateMeteoEffect")));
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:activateMeteoEffect");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(meteoEffectPopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "meteoEffectPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.meteoEffect%".replace("%options.desc.meteoEffect%", Xulor.getInstance().getTranslatedString("options.desc.meteoEffect")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 10, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("selected");
        checkOut3.setName("gamePreferences");
        checkOut3.setField("meteoEffectActivated");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%sound%".replace("%sound%", Xulor.getInstance().getTranslatedString("sound")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("white");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 10, 15));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ScrollContainer element3 = new ScrollContainer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 0, 0, 0));
        appearance2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("bold");
        element5.setText("%options.music%".replace("%options.music%", Xulor.getInstance().getTranslatedString("options.music")));
        element5.setExpandable(false);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 2, 0));
        appearance3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final ToggleButton element6 = new ToggleButton();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setText("%options.musicMute%".replace("%options.musicMute%", Xulor.getInstance().getTranslatedString("options.musicMute")));
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setMusicMute");
        element6.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(muteMusicPopup,1)");
        element6.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element6.setOnPopupHide(onPopupHide);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final String id = "muteMusicPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element6.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setMaxWidth(200);
        element7.setMinWidth(1);
        element7.setStyle("white");
        element7.setText("%options.desc.musicActivation%".replace("%options.desc.musicActivation%", Xulor.getInstance().getTranslatedString("options.desc.musicActivation")));
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element7.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final BorderLayoutData checkOut6 = BorderLayoutData.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setData(BorderLayoutData.Values.WEST);
        element6.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("selected");
        checkOut7.setName("gamePreferences");
        checkOut7.setField("musicMute");
        element6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance5 = element6.getAppearance();
        appearance5.setElementMap(elementMap);
        element6.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 5, 0));
        appearance5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance5.onChildrenAdded();
        element6.onChildrenAdded();
        final ToggleButton element8 = new ToggleButton();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setText("%options.musicContinuous%".replace("%options.musicContinuous%", Xulor.getInstance().getTranslatedString("options.musicContinuous")));
        final SelectionChangedListener onSelectionChange2 = new SelectionChangedListener();
        onSelectionChange2.setCallBackFunc("wakfu.options:setMusicContinuousMode");
        element8.setOnSelectionChange(onSelectionChange2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(continuousMusicPopup,1)");
        element8.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element8.setOnPopupHide(onPopupHide2);
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        final String id2 = "continuousMusicPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element8.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setMaxWidth(200);
        element9.setMinWidth(1);
        element9.setStyle("white");
        element9.setText("%options.desc.musicContinuous%".replace("%options.desc.musicContinuous%", Xulor.getInstance().getTranslatedString("options.desc.musicContinuous")));
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element9.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element9.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final BorderLayoutData checkOut10 = BorderLayoutData.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setData(BorderLayoutData.Values.WEST);
        element8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("selected");
        checkOut11.setName("gamePreferences");
        checkOut11.setField("musicContinuousMode");
        element8.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance7 = element8.getAppearance();
        appearance7.setElementMap(elementMap);
        element8.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 0, 5, 0));
        appearance7.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance7.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final DecoratorAppearance appearance8 = checkOut13.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 0, 10, 0));
        appearance8.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setExpandable(false);
        element10.setText("%min%".replace("%min%", Xulor.getInstance().getTranslatedString("min")));
        checkOut13.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element10.getAppearance();
        appearance9.setElementMap(elementMap);
        element10.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 0, 0, 3));
        appearance9.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance9.onChildrenAdded();
        element10.onChildrenAdded();
        final Slider element11 = new Slider();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setHorizontal(true);
        element11.setPrefSize(new Dimension(200, 0));
        element11.setExpandable(false);
        element11.setSliderSize(0.05f);
        element11.setStyle("volume");
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.options:setMusicVolume");
        element11.setOnSliderMove(onSliderMove);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(musicVolumePopup,1)");
        element11.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element11.setOnPopupHide(onPopupHide3);
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        final String id3 = "musicVolumePopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH);
        popupElement3.setHotSpotPosition(Alignment9.SOUTH);
        element11.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setPrefSize(new Dimension(10, 0));
        checkOut17.setStyle("popup");
        popupElement3.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setMaxWidth(200);
        element12.setMinWidth(1);
        element12.setStyle("white");
        element12.setText("%options.desc.musicVolume%".replace("%options.desc.musicVolume%", Xulor.getInstance().getTranslatedString("options.desc.musicVolume")));
        checkOut17.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element12.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.WEST);
        element12.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut17.onChildrenAdded();
        popupElement3.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("value");
        checkOut18.setName("gamePreferences");
        checkOut18.setField("musicVolume");
        element11.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        element11.onChildrenAdded();
        final Label element13 = new Label();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setExpandable(false);
        element13.setText("%max%".replace("%max%", Xulor.getInstance().getTranslatedString("max")));
        checkOut13.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance11 = element13.getAppearance();
        appearance11.setElementMap(elementMap);
        element13.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 3, 0, 0));
        appearance11.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance11.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setText("%options.ambianceSounds%".replace("%options.ambianceSounds%", Xulor.getInstance().getTranslatedString("options.ambianceSounds")));
        element14.setExpandable(false);
        checkOut2.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance12 = element14.getAppearance();
        appearance12.setElementMap(elementMap);
        element14.addBasicElement(appearance12);
        appearance12.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 2, 0));
        appearance12.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance12.onChildrenAdded();
        element14.onChildrenAdded();
        final ToggleButton element15 = new ToggleButton();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setExpandable(false);
        element15.setText("%options.ambianceSoundsMute%".replace("%options.ambianceSoundsMute%", Xulor.getInstance().getTranslatedString("options.ambianceSoundsMute")));
        final SelectionChangedListener onSelectionChange3 = new SelectionChangedListener();
        onSelectionChange3.setCallBackFunc("wakfu.options:setAmbianceSoundsMute");
        element15.setOnSelectionChange(onSelectionChange3);
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup(ambianceSoundMutePopup,1)");
        element15.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        element15.setOnPopupHide(onPopupHide4);
        checkOut2.addBasicElement(element15);
        element15.onAttributesInitialized();
        final String id4 = "ambianceSoundMutePopup";
        final PopupElement popupElement4 = new PopupElement();
        popupElement4.onCheckOut();
        popupElement4.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement4);
        }
        popupElement4.setAlign(Alignment9.NORTH);
        popupElement4.setHotSpotPosition(Alignment9.SOUTH);
        element15.addBasicElement(popupElement4);
        popupElement4.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement4.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setMaxWidth(200);
        element16.setMinWidth(1);
        element16.setStyle("white");
        element16.setText("%options.desc.ambiantSoundActivation%".replace("%options.desc.ambiantSoundActivation%", Xulor.getInstance().getTranslatedString("options.desc.ambiantSoundActivation")));
        checkOut21.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance13 = element16.getAppearance();
        appearance13.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance13).setAlign(Alignment9.WEST);
        element16.addBasicElement(appearance13);
        appearance13.onAttributesInitialized();
        appearance13.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut21.onChildrenAdded();
        popupElement4.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("selected");
        checkOut22.setName("gamePreferences");
        checkOut22.setField("ambianceSoundsMute");
        element15.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final DecoratorAppearance appearance14 = element15.getAppearance();
        appearance14.setElementMap(elementMap);
        element15.addBasicElement(appearance14);
        appearance14.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 0, 5, 0));
        appearance14.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance14.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setExpandable(false);
        checkOut2.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final RowLayout checkOut25 = RowLayout.checkOut();
        checkOut25.setAlign(Alignment9.WEST);
        checkOut24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final DecoratorAppearance appearance15 = checkOut24.getAppearance();
        appearance15.setElementMap(elementMap);
        checkOut24.addBasicElement(appearance15);
        appearance15.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(0, 0, 10, 0));
        appearance15.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance15.onChildrenAdded();
        final Label element17 = new Label();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setExpandable(false);
        element17.setText("%min%".replace("%min%", Xulor.getInstance().getTranslatedString("min")));
        checkOut24.addBasicElement(element17);
        element17.onAttributesInitialized();
        this.method29(element17);
        element17.onChildrenAdded();
        this.method30(checkOut24);
        this.method31(checkOut24);
        checkOut24.onChildrenAdded();
        this.method32(checkOut2);
        this.method33(checkOut2);
        this.method34(checkOut2);
        checkOut2.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 3));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Slider element = new Slider();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(true);
        element.setPrefSize(new Dimension(200, 0));
        element.setExpandable(false);
        element.setSliderSize(0.05f);
        element.setStyle("volume");
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.options:setAmbianceSoundsVolume");
        element.setOnSliderMove(onSliderMove);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(ambianceSoundVolumePopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "ambianceSoundVolumePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.ambiantSoundVolume%".replace("%options.desc.ambiantSoundVolume%", Xulor.getInstance().getTranslatedString("options.desc.ambiantSoundVolume")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("value");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("ambianceSoundsVolume");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%max%".replace("%max%", Xulor.getInstance().getTranslatedString("max")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bold");
        element.setText("%options.uiSounds%".replace("%options.uiSounds%", Xulor.getInstance().getTranslatedString("options.uiSounds")));
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 2, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%options.uiSoundsMute%".replace("%options.uiSoundsMute%", Xulor.getInstance().getTranslatedString("options.uiSoundsMute")));
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.options:setUiSoundsMute");
        element.setOnSelectionChange(onSelectionChange);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(uiSoundMutePopup,1)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "uiSoundMutePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setMaxWidth(200);
        element2.setMinWidth(1);
        element2.setStyle("white");
        element2.setText("%options.desc.interfaceSoundActivation%".replace("%options.desc.interfaceSoundActivation%", Xulor.getInstance().getTranslatedString("options.desc.interfaceSoundActivation")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("selected");
        checkOut2.setName("gamePreferences");
        checkOut2.setField("uiSoundsMute");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 5, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 10, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%min%".replace("%min%", Xulor.getInstance().getTranslatedString("min")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final Slider element2 = new Slider();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setHorizontal(true);
        element2.setPrefSize(new Dimension(200, 10));
        element2.setExpandable(false);
        element2.setSliderSize(0.05f);
        element2.setStyle("volume");
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.options:setUiSoundsVolume");
        element2.setOnSliderMove(onSliderMove);
        final MouseDraggedInListener onMouseDragIn = new MouseDraggedInListener();
        onMouseDragIn.setCallBackFunc("wakfu.options:startUiSoundTest");
        element2.setOnMouseDragIn(onMouseDragIn);
        final MouseDraggedOutListener onMouseDragOut = new MouseDraggedOutListener();
        onMouseDragOut.setCallBackFunc("wakfu.options:stopSoundTest");
        element2.setOnMouseDragOut(onMouseDragOut);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(uiSoundVolumePopup,1)");
        element2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element2.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final String id = "uiSoundVolumePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setMaxWidth(200);
        element3.setMinWidth(1);
        element3.setStyle("white");
        element3.setText("%options.desc.interfaceSoundVolume%".replace("%options.desc.interfaceSoundVolume%", Xulor.getInstance().getTranslatedString("options.desc.interfaceSoundVolume")));
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element3.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("value");
        checkOut6.setName("gamePreferences");
        checkOut6.setField("uiSoundsVolume");
        element2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element2.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        element4.setText("%max%".replace("%max%", Xulor.getInstance().getTranslatedString("max")));
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element4.getAppearance();
        appearance4.setElementMap(elementMap);
        element4.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 3, 0, 0));
        appearance4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance4.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%commands%".replace("%commands%", Xulor.getInstance().getTranslatedString("commands")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("white");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(30, 15, 10, 15));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("ShortcutRowBackground");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.8f));
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ScrollContainer element3 = new ScrollContainer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StackList element4 = new StackList();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInnerExpandable(false);
        element4.setHorizontal(false);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("content");
        checkOut5.setName("shortcutsList");
        checkOut5.setField("shortcuts");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 0, 10, 0));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("bold");
        element6.setExpandable(false);
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("name");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance4 = element6.getAppearance();
        appearance4.setElementMap(elementMap);
        element6.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 2, 0, 0));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        element6.onChildrenAdded();
        final StackList element8 = new StackList();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInnerExpandable(false);
        element8.setHorizontal(false);
        checkOut6.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut10.setAlign(Alignment9.NORTH);
        element8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("content");
        element9.setField("shorctuts");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final ItemRenderer element10 = new ItemRenderer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.options:bindKey");
        element10.setOnItemClick(onItemClick);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.options:onShortcutOver");
        element10.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("wakfu.options:onShortcutOut");
        element10.setOnItemOut(onItemOut);
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(shortcutPopup,1)");
        checkOut11.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut11.setOnPopupHide(onPopupHide);
        element10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final String id = "shortcutPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut11.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        popupElement.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setMaxWidth(200);
        element11.setMinWidth(1);
        element11.setStyle("white");
        element11.setText("%options.desc.buttonShortcut%".replace("%options.desc.buttonShortcut%", Xulor.getInstance().getTranslatedString("options.desc.buttonShortcut")));
        checkOut12.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element11.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element11.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element12 = new StaticLayout();
        element12.onCheckOut();
        element12.setAdaptToContentSize(true);
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final PlainBackground element13 = new PlainBackground();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        appearance6.addBasicElement(element13);
        element13.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setAttribute("color");
        checkOut13.setName("shortcutOver");
        element13.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setValue("0.69,0.68,0.65,1");
        element14.setElseValue("0,0,0,0");
        checkOut13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final EqualCondition element15 = new EqualCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("value");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element13.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id2 = "shortcut";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut11.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("value");
        data.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        data.onChildrenAdded();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("visible");
        element18.setField("isBind");
        checkOut15.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut15.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 10, 0, 10));
        appearance7.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance7.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setExpandable(false);
        element19.setPrefSize(new Dimension(80, 10));
        element19.setMinWidth(1);
        element19.setMaxWidth(80);
        checkOut15.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("text");
        element20.setField("effect");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element19.onChildrenAdded();
        final String id3 = "bindEditor";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, textEditor);
        }
        textEditor.setAutoHorizontalScrolled(true);
        textEditor.setRestrict("[.*&[^<>]]");
        textEditor.setExpandable(false);
        textEditor.setPrefSize(new Dimension(161, 10));
        textEditor.setStyle("bold");
        final KeyPressedListener onKeyPress = new KeyPressedListener();
        onKeyPress.setCallBackFunc("wakfu.options:setBindText(bindEditor,shortcut)");
        textEditor.setOnKeyPress(onKeyPress);
        final FocusChangedListener onFocusChange = new FocusChangedListener();
        onFocusChange.setCallBackFunc("wakfu.options:setBindText(bindEditor,shortcut)");
        textEditor.setOnFocusChange(onFocusChange);
        textEditor.setMaxChars(150);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(bindPopup,1)");
        textEditor.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        textEditor.setOnPopupHide(onPopupHide2);
        checkOut15.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final String id4 = "bindPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        textEditor.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setPrefSize(new Dimension(10, 0));
        checkOut18.setStyle("popup");
        popupElement2.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setMaxWidth(200);
        element22.setMinWidth(1);
        element22.setStyle("white");
        element22.setText("%options.desc.sentenceShortcut%".replace("%options.desc.sentenceShortcut%", Xulor.getInstance().getTranslatedString("options.desc.sentenceShortcut")));
        checkOut18.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element22.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut18.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("text");
        textEditor.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setExpandable(false);
        element24.setPrefSize(new Dimension(250, 10));
        element24.setMinWidth(1);
        element24.setMaxWidth(250);
        checkOut14.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("text");
        element25.setField("effect");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.CENTER);
        element24.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance9 = element24.getAppearance();
        appearance9.setElementMap(elementMap);
        element24.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 10, 0, 10));
        appearance9.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance9.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("visible");
        element27.setField("isBind");
        element24.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ConditionResult element28 = new ConditionResult();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final FalseCondition element29 = new FalseCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        element24.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut20.setStyle("caracs");
        checkOut20.setPrefSize(new Dimension(150, 10));
        checkOut14.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setExpandable(false);
        element30.setPrefSize(new Dimension(150, 10));
        element30.setMinWidth(1);
        element30.setMaxWidth(150);
        checkOut20.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("key");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut20.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TabItem element = new TabItem();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%regions%".replace("%regions%", Xulor.getInstance().getTranslatedString("regions")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("enabled");
        checkOut.setName("regions");
        checkOut.setField("enabled");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final FalseCondition element5 = new FalseCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("comparedValue");
        checkOut2.setName("isConnected");
        element5.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("white");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(30, 15, 10, 15));
        appearance.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut4.setHorizontal(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setText("%options.regions%".replace("%options.regions%", Xulor.getInstance().getTranslatedString("options.regions")));
        element7.setExpandable(false);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 10));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element7.onChildrenAdded();
        final String id = "regionsData";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut3.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("value");
        checkOut6.setName("regions");
        data.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "regionsComboBox";
        final ComboBox comboBox = new ComboBox();
        comboBox.onCheckOut();
        comboBox.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, comboBox);
        }
        comboBox.setExpandable(false);
        comboBox.setPrefSize(new Dimension(200, 0));
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.options:onRegionChanged(regionsData)");
        comboBox.setOnListSelectionChange(onListSelectionChange);
        checkOut3.addBasicElement(comboBox);
        comboBox.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("content");
        checkOut7.setName("regions");
        checkOut7.setField("list");
        comboBox.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("selectedValue");
        checkOut8.setName("regions");
        checkOut8.setField("selectedRegion");
        comboBox.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final RenderableContainer element8 = new RenderableContainer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        comboBox.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ItemRenderer element9 = new ItemRenderer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setNonBlocking(true);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("text");
        element11.setField("name");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final List element12 = new List();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setHorizontal(false);
        element12.setCellSize(new Dimension(100.0f, 16));
        comboBox.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemRenderer element13 = new ItemRenderer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setNonBlocking(true);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("name");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        comboBox.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setText("%options.desc.regions%".replace("%options.desc.regions%", Xulor.getInstance().getTranslatedString("options.desc.regions")));
        checkOut3.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.options:restore");
        element.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(restorePopup)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final String id = "restorePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("PopupInformation");
        element2.setText("%restore%".replace("%restore%", Xulor.getInstance().getTranslatedString("restore")));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("GoBackIcon");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.NORTH_EAST);
        element4.setYOffset(-47);
        element4.setXOffset(-7);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(1, 3, 0, 3));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Button element2 = new Button();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("yellow");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.options:cancel");
        element2.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(cancelPopup)");
        element2.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element2.setOnPopupHide(onPopupHide);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final String id = "cancelPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element2.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("white");
        element3.setText("%options.desc.cancel%".replace("%options.desc.cancel%", Xulor.getInstance().getTranslatedString("options.desc.cancel")));
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance3 = element2.getAppearance();
        appearance3.setElementMap(elementMap);
        element2.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(7, 7, 7, 7));
        appearance3.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance3.onChildrenAdded();
        element2.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("cancel");
        element6.setNonBlocking(true);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.CENTER);
        element7.setSize(new Dimension(100.0f, 100.0f));
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Spacer element8 = new Spacer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Button element10 = new Button();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("yellow");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.options:apply");
        element10.setOnClick(onClick2);
        element10.setExpandable(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(applyPopup)");
        element10.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element10.setOnPopupHide(onPopupHide2);
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id2 = "applyPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element10.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setPrefSize(new Dimension(10, 0));
        checkOut7.setStyle("popup");
        popupElement2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("white");
        element11.setText("%options.desc.apply%".replace("%options.desc.apply%", Xulor.getInstance().getTranslatedString("options.desc.apply")));
        checkOut7.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element11.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element11.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut7.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.CENTER);
        element12.setSize(new Dimension(100.0f, 100.0f));
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance5 = element10.getAppearance();
        appearance5.setElementMap(elementMap);
        element10.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element13 = new Padding();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setInsets(new Insets(7, 7, 7, 7));
        appearance5.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        appearance5.onChildrenAdded();
        element10.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("apply");
        element14.setNonBlocking(true);
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.CENTER);
        element15.setSize(new Dimension(100.0f, 100.0f));
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.CENTER);
        element.setInitValue(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method41(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final KeyPressedListener onKeyPress = new KeyPressedListener();
        onKeyPress.setCallBackFunc("wakfu.options:onKeyPressed");
        checkOut.setOnKeyPress(onKeyPress);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element2 = new PlainBackground();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setColor(new Color(0.1f, 0.1f, 0.1f, 0.2f));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("waitingForKeyTyped");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final BorderLayout element3 = new BorderLayout();
        element3.onCheckOut();
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(0, 50));
        checkOut3.setExpandable(false);
        checkOut3.setStyle("popup");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.CENTER);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final String id = "image1";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, image);
        }
        image.setStyle("leftLeafDecorator");
        checkOut5.addBasicElement(image);
        image.onAttributesInitialized();
        image.onChildrenAdded();
        final String id2 = "container2";
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut6);
        }
        checkOut6.setStyle("leafDecorator");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final String id3 = "text";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, textView);
        }
        textView.setStyle("WhiteTitle");
        textView.setText("%options.enterKeysCombining%".replace("%options.enterKeysCombining%", Xulor.getInstance().getTranslatedString("options.enterKeysCombining")));
        checkOut6.addBasicElement(textView);
        textView.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("waitingForKeyTypedDescription");
        checkOut7.setAttribute("text");
        textView.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance2 = textView.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        textView.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        textView.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final String id4 = "image2";
        final Image image2 = new Image();
        image2.onCheckOut();
        image2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, image2);
        }
        image2.setStyle("rightLeafDecorator");
        checkOut5.addBasicElement(image2);
        image2.onAttributesInitialized();
        image2.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        checkOut5.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
