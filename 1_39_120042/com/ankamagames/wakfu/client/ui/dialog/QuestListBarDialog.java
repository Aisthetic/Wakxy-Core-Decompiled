package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.core.*;

public class QuestListBarDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public QuestListBarDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.WEST);
        element.setXOffset(-20);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("tiledScroll");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(20, 12, 20, 13));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(13, 0, 13, 0));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setNonBlocking(false);
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut6.setAlign(Alignment9.NORTH);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("AchievementUnlockedSplashScaled2");
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 13, 0, 0));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(13, 10, 13, 10));
        appearance2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("defaultBold22");
        element6.setExpandable(false);
        checkOut7.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setLocal(true);
        checkOut9.setName("questListBar");
        checkOut9.setAttribute("text");
        checkOut9.setField("achievementIndexText");
        element6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final RowLayoutData element7 = new RowLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.NORTH);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 0, 0, 10));
        appearance3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance3.onChildrenAdded();
        element6.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("styledBoldWhite12");
        element8.setMinWidth(1);
        element8.setMaxWidth(180);
        element8.setExpandable(false);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.NORTH);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setLocal(true);
        checkOut12.setName("displayedAchievement");
        checkOut12.setAttribute("text");
        checkOut12.setField("name");
        element8.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance4.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance4.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final StackList element10 = new StackList();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setHorizontal(false);
        element10.setExpandable(false);
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element10.getAppearance();
        appearance5.setElementMap(elementMap);
        element10.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 15, 0, 15));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setLocal(true);
        checkOut15.setName("displayedAchievement");
        checkOut15.setAttribute("content");
        checkOut15.setField("goals");
        element10.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemCondition element13 = new ItemCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        element11.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("styledBoldDark12");
        element15.setExpandable(false);
        element15.setMinWidth(180);
        element15.setMaxWidth(180);
        checkOut16.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Padding element16 = new Padding();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setInsets(new Insets(7, 0, 7, 0));
        appearance6.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("description");
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        final Spacer element18 = new Spacer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        checkOut16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setExpandable(false);
        element19.setStyle("styledBoldDark12");
        element19.setNonBlocking(true);
        checkOut16.addBasicElement(element19);
        element19.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element19.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.CENTER);
        element19.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("text");
        element20.setField("progressionText");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("visible");
        element21.setField("isCompleted");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final AndCondition element23 = new AndCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final FalseCondition element24 = new FalseCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final FalseCondition element25 = new FalseCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element23.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("comparedValue");
        element26.setField("progressionText");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ConditionResult element27 = new ConditionResult();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final EqualCondition element28 = new EqualCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setValue("-1");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("darkBold");
        element29.setExpandable(false);
        element29.setMinWidth(1);
        element29.setMaxWidth(200);
        element29.setText("bg");
        checkOut5.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element29.getAppearance();
        appearance8.setElementMap(elementMap);
        element29.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(5, 20, 5, 20));
        appearance8.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayoutData element30 = new RowLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment9.WEST);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setLocal(true);
        checkOut20.setName("displayedAchievement");
        checkOut20.setAttribute("text");
        checkOut20.setField("backgroundText");
        element29.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setLocal(true);
        checkOut21.setName("displayedAchievement");
        checkOut21.setAttribute("visible");
        checkOut21.setField("backgroundText");
        element29.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ConditionResult element31 = new ConditionResult();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        checkOut21.addBasicElement(element31);
        element31.onAttributesInitialized();
        final AndCondition element32 = new AndCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final NotNullCondition element33 = new NotNullCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final NotEqualCondition element34 = new NotEqualCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setValue("");
        element32.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element29.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setExpandable(false);
        checkOut5.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final DecoratorAppearance appearance9 = checkOut22.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(5, 13, 5, 13));
        appearance9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance9.onChildrenAdded();
        final RowLayoutData element35 = new RowLayoutData();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAlign(Alignment9.CENTER);
        checkOut22.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final StaticLayout element36 = new StaticLayout();
        element36.onCheckOut();
        element36.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final Image element37 = new Image();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setStyle("scrollTitleBar");
        element37.setDisplaySize(new Dimension(210, 29));
        checkOut22.addBasicElement(element37);
        element37.onAttributesInitialized();
        final StaticLayoutData element38 = new StaticLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setSize(new Dimension(-2, -2));
        element38.setAlign(Alignment17.WEST);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        element37.onChildrenAdded();
        final TextView element39 = new TextView();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setStyle("styledBoldWhite12");
        element39.setNonBlocking(true);
        element39.setText("%achievement.reward%".replace("%achievement.reward%", Xulor.getInstance().getTranslatedString("achievement.reward")));
        checkOut22.addBasicElement(element39);
        element39.onAttributesInitialized();
        final StaticLayoutData element40 = new StaticLayoutData();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAlign(Alignment17.WEST);
        element40.setSize(new Dimension(100.0f, 2));
        element39.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        final DecoratorAppearance appearance10 = element39.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.CENTER);
        element39.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        this.method0(appearance10);
        appearance10.onChildrenAdded();
        element39.onChildrenAdded();
        checkOut22.onChildrenAdded();
        this.method1(checkOut5);
        checkOut5.onChildrenAdded();
        this.method2(checkOut2);
        checkOut2.onChildrenAdded();
        this.method3(checkOut);
        this.method4(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(170, 52));
        element.setPrefSize(new Dimension(0, 0));
        element.setExpandable(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(1);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("displayedAchievement");
        checkOut.setField("rewards");
        checkOut.setAttribute("content");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu:openItemDetailWindow()");
        element3.setOnItemClick(onItemClick);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.WEST);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("IconEmptyEmote");
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(-2, -2));
        element9.setAlign(Alignment17.CENTER);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setDisplaySize(new Dimension(48, 48));
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.CENTER);
        element11.setSize(new Dimension(-2, -2));
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element10.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("texture");
        element12.setField("iconUrl");
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element10.onChildrenAdded();
        final Label element13 = new Label();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("bold");
        checkOut5.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        checkOut9.setName("text");
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setSize(new Dimension(-2, -2));
        element14.setAlign(Alignment17.SOUTH_EAST);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("quantity");
        element13.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("visible");
        element16.setField("quantity");
        element13.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final GreaterCondition element18 = new GreaterCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setValue("1");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("styledBoldDark10");
        element19.setMinWidth(1);
        element19.setMaxWidth(115);
        element19.setExpandable(false);
        checkOut3.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("text");
        element20.setField("description");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.NORTH);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(10, 0, 0, 0));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setVisible(false);
        checkOut.setNonBlocking(false);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("questListBar");
        checkOut2.setAttribute("visible");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final List element3 = new List();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setCellSize(new Dimension(19, 20));
        element3.setAutoIdealSize(true);
        element3.setIdealSizeMinColumns(1);
        element3.setIdealSizeMaxColumns(10);
        element3.setIdealSizeMinRows(1);
        element3.setIdealSizeMaxRows(1);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("questListBar");
        checkOut4.setAttribute("content");
        checkOut4.setField("quests");
        element3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("AchievementListComplete");
        checkOut5.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.CENTER);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("isCompleted");
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("AchievementListInactive");
        checkOut5.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setSize(new Dimension(-2, -2));
        element14.setAlign(Alignment17.CENTER);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("visible");
        element15.setField("isActivated");
        element13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final FalseCondition element17 = new FalseCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element13.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("AchievementListActive");
        checkOut5.addBasicElement(element18);
        element18.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setSize(new Dimension(-2, -2));
        element19.setAlign(Alignment17.CENTER);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("visible");
        element20.setField("isActivated");
        element18.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final AndCondition element22 = new AndCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final TrueCondition element23 = new TrueCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final FalseCondition element24 = new FalseCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("comparedValue");
        element25.setField("isCompleted");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element18.onChildrenAdded();
        final String id = "quest";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut5.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        data.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        data.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 15, 0));
        appearance.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element27 = new RowLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("ScrollBorderTop2");
        element.setDisplaySize(new Dimension(260, 45));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.NORTH);
        element2.setSize(new Dimension(-2, -2));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("ScrollBorderBottom2");
        element.setDisplaySize(new Dimension(260, 45));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.SOUTH);
        element2.setSize(new Dimension(-2, -2));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
