package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.event.listener.*;
import java.awt.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;

public class CharacterSheetDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public CharacterSheetDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "characterSheetWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.setNonBlocking(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.NORTH_WEST);
        element5.setYOffset(-40);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut3.setHorizontal(false);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("mainCharacterSheet");
        checkOut6.setAttribute("visible");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.CENTER);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.NORTH_WEST);
        element8.setYOffset(-40);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setAlign(Alignment9.NORTH);
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final String id2 = "heroesList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, list);
        }
        list.setAutoIdealSize(true);
        list.setHorizontal(false);
        list.setCellSize(new Dimension(50, 57));
        list.setIdealSizeMaxColumns(1);
        list.setIdealSizeMinColumns(1);
        list.setIdealSizeMaxRows(4);
        list.setIdealSizeMinRows(1);
        checkOut9.addBasicElement(list);
        list.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("visible");
        checkOut11.setName("heroesEnabled");
        list.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("content");
        checkOut12.setName("mainCharacterViewForTemplate");
        list.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ItemRenderer element9 = new ItemRenderer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.companionsEmbedded:selectCompanion(characterSheetWindow)");
        element9.setOnItemClick(onItemClick);
        list.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemCondition element11 = new ItemCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final NotNullCondition element12 = new NotNullCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final String id3 = "character";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data);
        }
        element9.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("value");
        data.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        element9.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayout element14 = new StaticLayout();
        element14.onCheckOut();
        element14.setAdaptToContentSize(true);
        checkOut13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final RadioButton element15 = new RadioButton();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("companionSlot");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descCompanion)");
        element15.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element15.setOnPopupHide(onPopupHide);
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setSize(new Dimension(100.0f, 100.0f));
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final String id4 = "descCompanion";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element15.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        popupElement.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setHorizontal(false);
        checkOut15.setAlign(Alignment9.NORTH);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white");
        element17.setExpandable(false);
        checkOut14.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance = element17.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element17.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("name");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement.onChildrenAdded();
        element15.onChildrenAdded();
        final String id5 = "dndc";
        final DragNDropContainer dragNDropContainer = new DragNDropContainer();
        dragNDropContainer.onCheckOut();
        dragNDropContainer.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, dragNDropContainer);
        }
        checkOut13.addBasicElement(dragNDropContainer);
        dragNDropContainer.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(-2, -2));
        dragNDropContainer.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(40, 40));
        element20.setNonBlocking(true);
        dragNDropContainer.addBasicElement(element20);
        element20.onAttributesInitialized();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element20.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("texture");
        element21.setField("characterSheetSmallIllustrationUrl");
        checkOut16.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element20.onChildrenAdded();
        dragNDropContainer.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element9.onChildrenAdded();
        list.onChildrenAdded();
        final String id6 = "companionsList";
        final List list2 = new List();
        list2.onCheckOut();
        list2.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, list2);
        }
        list2.setAutoIdealSize(true);
        list2.setHorizontal(false);
        list2.setCellSize(new Dimension(50, 57));
        list2.setIdealSizeMaxColumns(1);
        list2.setIdealSizeMinColumns(1);
        list2.setIdealSizeMaxRows(4);
        list2.setIdealSizeMinRows(1);
        checkOut9.addBasicElement(list2);
        list2.onAttributesInitialized();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setName("companionParty");
        checkOut17.setAttribute("content");
        list2.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final ItemRenderer element22 = new ItemRenderer();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        final ItemClickListener onItemClick2 = new ItemClickListener();
        onItemClick2.setCallBackFunc("wakfu.companionsEmbedded:selectCompanion(characterSheetWindow)");
        element22.setOnItemClick(onItemClick2);
        list2.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ItemCondition element24 = new ItemCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        final String id7 = "companion";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id7 != null) {
            elementMap.add(id7, data2);
        }
        element22.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        data2.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        element22.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final RadioButton element28 = new RadioButton();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("companionSlot");
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(descCompanion)");
        element28.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element28.setOnPopupHide(onPopupHide2);
        checkOut18.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setSize(new Dimension(100.0f, 100.0f));
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final String id8 = "descCompanion";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id8 != null) {
            elementMap.add(id8, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element28.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        popupElement2.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setHorizontal(false);
        checkOut20.setAlign(Alignment9.NORTH);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("white");
        element30.setExpandable(false);
        checkOut19.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element30.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element30.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("name");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut19.onChildrenAdded();
        popupElement2.onChildrenAdded();
        element28.onChildrenAdded();
        final String id9 = "dndc";
        final DragNDropContainer dragNDropContainer2 = new DragNDropContainer();
        dragNDropContainer2.onCheckOut();
        dragNDropContainer2.setElementMap(elementMap);
        if (elementMap != null && id9 != null) {
            elementMap.add(id9, dragNDropContainer2);
        }
        checkOut18.addBasicElement(dragNDropContainer2);
        dragNDropContainer2.onAttributesInitialized();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment17.CENTER);
        element32.setSize(new Dimension(-2, -2));
        dragNDropContainer2.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final Image element33 = new Image();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setDisplaySize(new Dimension(40, 40));
        element33.setNonBlocking(true);
        dragNDropContainer2.addBasicElement(element33);
        element33.onAttributesInitialized();
        final PixmapElement checkOut21 = PixmapElement.checkOut();
        checkOut21.setElementMap(elementMap);
        element33.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("texture");
        element34.setField("smallIconUrl");
        checkOut21.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element33.onChildrenAdded();
        dragNDropContainer2.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element22.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("visible");
        checkOut22.setName("companionPartyExists");
        list2.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        list2.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final String id10 = "heroesManagement";
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        if (elementMap != null && id10 != null) {
            elementMap.add(id10, checkOut23);
        }
        checkOut23.setExpandable(false);
        checkOut7.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setAttribute("visible");
        checkOut24.setName("heroesEnabled");
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        this.method0(checkOut23);
        this.method1(checkOut23);
        this.method2(checkOut23);
        this.method3(checkOut23);
        checkOut23.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method4(checkOut);
        checkOut.onChildrenAdded();
        this.method5(element);
        this.method40(element);
        this.method41(element);
        this.method42(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("mainCharacterSheet");
        checkOut.setAttribute("visible");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("comparedValue");
        checkOut2.setName("tutorialProperty.display");
        element4.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return null;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RadioButton element = new RadioButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("companionSlot");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descAddHero)");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.controlCenter:openCompanionsManagement");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("enabled");
        checkOut.setName("heroesPartyIsFull");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final String id = "descAddHero";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("white");
        element5.setExpandable(false);
        element5.setText("%desc.addHero%".replace("%desc.addHero%", Xulor.getInstance().getTranslatedString("desc.addHero")));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance = element5.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element6 = new TextView();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("white");
        element6.setExpandable(false);
        element6.setText("%desc.tooManyHeroes%".replace("%desc.tooManyHeroes%", Xulor.getInstance().getTranslatedString("desc.tooManyHeroes")));
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("heroesPartyIsFull");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(40, 40));
        element.setNonBlocking(true);
        element.setStyle("AddCompanionIcon");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(-2, -2));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.SOUTH_WEST);
        element.setXOffset(70);
        element.setYOffset(11);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("mainCharacterSheet");
        checkOut2.setAttribute("visible");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ToggleButton element3 = new ToggleButton();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("CharacteristicsDisplay");
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.characterSheet:displayAllCharacteristics");
        element3.setOnSelectionChange(onSelectionChange);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("displayAllCharacteristics");
        checkOut3.setAttribute("selected");
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("DownSortArrow");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("displayAllCharacteristics");
        checkOut4.setAttribute("visible");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.SOUTH);
        element6.setSize(new Dimension(-2, -2));
        element6.setYOffset(7);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("UpSortArrow");
        element7.setNonBlocking(true);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.SOUTH);
        element8.setSize(new Dimension(-2, -2));
        element8.setYOffset(7);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("displayAllCharacteristics");
        checkOut5.setAttribute("visible");
        element7.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final FalseCondition element10 = new FalseCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("windowNew");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final WindowMovePoint element3 = new WindowMovePoint();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("titleBar");
        element3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut4.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(4, 3, 5, 20));
        appearance4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(characterBreedPopup)");
        element6.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element6.setOnPopupHide(onPopupHide);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final String id = "characterBreedPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element6.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(10, 0));
        checkOut6.setStyle("popup");
        popupElement.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final BorderLayoutData checkOut7 = BorderLayoutData.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setData(BorderLayoutData.Values.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element7.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("text");
        checkOut8.setName("characterSheet");
        checkOut8.setLocal(true);
        checkOut8.setField("breedInfo/name");
        element7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        popupElement.onChildrenAdded();
        final DecoratorAppearance appearance6 = element6.getAppearance();
        appearance6.setElementMap(elementMap);
        element6.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("texture");
        checkOut10.setName("characterSheet");
        checkOut10.setLocal(true);
        checkOut10.setField("characterSheetillustrationUrl");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("titleName16");
        element8.setNonBlocking(true);
        element8.setExpandable(false);
        element8.setMaxWidth(120);
        element8.setMaxSize(new Dimension(120, 10000));
        element8.setShrinkable(true);
        element8.setEnableAutoZoomShrink(true);
        checkOut11.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element8.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance7.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setLocal(true);
        checkOut14.setAttribute("text");
        checkOut14.setName("characterSheet");
        checkOut14.setField("nameAndLevel");
        element8.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setDisplaySize(new Dimension(41, 41));
        element9.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(characterNationPopup)");
        element9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide2);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setLocal(true);
        checkOut15.setAttribute("visible");
        checkOut15.setName("characterSheet");
        checkOut15.setField("isCompanion");
        element9.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        checkOut15.addBasicElement(element10);
        element10.onAttributesInitialized();
        final FalseCondition element11 = new FalseCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final String id2 = "characterNationPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element9.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        popupElement2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final BorderLayoutData checkOut17 = BorderLayoutData.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setData(BorderLayoutData.Values.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("PopupInformation");
        checkOut16.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element12.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlignment(Alignment9.WEST);
        element12.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("text");
        checkOut18.setName("nation");
        checkOut18.setField("name");
        element12.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut16.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setLocal(true);
        checkOut19.setAttribute("visible");
        checkOut19.setName("nation");
        checkOut19.setField("flagIconUrl");
        element9.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        checkOut19.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final PixmapElement checkOut20 = PixmapElement.checkOut();
        checkOut20.setElementMap(elementMap);
        element9.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setAttribute("texture");
        checkOut21.setName("nation");
        checkOut21.setField("flagIconUrl");
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element9.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setExpandable(false);
        element15.setDisplaySize(new Dimension(51, 36));
        element15.setNonBlocking(false);
        element15.setStyle("Multiman");
        checkOut4.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setLocal(true);
        checkOut22.setAttribute("visible");
        checkOut22.setName("characterSheet");
        checkOut22.setField("isCompanion");
        element15.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setLocal(true);
        checkOut23.setAttribute("visible");
        checkOut23.setName("nation");
        checkOut23.setField("flagIconUrl");
        element15.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        checkOut23.addBasicElement(element16);
        element16.onAttributesInitialized();
        final NotNullCondition element17 = new NotNullCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final DecoratorAppearance appearance9 = checkOut24.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut24.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(0, 12, 0, 12));
        appearance9.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance9.onChildrenAdded();
        final String id3 = "windowContentContainer";
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, checkOut26);
        }
        checkOut26.setPrefSize(new Dimension(320, 0));
        checkOut26.setNonBlocking(false);
        checkOut24.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final BorderLayout element18 = new BorderLayout();
        element18.onCheckOut();
        checkOut26.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final BorderLayoutData checkOut28 = BorderLayoutData.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setData(BorderLayoutData.Values.NORTH);
        checkOut27.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final BorderLayout element19 = new BorderLayout();
        element19.onCheckOut();
        checkOut27.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Container checkOut29 = Container.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut27.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final BorderLayoutData checkOut30 = BorderLayoutData.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setData(BorderLayoutData.Values.SOUTH);
        checkOut29.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final RowLayout checkOut31 = RowLayout.checkOut();
        checkOut31.setHorizontal(false);
        checkOut29.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final Container checkOut32 = Container.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setStyle("white");
        checkOut32.setPrefSize(new Dimension(120, 16));
        checkOut32.setExpandable(false);
        checkOut29.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        final DecoratorAppearance appearance10 = checkOut32.getAppearance();
        appearance10.setElementMap(elementMap);
        checkOut32.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut33 = Margin.checkOut();
        checkOut33.setElementMap(elementMap);
        checkOut33.setInsets(new Insets(0, 0, 0, 0));
        appearance10.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        checkOut33.onChildrenAdded();
        final Padding element20 = new Padding();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setInsets(new Insets(3, 6, 3, 6));
        appearance10.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        appearance10.onChildrenAdded();
        final Image element21 = new Image();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("xpIcon");
        element21.setNonBlocking(true);
        element21.setExpandable(false);
        checkOut32.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final Container checkOut34 = Container.checkOut();
        checkOut34.setElementMap(elementMap);
        checkOut34.setPrefSize(new Dimension(0, 20));
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(characterXpPopup)");
        checkOut34.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut34.setOnPopupHide(onPopupHide3);
        checkOut32.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        final DecoratorAppearance appearance11 = checkOut34.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut34.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut35 = Margin.checkOut();
        checkOut35.setElementMap(elementMap);
        checkOut35.setInsets(new Insets(0, 2, 0, 0));
        appearance11.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        checkOut35.onChildrenAdded();
        appearance11.onChildrenAdded();
        final StaticLayout element22 = new StaticLayout();
        element22.onCheckOut();
        element22.setAdaptToContentSize(true);
        checkOut34.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final String id4 = "characterXpPopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH);
        popupElement3.setHotSpotPosition(Alignment9.SOUTH);
        checkOut34.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        this.method6(popupElement3);
        popupElement3.onChildrenAdded();
        this.method7(checkOut34);
        this.method8(checkOut34);
        this.method9(checkOut34);
        this.method10(checkOut34);
        checkOut34.onChildrenAdded();
        checkOut32.onChildrenAdded();
        checkOut29.onChildrenAdded();
        checkOut27.onChildrenAdded();
        this.method11(checkOut26);
        checkOut26.onChildrenAdded();
        checkOut24.onChildrenAdded();
        this.method39(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("text");
        checkOut3.setName("characterSheet");
        checkOut3.setLocal(true);
        checkOut3.setField("xpRatio");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ProgressBar element = new ProgressBar();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("XPUnpenalized");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 1, 0, 1));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 10));
        element2.setAlign(Alignment17.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setField("unpenalizedLevelPercentage");
        checkOut2.setName("characterSheet");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("value");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ProgressBar element = new ProgressBar();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("XP2");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 1, 0, 1));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 14));
        element2.setAlign(Alignment17.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setField("currentLevelPercentage");
        checkOut2.setName("characterSheet");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("value");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("ProgressBar");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 14));
        element.setAlign(Alignment17.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(50.0f, 16));
        element.setAlign(Alignment17.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final BorderLayout element2 = new BorderLayout();
        element2.onCheckOut();
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("progressBarSeparator");
        element3.setNonBlocking(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.WEST);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("progressBarSeparator");
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("progressBarSeparator");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final BorderLayoutData checkOut4 = BorderLayoutData.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setData(BorderLayoutData.Values.EAST);
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final BorderLayoutData checkOut2 = BorderLayoutData.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setData(BorderLayoutData.Values.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("titleBar");
        checkOut4.setExpandable(false);
        checkOut4.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(characteristicsDescPopup)");
        checkOut4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut4.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final String id = "characteristicsDescPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut4.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut6.setAlign(Alignment9.NORTH);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%characteristics.description%".replace("%characteristics.description%", Xulor.getInstance().getTranslatedString("characteristics.description")));
        element2.setMinWidth(1);
        element2.setMaxWidth(250);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("whiteTitle");
        element3.setText("%characteristics%".replace("%characteristics%", Xulor.getInstance().getTranslatedString("characteristics")));
        element3.setNonBlocking(true);
        element3.setExpandable(false);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element3.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.NORTH);
        element3.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final String id2 = "caracList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, list);
        }
        list.setCellSize(new Dimension(25.0f, 32));
        list.setHorizontal(false);
        checkOut.addBasicElement(list);
        list.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("characterSheet");
        checkOut7.setLocal(true);
        checkOut7.setAttribute("content");
        checkOut7.setField("characteristics/main");
        list.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final ItemRenderer element4 = new ItemRenderer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        list.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemCondition element6 = new ItemCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("caracs");
        checkOut8.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut8.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut8.setOnPopupHide(onPopupHide2);
        element4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final PopupElement element8 = new PopupElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.NORTH_WEST);
        element8.setHotSpotPosition(Alignment9.SOUTH_WEST);
        checkOut8.addBasicElement(element8);
        element8.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        element8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setMinWidth(1);
        element9.setMaxWidth(250);
        element9.setExpandable(false);
        element9.setStyle("white");
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("description");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setExpandable(false);
        element11.setNonBlocking(true);
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("style");
        element12.setField("iconStyle");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final Label element13 = new Label();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("defaultBold14");
        element13.setNonBlocking(true);
        checkOut8.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("text");
        element14.setField("shortName");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance5 = element13.getAppearance();
        appearance5.setElementMap(elementMap);
        element13.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element13.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("defaultBold14");
        element15.setExpandable(false);
        element15.setNonBlocking(true);
        checkOut8.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("textColor");
        element16.setField("colorFloat");
        appearance6.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("max");
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element4.onChildrenAdded();
        list.onChildrenAdded();
        final String id3 = "caracList";
        final List list2 = new List();
        list2.onCheckOut();
        list2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, list2);
        }
        list2.setCellSize(new Dimension(25.0f, 32));
        list2.setHorizontal(false);
        list2.setAutoIdealSize(true);
        list2.setIdealSizeMinColumns(1);
        list2.setIdealSizeMaxColumns(4);
        checkOut.addBasicElement(list2);
        list2.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("characterSheet");
        checkOut13.setLocal(true);
        checkOut13.setAttribute("visible");
        checkOut13.setField("characteristics/hasCustom");
        list2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("characterSheet");
        checkOut14.setLocal(true);
        checkOut14.setAttribute("content");
        checkOut14.setField("characteristics/mainCustom");
        list2.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final ItemRenderer element18 = new ItemRenderer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        list2.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ItemCondition element20 = new ItemCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final NotNullCondition element21 = new NotNullCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setStyle("caracs");
        checkOut15.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        checkOut15.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        checkOut15.setOnPopupHide(onPopupHide3);
        element18.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final PopupElement element22 = new PopupElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.NORTH_WEST);
        element22.setHotSpotPosition(Alignment9.SOUTH_WEST);
        checkOut15.addBasicElement(element22);
        element22.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        element22.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setMinWidth(1);
        element23.setMaxWidth(250);
        element23.setExpandable(false);
        element23.setStyle("white");
        checkOut16.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element23.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.WEST);
        element23.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance7.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("description");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element22.onChildrenAdded();
        final Image element25 = new Image();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setExpandable(false);
        element25.setNonBlocking(true);
        checkOut15.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("style");
        element26.setField("iconStyle");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("defaultBold14");
        element27.setNonBlocking(true);
        checkOut15.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        element28.setField("shortName");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance8 = element27.getAppearance();
        appearance8.setElementMap(elementMap);
        element27.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance8.onChildrenAdded();
        element27.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("defaultBold14");
        element29.setExpandable(false);
        element29.setNonBlocking(true);
        checkOut15.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("text");
        element30.setField("formattedValueDescription");
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element18.onChildrenAdded();
        list2.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setStyle("titleBar");
        checkOut20.setExpandable(false);
        checkOut20.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup(characteristicsDescPopup)");
        checkOut20.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        checkOut20.setOnPopupHide(onPopupHide4);
        checkOut.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final String id4 = "characteristicsDescPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        checkOut20.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement2.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHorizontal(false);
        checkOut22.setAlign(Alignment9.NORTH);
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        this.method12(checkOut21);
        checkOut21.onChildrenAdded();
        popupElement2.onChildrenAdded();
        this.method13(checkOut20);
        checkOut20.onChildrenAdded();
        this.method14(checkOut);
        this.method33(checkOut);
        this.method34(checkOut);
        this.method35(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%characteristics.description%".replace("%characteristics.description%", Xulor.getInstance().getTranslatedString("characteristics.description")));
        element.setMinWidth(1);
        element.setMaxWidth(250);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteTitle");
        element.setText("%elemental.mastery%".replace("%elemental.mastery%", Xulor.getInstance().getTranslatedString("elemental.mastery")));
        element.setNonBlocking(true);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 5, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setNonBlocking(false);
        checkOut5.setExpandable(false);
        checkOut5.setPrefSize(new Dimension(225, 30));
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut5.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("caracs");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut6.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 12, 0, 0));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut6.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut8.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut8.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut8.setOnPopupHide(onPopupHide);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut8.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        element5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element6.setStyle("PopupInformation");
        checkOut9.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut8.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHgap((short)3);
        checkOut11.setAlign(Alignment9.WEST);
        checkOut8.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut8.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("characterSheet");
        checkOut12.setLocal(true);
        checkOut12.setAttribute("text");
        checkOut12.setField("characteristics/DMG_WATER_PERCENT/formattedPercentDescription");
        element9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut13.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut13.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut13.setOnPopupHide(onPopupHide2);
        checkOut6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        element11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element12.setStyle("PopupInformation");
        checkOut14.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("systemConfiguration");
        checkOut16.setAttribute("text");
        checkOut16.setField("new.hpLoss.formula");
        element12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element13.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut16.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final DecoratorAppearance appearance4 = element12.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.EAST);
        element15.setSize(new Dimension(50.0f, 100.0f));
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHgap((short)3);
        checkOut17.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("iconShield");
        element16.setExpandable(false);
        element16.setNonBlocking(true);
        checkOut13.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white16");
        element17.setNonBlocking(true);
        element17.setMultiline(false);
        element17.setExpandable(false);
        checkOut13.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("characterSheet");
        checkOut18.setLocal(true);
        checkOut18.setAttribute("text");
        checkOut18.setField("characteristics/RES_WATER_PERCENT/formattedPercentDescription");
        element17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut13.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element19.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element19.setOnPopupHide(onPopupHide3);
        element19.setStyle("smallWaterElement");
        checkOut5.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PopupElement element20 = new PopupElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        element20.setHotSpotPosition(Alignment9.SOUTH);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        element20.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.WEST);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setNonBlocking(true);
        element21.setStyle("PopupInformation");
        element21.setExpandable(false);
        element21.setText("%WATER%".replace("%WATER%", Xulor.getInstance().getTranslatedString("WATER")));
        checkOut19.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance5 = element21.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.EAST);
        element21.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element20.onChildrenAdded();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.WEST);
        element23.setSize(new Dimension(-2, -2));
        element19.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setNonBlocking(false);
        checkOut21.setExpandable(false);
        checkOut21.setPrefSize(new Dimension(225, 30));
        checkOut4.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        checkOut21.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setStyle("caracs");
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut22.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 12, 0, 0));
        appearance6.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final Padding element25 = new Padding();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setInsets(new Insets(0, 15, 0, 0));
        appearance6.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        appearance6.onChildrenAdded();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(100.0f, 100.0f));
        checkOut22.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setExpandable(false);
        checkOut24.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup");
        checkOut24.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        checkOut24.setOnPopupHide(onPopupHide4);
        checkOut22.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final PopupElement element28 = new PopupElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment9.NORTH);
        element28.setHotSpotPosition(Alignment9.SOUTH);
        checkOut24.addBasicElement(element28);
        element28.onAttributesInitialized();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setPrefSize(new Dimension(10, 0));
        checkOut25.setStyle("popup");
        element28.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final RowLayout checkOut26 = RowLayout.checkOut();
        checkOut26.setAlign(Alignment9.WEST);
        checkOut25.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final Label element29 = new Label();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setExpandable(false);
        element29.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element29.setStyle("PopupInformation");
        checkOut25.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element29.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.EAST);
        element29.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut25.onChildrenAdded();
        element28.onChildrenAdded();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment17.WEST);
        element30.setSize(new Dimension(50.0f, 100.0f));
        checkOut24.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setHgap((short)3);
        checkOut27.setAlign(Alignment9.WEST);
        checkOut24.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final Image element31 = new Image();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("smallSword2");
        element31.setExpandable(false);
        element31.setNonBlocking(true);
        checkOut24.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final TextView element32 = new TextView();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("white16");
        element32.setNonBlocking(true);
        element32.setMultiline(false);
        element32.setExpandable(false);
        checkOut24.addBasicElement(element32);
        element32.onAttributesInitialized();
        this.method15(element32);
        this.method16(element32);
        element32.onChildrenAdded();
        checkOut24.onChildrenAdded();
        this.method17(checkOut22);
        checkOut22.onChildrenAdded();
        this.method18(checkOut21);
        checkOut21.onChildrenAdded();
        checkOut4.onChildrenAdded();
        this.method19(checkOut);
        this.method26(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("characterSheet");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("characteristics/DMG_EARTH_PERCENT/formattedPercentDescription");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PopupElement element = new PopupElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.NORTH);
        element.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setExpandable(false);
        element2.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element2.setStyle("PopupInformation");
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("systemConfiguration");
        checkOut4.setAttribute("text");
        checkOut4.setField("new.hpLoss.formula");
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element3.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.EAST);
        element5.setSize(new Dimension(50.0f, 100.0f));
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHgap((short)3);
        checkOut5.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("iconShield");
        element6.setExpandable(false);
        element6.setNonBlocking(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("white16");
        element7.setNonBlocking(true);
        element7.setMultiline(false);
        element7.setExpandable(false);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("characterSheet");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("characteristics/RES_EARTH_PERCENT/formattedPercentDescription");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        element.setStyle("smallEarthElement");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PopupElement element2 = new PopupElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element2.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        element2.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setNonBlocking(true);
        element3.setStyle("PopupInformation");
        element3.setExpandable(false);
        element3.setText("%EARTH%".replace("%EARTH%", Xulor.getInstance().getTranslatedString("EARTH")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.WEST);
        element5.setSize(new Dimension(-2, -2));
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setNonBlocking(false);
        checkOut2.setExpandable(false);
        checkOut2.setPrefSize(new Dimension(225, 30));
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("caracs");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 12, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut5.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut5.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut5.setOnPopupHide(onPopupHide);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(10, 0));
        checkOut6.setStyle("popup");
        element5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element6.setStyle("PopupInformation");
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHgap((short)3);
        checkOut8.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("characterSheet");
        checkOut9.setLocal(true);
        checkOut9.setAttribute("text");
        checkOut9.setField("characteristics/DMG_AIR_PERCENT/formattedPercentDescription");
        element9.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut10.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut10.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut10.setOnPopupHide(onPopupHide2);
        checkOut3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        element11.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element12.setStyle("PopupInformation");
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("systemConfiguration");
        checkOut13.setAttribute("text");
        checkOut13.setField("new.hpLoss.formula");
        element12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element13.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut13.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment17.EAST);
        element15.setSize(new Dimension(50.0f, 100.0f));
        checkOut10.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setHgap((short)3);
        checkOut14.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("iconShield");
        element16.setExpandable(false);
        element16.setNonBlocking(true);
        checkOut10.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white16");
        element17.setNonBlocking(true);
        element17.setMultiline(false);
        element17.setExpandable(false);
        checkOut10.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("characterSheet");
        checkOut15.setLocal(true);
        checkOut15.setAttribute("text");
        checkOut15.setField("characteristics/RES_AIR_PERCENT/formattedPercentDescription");
        element17.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element19.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element19.setOnPopupHide(onPopupHide3);
        element19.setStyle("smallAirElement");
        checkOut2.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PopupElement element20 = new PopupElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        element20.setHotSpotPosition(Alignment9.SOUTH);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        element20.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setNonBlocking(true);
        element21.setStyle("PopupInformation");
        element21.setExpandable(false);
        element21.setText("%AIR%".replace("%AIR%", Xulor.getInstance().getTranslatedString("AIR")));
        checkOut16.addBasicElement(element21);
        element21.onAttributesInitialized();
        final RowLayoutData element22 = new RowLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment9.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance4 = element21.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element20.onChildrenAdded();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.WEST);
        element23.setSize(new Dimension(-2, -2));
        element19.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setNonBlocking(false);
        checkOut18.setExpandable(false);
        checkOut18.setPrefSize(new Dimension(225, 30));
        checkOut.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        checkOut18.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setStyle("caracs");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut19.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 12, 0, 0));
        appearance5.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Padding element25 = new Padding();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setInsets(new Insets(0, 15, 0, 0));
        appearance5.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(100.0f, 100.0f));
        checkOut19.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut19.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setExpandable(false);
        checkOut21.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup");
        checkOut21.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        checkOut21.setOnPopupHide(onPopupHide4);
        checkOut19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final PopupElement element28 = new PopupElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment9.NORTH);
        element28.setHotSpotPosition(Alignment9.SOUTH);
        checkOut21.addBasicElement(element28);
        element28.onAttributesInitialized();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setPrefSize(new Dimension(10, 0));
        checkOut22.setStyle("popup");
        element28.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final RowLayout checkOut23 = RowLayout.checkOut();
        checkOut23.setAlign(Alignment9.WEST);
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final Label element29 = new Label();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setExpandable(false);
        element29.setText("%damage.bonus%".replace("%damage.bonus%", Xulor.getInstance().getTranslatedString("damage.bonus")));
        element29.setStyle("PopupInformation");
        checkOut22.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element29.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.EAST);
        element29.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut22.onChildrenAdded();
        element28.onChildrenAdded();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment17.WEST);
        element30.setSize(new Dimension(50.0f, 100.0f));
        checkOut21.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHgap((short)3);
        checkOut24.setAlign(Alignment9.WEST);
        checkOut21.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final Image element31 = new Image();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("smallSword2");
        element31.setExpandable(false);
        element31.setNonBlocking(true);
        checkOut21.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final TextView element32 = new TextView();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("white16");
        element32.setNonBlocking(true);
        element32.setMultiline(false);
        element32.setExpandable(false);
        checkOut21.addBasicElement(element32);
        element32.onAttributesInitialized();
        final RowLayoutData element33 = new RowLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAlign(Alignment9.CENTER);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("characterSheet");
        checkOut25.setLocal(true);
        checkOut25.setAttribute("text");
        checkOut25.setField("characteristics/DMG_FIRE_PERCENT/formattedPercentDescription");
        element32.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        element32.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setExpandable(false);
        checkOut26.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay5 = new PopupDisplayListener();
        onPopupDisplay5.setCallBackFunc("popup");
        checkOut26.setOnPopupDisplay(onPopupDisplay5);
        final PopupHideListener onPopupHide5 = new PopupHideListener();
        onPopupHide5.setCallBackFunc("closePopup");
        checkOut26.setOnPopupHide(onPopupHide5);
        checkOut19.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        this.method20(checkOut26);
        this.method21(checkOut26);
        this.method22(checkOut26);
        this.method23(checkOut26);
        this.method24(checkOut26);
        checkOut26.onChildrenAdded();
        checkOut19.onChildrenAdded();
        this.method25(checkOut18);
        checkOut18.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PopupElement element = new PopupElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.NORTH);
        element.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setExpandable(false);
        element2.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element2.setStyle("PopupInformation");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("systemConfiguration");
        checkOut3.setAttribute("text");
        checkOut3.setField("new.hpLoss.formula");
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("%damage.reduction%".replace("%damage.reduction%", Xulor.getInstance().getTranslatedString("damage.reduction")));
        element3.setElseValue("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.EAST);
        element.setSize(new Dimension(50.0f, 100.0f));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHgap((short)3);
        checkOut.setAlign(Alignment9.WEST);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("iconShield");
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white16");
        element.setNonBlocking(true);
        element.setMultiline(false);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("characterSheet");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("characteristics/RES_FIRE_PERCENT/formattedPercentDescription");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        element.setStyle("smallFireElement");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PopupElement element2 = new PopupElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element2.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        element2.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setNonBlocking(true);
        element3.setStyle("PopupInformation");
        element3.setExpandable(false);
        element3.setText("%FIRE%".replace("%FIRE%", Xulor.getInstance().getTranslatedString("FIRE")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.WEST);
        element5.setSize(new Dimension(-2, -2));
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setNonBlocking(false);
        checkOut2.setExpandable(false);
        checkOut2.setPrefSize(new Dimension(225, 30));
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("caracs");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 12, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 15, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut5.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        checkOut5.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut5.setOnPopupHide(onPopupHide);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PopupElement element5 = new PopupElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        element5.setHotSpotPosition(Alignment9.SOUTH);
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(10, 0));
        checkOut6.setStyle("popup");
        element5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setStyle("PopupInformation");
        element6.setText("%debuff.bonus.ap%".replace("%debuff.bonus.ap%", Xulor.getInstance().getTranslatedString("debuff.bonus.ap")));
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.EAST);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element5.onChildrenAdded();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.WEST);
        element7.setSize(new Dimension(50.0f, 100.0f));
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHgap((short)3);
        checkOut8.setAlign(Alignment9.WEST);
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("smallSword2");
        element8.setExpandable(false);
        element8.setNonBlocking(true);
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white16");
        element9.setNonBlocking(true);
        element9.setMultiline(false);
        element9.setExpandable(false);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("characterSheet");
        checkOut9.setLocal(true);
        checkOut9.setAttribute("text");
        checkOut9.setField("characteristics/AP_DEBUFF_POWER/formattedPercentDescription");
        element9.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut10.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        checkOut10.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut10.setOnPopupHide(onPopupHide2);
        checkOut3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH);
        element11.setHotSpotPosition(Alignment9.SOUTH);
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        element11.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setStyle("PopupInformation");
        element12.setText("%resist.bonus.ap%".replace("%resist.bonus.ap%", Xulor.getInstance().getTranslatedString("resist.bonus.ap")));
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.EAST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.EAST);
        element13.setSize(new Dimension(50.0f, 100.0f));
        checkOut10.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHgap((short)3);
        checkOut13.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("iconShield");
        element14.setExpandable(false);
        element14.setNonBlocking(true);
        checkOut10.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("white16");
        element15.setNonBlocking(true);
        element15.setMultiline(false);
        element15.setExpandable(false);
        checkOut10.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("characterSheet");
        checkOut14.setLocal(true);
        checkOut14.setAttribute("text");
        checkOut14.setField("characteristics/AP_DEBUFF_RES/formattedPercentDescription");
        element15.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Image element17 = new Image();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup");
        element17.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element17.setOnPopupHide(onPopupHide3);
        element17.setStyle("smallApBuff");
        checkOut2.addBasicElement(element17);
        element17.onAttributesInitialized();
        final PopupElement element18 = new PopupElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.NORTH);
        element18.setHotSpotPosition(Alignment9.SOUTH);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setPrefSize(new Dimension(10, 0));
        checkOut15.setStyle("popup");
        element18.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setAlign(Alignment9.WEST);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Label element19 = new Label();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(true);
        element19.setStyle("PopupInformation");
        element19.setExpandable(false);
        element19.setText("%APShort%".replace("%APShort%", Xulor.getInstance().getTranslatedString("APShort")));
        checkOut15.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.EAST);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element18.onChildrenAdded();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment17.WEST);
        element21.setSize(new Dimension(-2, -2));
        element17.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setNonBlocking(false);
        checkOut17.setExpandable(false);
        checkOut17.setPrefSize(new Dimension(225, 30));
        checkOut.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayout element22 = new StaticLayout();
        element22.onCheckOut();
        checkOut17.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setStyle("caracs");
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut18.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 12, 0, 0));
        appearance5.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Padding element23 = new Padding();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(0, 15, 0, 0));
        appearance5.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setSize(new Dimension(100.0f, 100.0f));
        checkOut18.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final StaticLayout element25 = new StaticLayout();
        element25.onCheckOut();
        element25.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut20.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup");
        checkOut20.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        checkOut20.setOnPopupHide(onPopupHide4);
        checkOut18.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final PopupElement element26 = new PopupElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.NORTH);
        element26.setHotSpotPosition(Alignment9.SOUTH);
        checkOut20.addBasicElement(element26);
        element26.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        element26.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setAlign(Alignment9.WEST);
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setExpandable(false);
        element27.setStyle("PopupInformation");
        element27.setText("%debuff.bonus.mp%".replace("%debuff.bonus.mp%", Xulor.getInstance().getTranslatedString("debuff.bonus.mp")));
        checkOut21.addBasicElement(element27);
        element27.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element27.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.EAST);
        element27.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element26.onChildrenAdded();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment17.WEST);
        element28.setSize(new Dimension(50.0f, 100.0f));
        checkOut20.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final RowLayout checkOut23 = RowLayout.checkOut();
        checkOut23.setHgap((short)3);
        checkOut23.setAlign(Alignment9.WEST);
        checkOut20.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final Image element29 = new Image();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("smallSword2");
        element29.setExpandable(false);
        element29.setNonBlocking(true);
        checkOut20.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("white16");
        element30.setNonBlocking(true);
        element30.setMultiline(false);
        element30.setExpandable(false);
        checkOut20.addBasicElement(element30);
        element30.onAttributesInitialized();
        final RowLayoutData element31 = new RowLayoutData();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAlign(Alignment9.CENTER);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("characterSheet");
        checkOut24.setLocal(true);
        checkOut24.setAttribute("text");
        checkOut24.setField("characteristics/MP_DEBUFF_POWER/formattedPercentDescription");
        element30.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setExpandable(false);
        checkOut25.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay5 = new PopupDisplayListener();
        onPopupDisplay5.setCallBackFunc("popup");
        checkOut25.setOnPopupDisplay(onPopupDisplay5);
        final PopupHideListener onPopupHide5 = new PopupHideListener();
        onPopupHide5.setCallBackFunc("closePopup");
        checkOut25.setOnPopupHide(onPopupHide5);
        checkOut18.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final PopupElement element32 = new PopupElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment9.NORTH);
        element32.setHotSpotPosition(Alignment9.SOUTH);
        checkOut25.addBasicElement(element32);
        element32.onAttributesInitialized();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setPrefSize(new Dimension(10, 0));
        checkOut26.setStyle("popup");
        element32.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setAlign(Alignment9.WEST);
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        this.method27(checkOut26);
        checkOut26.onChildrenAdded();
        element32.onChildrenAdded();
        this.method28(checkOut25);
        this.method29(checkOut25);
        this.method30(checkOut25);
        this.method31(checkOut25);
        checkOut25.onChildrenAdded();
        checkOut18.onChildrenAdded();
        this.method32(checkOut17);
        checkOut17.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setStyle("PopupInformation");
        element.setText("%resist.bonus.mp%".replace("%resist.bonus.mp%", Xulor.getInstance().getTranslatedString("resist.bonus.mp")));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.EAST);
        element.setSize(new Dimension(50.0f, 100.0f));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHgap((short)3);
        checkOut.setAlign(Alignment9.WEST);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("iconShield");
        element.setExpandable(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white16");
        element.setNonBlocking(true);
        element.setMultiline(false);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("characterSheet");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("characteristics/MP_DEBUFF_RES/formattedPercentDescription");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element.setOnPopupHide(onPopupHide);
        element.setStyle("smallMpBuff");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PopupElement element2 = new PopupElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element2.setHotSpotPosition(Alignment9.SOUTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        element2.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setNonBlocking(true);
        element3.setStyle("PopupInformation");
        element3.setExpandable(false);
        element3.setText("%MPShort%".replace("%MPShort%", Xulor.getInstance().getTranslatedString("MPShort")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.EAST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.WEST);
        element5.setSize(new Dimension(-2, -2));
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("titleBar");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("characterSheet");
        checkOut2.setLocal(true);
        checkOut2.setField("stateAffinities/hasSomeBonuses");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteTitle");
        element.setText("%state.affinities%".replace("%state.affinities%", Xulor.getInstance().getTranslatedString("state.affinities")));
        element.setNonBlocking(true);
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("characterSheet");
        checkOut2.setLocal(true);
        checkOut2.setField("stateAffinities/hasSomeBonuses");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 0, 2));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.WEST);
        element2.setSize(new Dimension(50.0f, 100.0f));
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setText("%application.bonus%".replace("%application.bonus%", Xulor.getInstance().getTranslatedString("application.bonus")));
        element3.setStyle("title");
        element3.setExpandable(false);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final List element4 = new List();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setCellSize(new Dimension(100.0f, 32));
        element4.setAutoIdealSize(true);
        element4.setIdealSizeMinColumns(1);
        element4.setIdealSizeMaxColumns(1);
        element4.setIdealSizeMinRows(1);
        element4.setIdealSizeMaxRows(5);
        checkOut3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("content");
        checkOut6.setName("characterSheet");
        checkOut6.setLocal(true);
        checkOut6.setField("stateAffinities/applicationBonuses");
        element4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("caracsBackground");
        element5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut7.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Border element9 = new Border();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(7, 4, 7, 5));
        appearance3.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setExpandable(false);
        element10.setDisplaySize(new Dimension(24, 24));
        checkOut7.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element10.getAppearance();
        appearance4.setElementMap(elementMap);
        element10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 3));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element10.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("texture");
        element11.setField("state/iconUrl");
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element10.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("bold");
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("state/name");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setExpandable(false);
        checkOut7.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 0, 0, 3));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("value");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 2, 0, 0));
        appearance6.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance6.onChildrenAdded();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.EAST);
        element16.setSize(new Dimension(50.0f, 100.0f));
        checkOut11.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element17 = new Label();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setText("%resist.bonus%".replace("%resist.bonus%", Xulor.getInstance().getTranslatedString("resist.bonus")));
        element17.setStyle("title");
        element17.setExpandable(false);
        checkOut11.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element17.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.WEST);
        element17.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element17.onChildrenAdded();
        final List element18 = new List();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setCellSize(new Dimension(100.0f, 32));
        element18.setAutoIdealSize(true);
        element18.setIdealSizeMinColumns(1);
        element18.setIdealSizeMaxColumns(1);
        checkOut11.addBasicElement(element18);
        element18.onAttributesInitialized();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("content");
        checkOut14.setName("characterSheet");
        checkOut14.setLocal(true);
        checkOut14.setField("stateAffinities/resistanceBonuses");
        element18.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemCondition element21 = new ItemCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final NotNullCondition element22 = new NotNullCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setStyle("caracsBackground");
        element19.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut15.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Border element23 = new Border();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setInsets(new Insets(7, 4, 7, 5));
        appearance8.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Image element24 = new Image();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setExpandable(false);
        element24.setDisplaySize(new Dimension(24, 24));
        checkOut15.addBasicElement(element24);
        element24.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element24.getAppearance();
        appearance9.setElementMap(elementMap);
        element24.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 0, 0, 3));
        appearance9.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance9.onChildrenAdded();
        final PixmapElement checkOut17 = PixmapElement.checkOut();
        checkOut17.setElementMap(elementMap);
        element24.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("texture");
        element25.setField("state/iconUrl");
        checkOut17.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element24.onChildrenAdded();
        final TextView element26 = new TextView();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("bold");
        checkOut15.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("state/name");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final Label element28 = new Label();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("bold");
        element28.setExpandable(false);
        checkOut15.addBasicElement(element28);
        element28.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element28.getAppearance();
        appearance10.setElementMap(elementMap);
        element28.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 0, 0, 3));
        appearance10.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance10.onChildrenAdded();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element29.setField("value");
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 3, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("displayAllCharacteristics");
        checkOut4.setAttribute("visible");
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("tutorialProperty.display");
        checkOut6.setAttribute("visible");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("titleBar");
        checkOut8.setExpandable(false);
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteTitle");
        element.setText("%characteristics.fight%".replace("%characteristics.fight%", Xulor.getInstance().getTranslatedString("characteristics.fight")));
        element.setNonBlocking(true);
        element.setExpandable(false);
        checkOut8.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.NORTH);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final List element2 = new List();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setCellSize(new Dimension(50.0f, 20));
        element2.setHorizontal(false);
        element2.setAutoIdealSize(true);
        element2.setIdealSizeMinColumns(2);
        element2.setIdealSizeMaxColumns(2);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("characterSheet");
        checkOut9.setLocal(true);
        checkOut9.setAttribute("content");
        checkOut9.setField("characteristics/fight");
        element2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(true);
        checkOut10.setStyle("caracs");
        checkOut10.setNonBlocking(false);
        element3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final String id = "carac";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut10.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("value");
        data.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        data.onChildrenAdded();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut10.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut10.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Border element9 = new Border();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(0, 0, 0, 0));
        appearance3.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ToggleButton element10 = new ToggleButton();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("caracs");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element10.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element10.setOnPopupHide(onPopupHide);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.characterSheet:highlightCharacteristic(charac)");
        element10.setOnSelectionChange(onSelectionChange);
        checkOut10.addBasicElement(element10);
        element10.onAttributesInitialized();
        final PopupElement element11 = new PopupElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.NORTH_WEST);
        element11.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        element11.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut12.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setMinWidth(1);
        element12.setMaxWidth(250);
        element12.setExpandable(false);
        element12.setStyle("bold");
        element12.setVisible(false);
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element12.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("name");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setMinWidth(1);
        element14.setMaxWidth(250);
        element14.setExpandable(false);
        element14.setStyle("white");
        checkOut11.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("description");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setMinWidth(1);
        element16.setMaxWidth(250);
        element16.setText("%characteristic.clickToAddRemove%".replace("%characteristic.clickToAddRemove%", Xulor.getInstance().getTranslatedString("characteristic.clickToAddRemove")));
        element16.setExpandable(false);
        element16.setStyle("small");
        checkOut11.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element16.getAppearance();
        appearance6.setElementMap(elementMap);
        element16.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(5, 0, 0, 0));
        appearance6.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setLocal(true);
        checkOut17.setName("mainCharacterSheet");
        checkOut17.setAttribute("visible");
        element16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element11.onChildrenAdded();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 100.0f));
        element10.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("selected");
        element18.setField("highlighted");
        element10.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("enabled");
        element19.setField("highlighted");
        element10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final AndCondition element21 = new AndCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final OrCondition element22 = new OrCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final TrueCondition element23 = new TrueCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final FalseCondition element24 = new FalseCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("characterSheet");
        checkOut18.setLocal(true);
        checkOut18.setAttribute("comparedValue");
        checkOut18.setField("characteristics/isCustomFull");
        element24.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        element24.onChildrenAdded();
        element22.onChildrenAdded();
        final TrueCondition element25 = new TrueCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element21.addBasicElement(element25);
        element25.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setLocal(true);
        checkOut19.setName("mainCharacterSheet");
        checkOut19.setAttribute("comparedValue");
        element25.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element25.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element10.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut10.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(100.0f, 100.0f));
        checkOut20.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut20.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(2, 7, 2, 7));
        appearance7.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance7.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setPrefSize(new Dimension(24, 16));
        checkOut22.setExpandable(false);
        checkOut20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final RowLayout checkOut23 = RowLayout.checkOut();
        checkOut23.setAlign(Alignment9.CENTER);
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final Image element27 = new Image();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setExpandable(false);
        element27.setPrefSize(new Dimension(16, 16));
        element27.setNonBlocking(true);
        checkOut22.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("style");
        element28.setField("iconStyle");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("bold");
        element29.setNonBlocking(true);
        checkOut20.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element29.getAppearance();
        appearance8.setElementMap(elementMap);
        element29.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance8.onChildrenAdded();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("text");
        element30.setField("name");
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        final TextView element31 = new TextView();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("bold");
        element31.setExpandable(false);
        element31.setNonBlocking(true);
        checkOut20.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("text");
        element32.setField("formattedValueDescription");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final String id2 = "charac";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut10.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("value");
        data2.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        data2.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setExpandable(false);
        checkOut.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final PropertyElement checkOut26 = PropertyElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setName("tutorialProperty.display");
        checkOut26.setAttribute("visible");
        checkOut25.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        this.method36(checkOut25);
        this.method37(checkOut25);
        this.method38(checkOut25);
        checkOut25.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHorizontal(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("titleBar");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteTitle");
        element.setText("%characteristics.secondary%".replace("%characteristics.secondary%", Xulor.getInstance().getTranslatedString("characteristics.secondary")));
        element.setNonBlocking(true);
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(50.0f, 20));
        element.setHorizontal(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(2);
        element.setIdealSizeMaxColumns(2);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("characterSheet");
        checkOut.setLocal(true);
        checkOut.setAttribute("content");
        checkOut.setField("characteristics/secondary");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setExpandable(true);
        checkOut2.setStyle("caracs");
        checkOut2.setNonBlocking(false);
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final String id = "carac";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut2.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Border element8 = new Border();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance.onChildrenAdded();
        final ToggleButton element9 = new ToggleButton();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("caracs");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element9.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.characterSheet:highlightCharacteristic(charac)");
        element9.setOnSelectionChange(onSelectionChange);
        checkOut2.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PopupElement element10 = new PopupElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.NORTH_WEST);
        element10.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setPrefSize(new Dimension(10, 0));
        checkOut3.setStyle("popup");
        element10.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.WEST);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setMinWidth(1);
        element11.setMaxWidth(250);
        element11.setExpandable(false);
        element11.setStyle("bold");
        element11.setVisible(false);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("text");
        element12.setField("name");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setMinWidth(1);
        element13.setMaxWidth(250);
        element13.setExpandable(false);
        element13.setStyle("white");
        checkOut3.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("text");
        element14.setField("description");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setMinWidth(1);
        element15.setMaxWidth(250);
        element15.setText("%characteristic.clickToAddRemove%".replace("%characteristic.clickToAddRemove%", Xulor.getInstance().getTranslatedString("characteristic.clickToAddRemove")));
        element15.setExpandable(false);
        element15.setStyle("small");
        checkOut3.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element15.getAppearance();
        appearance4.setElementMap(elementMap);
        element15.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(5, 0, 0, 0));
        appearance4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final ColorElement checkOut8 = ColorElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setLocal(true);
        checkOut9.setName("mainCharacterSheet");
        checkOut9.setAttribute("visible");
        element15.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element10.onChildrenAdded();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setSize(new Dimension(100.0f, 100.0f));
        element9.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("selected");
        element17.setField("highlighted");
        element9.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("enabled");
        element18.setField("highlighted");
        element9.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final AndCondition element20 = new AndCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final OrCondition element21 = new OrCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final TrueCondition element22 = new TrueCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final FalseCondition element23 = new FalseCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("characterSheet");
        checkOut10.setLocal(true);
        checkOut10.setAttribute("comparedValue");
        checkOut10.setField("characteristics/isCustomFull");
        element23.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element23.onChildrenAdded();
        element21.onChildrenAdded();
        final TrueCondition element24 = new TrueCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element20.addBasicElement(element24);
        element24.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setLocal(true);
        checkOut11.setName("mainCharacterSheet");
        checkOut11.setAttribute("comparedValue");
        element24.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element24.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element9.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setSize(new Dimension(100.0f, 100.0f));
        checkOut12.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut12.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(2, 7, 2, 7));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(24, 16));
        checkOut14.setExpandable(false);
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.CENTER);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Image element26 = new Image();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setExpandable(false);
        element26.setPrefSize(new Dimension(16, 16));
        element26.setNonBlocking(true);
        checkOut14.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("style");
        element27.setField("iconStyle");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final TextView element28 = new TextView();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("bold");
        element28.setNonBlocking(true);
        checkOut12.addBasicElement(element28);
        element28.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element28.getAppearance();
        appearance6.setElementMap(elementMap);
        element28.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 5, 0, 0));
        appearance6.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element29.setField("name");
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("bold");
        element30.setExpandable(false);
        element30.setNonBlocking(true);
        checkOut12.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("formattedValueDescription");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final String id2 = "charac";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut2.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("value");
        data2.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        data2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 44, 25, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("mainCharacterSheet");
        checkOut3.setAttribute("visible");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("style");
        checkOut4.setName("localPlayer");
        checkOut4.setField("hasAptitudePoints");
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("LevelGainParticle");
        element3.setElseValue("");
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.SOUTH_EAST);
        element5.setXOffset(-25);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final String id = "openAptitudesButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("characterSheetAptitudePoints");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.characterSheet:openCloseAptitudes");
        button.setOnClick(onClick);
        button.setPrefSize(new Dimension(0, 31));
        checkOut2.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        button.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        button.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setNonBlocking(true);
        element8.setStyle("whiteBold");
        element8.setText("%aptitudeDialogText%".replace("%aptitudeDialogText%", Xulor.getInstance().getTranslatedString("aptitudeDialogText")));
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance = element8.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 15, 0, 15));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(100.0f, 100.0f));
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method41(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "closeCharacterSheetDialog";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("close");
        button.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        button.setOnClick(onClick);
        basicElement.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.NORTH_EAST);
        element.setXOffset(-18);
        element.setYOffset(-12);
        button.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        button.onChildrenAdded();
        return button;
    }
    
    public BasicElement method42(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.WEST);
        element.setInitValue(true);
        element.setXOffset(40);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
