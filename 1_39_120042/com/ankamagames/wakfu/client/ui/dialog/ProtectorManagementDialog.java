package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.event.listener.*;

public class ProtectorManagementDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public ProtectorManagementDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "mainContainer";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut6.setAlign(Alignment9.NORTH);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("StyledBold16White");
        element8.setNonBlocking(true);
        element8.setText("%protector.areaManagement%".replace("%protector.areaManagement%", Xulor.getInstance().getTranslatedString("protector.areaManagement")));
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut8.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut10);
        }
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut12.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setStyle("ScrollString");
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.EAST);
        element10.setSize(new Dimension(10, 100.0f));
        element10.setXOffset(-15);
        checkOut13.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(30, 0, 40, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final ScrollContainer element11 = new ScrollContainer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("Encyclopedia");
        element11.setExpandable(false);
        element11.setHorizontalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        element11.setVerticalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_DISPLAY);
        checkOut12.addBasicElement(element11);
        element11.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(100.0f, 100.0f));
        element12.setAlign(Alignment17.CENTER);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance7 = element11.getAppearance();
        appearance7.setElementMap(elementMap);
        element11.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(17, 3, 20, 0));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Padding element13 = new Padding();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setInsets(new Insets(0, 18, 0, 4));
        appearance7.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        appearance7.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setStyle("tiledScroll");
        checkOut16.setExpandable(false);
        checkOut16.setPrefSize(new Dimension(415, 0));
        element11.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut16.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Padding element14 = new Padding();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setInsets(new Insets(10, 0, 25, 0));
        appearance8.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 0, 0, 10));
        appearance8.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHorizontal(false);
        checkOut18.setAlign(Alignment9.NORTH);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setExpandable(false);
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayout element15 = new StaticLayout();
        element15.onCheckOut();
        element15.setAdaptToContentSize(true);
        checkOut19.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setSize(new Dimension(100.0f, 100.0f));
        checkOut20.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setStyle("EncyclopediaSplashTitle");
        checkOut22.setExpandable(false);
        checkOut20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final RowLayout checkOut23 = RowLayout.checkOut();
        checkOut23.setAlign(Alignment9.WEST);
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut22.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element17 = new Padding();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setInsets(new Insets(0, 25, 0, 0));
        appearance9.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        appearance9.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("StyledBold16White");
        element18.setNonBlocking(true);
        element18.setExpandable(false);
        checkOut22.addBasicElement(element18);
        element18.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("protector");
        checkOut24.setAttribute("text");
        checkOut24.setField("name");
        element18.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final DecoratorAppearance appearance10 = element18.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.WEST);
        element18.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(5, 0, 10, 0));
        appearance10.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance10.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setExpandable(false);
        checkOut20.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setAlign(Alignment9.WEST);
        checkOut26.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final DecoratorAppearance appearance11 = checkOut26.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut26.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final Margin checkOut28 = Margin.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setInsets(new Insets(0, 25, 0, 0));
        appearance11.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        appearance11.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setDisplaySize(new Dimension(64, 64));
        element19.setExpandable(false);
        checkOut26.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PixmapElement checkOut29 = PixmapElement.checkOut();
        checkOut29.setElementMap(elementMap);
        element19.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final PropertyElement checkOut30 = PropertyElement.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setName("protector");
        checkOut30.setAttribute("texture");
        checkOut30.setField("nation/flagIconUrl");
        checkOut29.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        checkOut29.onChildrenAdded();
        element19.onChildrenAdded();
        final Container checkOut31 = Container.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setExpandable(false);
        checkOut26.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        final DecoratorAppearance appearance12 = checkOut31.getAppearance();
        appearance12.setElementMap(elementMap);
        checkOut31.addBasicElement(appearance12);
        appearance12.onAttributesInitialized();
        final Margin checkOut32 = Margin.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setInsets(new Insets(0, 5, 0, 0));
        appearance12.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        appearance12.onChildrenAdded();
        final RowLayout checkOut33 = RowLayout.checkOut();
        checkOut33.setHorizontal(false);
        checkOut31.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        checkOut33.onChildrenAdded();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        checkOut31.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("StyledBoldDark12");
        element21.setNonBlocking(true);
        element21.setExpandable(false);
        element21.setMinWidth(150);
        element21.setMaxWidth(180);
        checkOut31.addBasicElement(element21);
        element21.onAttributesInitialized();
        final PropertyElement checkOut34 = PropertyElement.checkOut();
        checkOut34.setElementMap(elementMap);
        checkOut34.setName("protector");
        checkOut34.setAttribute("text");
        checkOut34.setField("territoryName");
        element21.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        checkOut34.onChildrenAdded();
        final DecoratorAppearance appearance13 = element21.getAppearance();
        appearance13.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance13).setAlign(Alignment9.WEST);
        element21.addBasicElement(appearance13);
        appearance13.onAttributesInitialized();
        appearance13.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut31.onChildrenAdded();
        checkOut26.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setDisplaySize(new Dimension(128, 128));
        element22.setExpandable(false);
        checkOut19.addBasicElement(element22);
        element22.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setSize(new Dimension(-2, -2));
        element23.setAlign(Alignment17.EAST);
        element23.setXOffset(-10);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PixmapElement checkOut35 = PixmapElement.checkOut();
        checkOut35.setElementMap(elementMap);
        element22.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        final PropertyElement checkOut36 = PropertyElement.checkOut();
        checkOut36.setElementMap(elementMap);
        checkOut36.setName("protector");
        checkOut36.setAttribute("texture");
        checkOut36.setField("illustrationUrl");
        checkOut35.addBasicElement(checkOut36);
        checkOut36.onAttributesInitialized();
        checkOut36.onChildrenAdded();
        checkOut35.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final Container checkOut37 = Container.checkOut();
        checkOut37.setElementMap(elementMap);
        checkOut37.setExpandable(false);
        checkOut37.setVisible(false);
        checkOut16.addBasicElement(checkOut37);
        checkOut37.onAttributesInitialized();
        final PropertyElement checkOut38 = PropertyElement.checkOut();
        checkOut38.setElementMap(elementMap);
        checkOut38.setLocal(true);
        checkOut38.setName("currentPage");
        checkOut38.setAttribute("visible");
        checkOut37.addBasicElement(checkOut38);
        checkOut38.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        checkOut38.addBasicElement(element24);
        element24.onAttributesInitialized();
        final EqualCondition element25 = new EqualCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setValue("0");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut38.onChildrenAdded();
        this.method0(checkOut37);
        this.method1(checkOut37);
        this.method2(checkOut37);
        this.method3(checkOut37);
        this.method4(checkOut37);
        this.method5(checkOut37);
        checkOut37.onChildrenAdded();
        this.method6(checkOut16);
        this.method17(checkOut16);
        this.method26(checkOut16);
        checkOut16.onChildrenAdded();
        element11.onChildrenAdded();
        this.method36(checkOut12);
        checkOut12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut8.onChildrenAdded();
        this.method37(checkOut2);
        checkOut2.onChildrenAdded();
        this.method38(element);
        this.method39(element);
        this.method40(element);
        this.method41(element);
        this.method68(element);
        this.method69(element);
        this.method70(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHorizontal(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaSplashTitle");
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 25));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 25, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("StyledBold16White");
        element3.setNonBlocking(true);
        element3.setExpandable(false);
        element3.setText("%protector.tax.desc%".replace("%protector.tax.desc%", Xulor.getInstance().getTranslatedString("protector.tax.desc")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 10, 0, 10));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 5, 10, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Slider element3 = new Slider();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSliderSize(0.01f);
        element3.setHorizontal(true);
        element3.setStyle("volume2");
        element3.setExpandable(false);
        element3.setPrefSize(new Dimension(0, 10));
        element3.setNumFixedValues(21);
        final SliderMovedListener onSliderMove = new SliderMovedListener();
        onSliderMove.setCallBackFunc("wakfu.protectorManagement:setTaxValue");
        element3.setOnSliderMove(onSliderMove);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("protector");
        checkOut4.setAttribute("value");
        checkOut4.setField("tax/taxValue");
        element3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("nation");
        checkOut5.setAttribute("enabled");
        checkOut5.setField("localPlayerHasRankToChangeTaxes");
        element3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 3, 0, 3));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.WEST);
        element5.setSize(new Dimension(7.0f, 100.0f));
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut7.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(3, 6, 3, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final PlainBackground element6 = new PlainBackground();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        appearance3.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.EAST);
        element7.setSize(new Dimension(30.0f, 100.0f));
        checkOut9.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(3, 0, 3, 6));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        appearance4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setExpandable(false);
        element9.setMinWidth(40);
        element9.setMaxWidth(40);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("protector");
        checkOut11.setAttribute("text");
        checkOut11.setField("tax/taxPercentage");
        element9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance5 = element9.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.CENTER);
        element9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 5, 0, 5));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        element9.onChildrenAdded();
        final Button element10 = new Button();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("smallValid");
        element10.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:applyTaxes");
        element10.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(subscriptionError1Popup)");
        element10.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element10.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id = "subscriptionError1Popup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element10.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        popupElement.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("politicInteractionRight");
        checkOut15.setAttribute("visible");
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut15.addBasicElement(element11);
        element11.onAttributesInitialized();
        final FalseCondition element12 = new FalseCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("white");
        element13.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element13.setEnableShrinking(false);
        checkOut14.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element13.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance6.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance6.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setName("politicInteractionRight");
        checkOut17.setAttribute("enabled");
        element10.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("nation");
        checkOut18.setAttribute("visible");
        checkOut18.setField("localPlayerHasRankToChangeTaxes");
        element10.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final DecoratorAppearance appearance7 = element10.getAppearance();
        appearance7.setElementMap(elementMap);
        element10.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 0, 0, 3));
        appearance7.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance7.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaSplashTitle");
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 25));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 25, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("StyledBold16White");
        element3.setNonBlocking(true);
        element3.setExpandable(false);
        element3.setText("%protector.budget%".replace("%protector.budget%", Xulor.getInstance().getTranslatedString("protector.budget")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 20, 2, 20));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("smallDarkBackground");
        checkOut5.setExpandable(false);
        checkOut5.setPrefSize(new Dimension(0, 0));
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("protectorTreasury");
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setAlign(Alignment17.SOUTH_WEST);
        element4.setXOffset(5);
        element4.setYOffset(5);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("scrollDarkBackgroundedTitle");
        element5.setText("%protector.funds%".replace("%protector.funds%", Xulor.getInstance().getTranslatedString("protector.funds")));
        element5.setMinWidth(1);
        element5.setMaxWidth(200);
        checkOut6.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 5, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final TextView element6 = new TextView();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("scrollDarkBackgroundedTitle");
        checkOut9.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("text");
        checkOut10.setName("protector");
        checkOut10.setField("walletHandler/totalAmount");
        element6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element6.onChildrenAdded();
        final Button element7 = new Button();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("yellowSmall");
        element7.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:openTransferBudget");
        element7.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(subscriptionError1Popup)");
        element7.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element7.setOnPopupHide(onPopupHide);
        checkOut9.addBasicElement(element7);
        element7.onAttributesInitialized();
        final String id = "subscriptionError1Popup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element7.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        popupElement.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("politicInteractionRight");
        checkOut12.setAttribute("visible");
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut12.addBasicElement(element8);
        element8.onAttributesInitialized();
        final FalseCondition element9 = new FalseCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("white");
        element10.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element10.setEnableShrinking(false);
        checkOut11.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element10.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance4.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance4.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut11.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("politicInteractionRight");
        checkOut14.setAttribute("enabled");
        element7.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("nation");
        checkOut15.setAttribute("visible");
        checkOut15.setField("localPlayerHasRankToChangeTaxes");
        element7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("flyingKamas");
        element11.setNonBlocking(true);
        element7.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element11.getAppearance();
        appearance5.setElementMap(elementMap);
        element11.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(3, 8, 3, 3));
        appearance5.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance5.onChildrenAdded();
        element11.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(100.0f, 27));
        element.setHorizontal(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(1);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 20, 0, 20));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("content");
        checkOut2.setName("protector");
        checkOut2.setField("walletHandler/wallets");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("smallDarkBackground");
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final String id = "wallet";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("value");
        data.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        data.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(2, 0, 2, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(2, 8, 2, 2));
        appearance2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("darkBold");
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("text");
        checkOut5.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        appearance3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("name");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("darkBold");
        element7.setExpandable(false);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element7.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 3));
        appearance4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("text");
        checkOut7.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        appearance4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("amount");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final Button element9 = new Button();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("yellowSmallFont");
        element9.setExpandable(false);
        element9.setText("%protector.allocateBudget%".replace("%protector.allocateBudget%", Xulor.getInstance().getTranslatedString("protector.allocateBudget")));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:openAllocateBudget(wallet)");
        element9.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(subscriptionError1Popup)");
        element9.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide);
        checkOut3.addBasicElement(element9);
        element9.onAttributesInitialized();
        final String id2 = "subscriptionError1Popup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element9.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("politicInteractionRight");
        checkOut9.setAttribute("visible");
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final FalseCondition element11 = new FalseCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("white");
        element12.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element12.setEnableShrinking(false);
        checkOut8.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element12.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element12.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("politicInteractionRight");
        checkOut11.setAttribute("enabled");
        element9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("nation");
        checkOut12.setAttribute("visible");
        checkOut12.setField("localPlayerHasRankToChangeTaxes");
        element9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setVisible(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("currentPage");
        checkOut3.setAttribute("visible");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("1");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("EncyclopediaSplashTitle");
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(0, 25));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("protector");
        checkOut5.setField("baseChallenges");
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        element5.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(0, 25, 0, 0));
        appearance.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("StyledBold16White");
        element7.setNonBlocking(true);
        element7.setExpandable(false);
        element7.setText("%nation.challenges.base%".replace("%nation.challenges.base%", Xulor.getInstance().getTranslatedString("nation.challenges.base")));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.WEST);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("darkBold");
        element9.setMinWidth(1);
        element9.setMaxWidth(365);
        element9.setExpandable(true);
        element9.setText("%quest.money.description%".replace("%quest.money.description%", Xulor.getInstance().getTranslatedString("quest.money.description")));
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.WEST);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance3 = element9.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element9.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 20, 0, 10));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("visible");
        checkOut8.setName("protector");
        checkOut8.setField("hasMoneyBaseChallenges");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("visible");
        checkOut10.setName("protector");
        checkOut10.setField("baseChallenges");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final NotNullCondition element12 = new NotNullCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 20, 0, 0));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        final String id = "baseChallengesList";
        final StackList list = new StackList();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setInnerExpandable(false);
        list.setHorizontal(false);
        checkOut9.addBasicElement(list);
        list.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        list.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setAttribute("content");
        checkOut13.setName("protector");
        checkOut13.setField("baseChallenges");
        list.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final ItemRenderer element13 = new ItemRenderer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(challengeDetailPopup,mainContainer)");
        element13.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("closePopup");
        element13.setOnItemOut(onItemOut);
        list.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemCondition element15 = new ItemCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final NotNullCondition element16 = new NotNullCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setNonBlocking(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:openChallengeDescription(baseChallenge)");
        checkOut14.setOnClick(onClick);
        element13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final String id2 = "baseChallenge";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut14.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("value");
        data.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        data.onChildrenAdded();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment17.CENTER);
        element18.setSize(new Dimension(100.0f, 100.0f));
        checkOut14.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut14.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element19 = new Padding();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setInsets(new Insets(2, 0, 2, 0));
        appearance5.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setNonBlocking(true);
        element20.setDisplaySize(new Dimension(24, 24));
        element20.setExpandable(false);
        checkOut14.addBasicElement(element20);
        element20.onAttributesInitialized();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.CENTER);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element20.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("texture");
        element22.setField("iconUrl");
        checkOut16.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("darkBold");
        element23.setMinWidth(1);
        element23.setMaxWidth(325);
        element23.setExpandable(true);
        checkOut14.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element23.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element23.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 5, 0, 10));
        appearance6.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element13.onChildrenAdded();
        list.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setStyle("EncyclopediaSplashTitle");
        checkOut18.setExpandable(false);
        checkOut18.setPrefSize(new Dimension(0, 25));
        checkOut.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("visible");
        checkOut19.setName("protector");
        checkOut19.setField("boughtChallenges");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        checkOut19.addBasicElement(element25);
        element25.onAttributesInitialized();
        final NotNullCondition element26 = new NotNullCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut18.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Padding element28 = new Padding();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setInsets(new Insets(0, 25, 0, 0));
        appearance7.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        appearance7.onChildrenAdded();
        final Label element29 = new Label();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("StyledBold16White");
        element29.setNonBlocking(true);
        element29.setExpandable(false);
        element29.setText("%nation.challenges.bought%".replace("%nation.challenges.bought%", Xulor.getInstance().getTranslatedString("nation.challenges.bought")));
        checkOut18.addBasicElement(element29);
        element29.onAttributesInitialized();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment17.WEST);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final DecoratorAppearance appearance8 = element29.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element29.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(5, 0, 10, 0));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance8.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setExpandable(false);
        checkOut.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("visible");
        checkOut22.setName("protector");
        checkOut22.setField("boughtChallenges");
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final ConditionResult element31 = new ConditionResult();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        checkOut22.addBasicElement(element31);
        element31.onAttributesInitialized();
        final NotNullCondition element32 = new NotNullCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut21.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut21.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 20, 0, 0));
        appearance9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance9.onChildrenAdded();
        final String id3 = "boughtChallengesList";
        final StackList list2 = new StackList();
        list2.onCheckOut();
        list2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, list2);
        }
        list2.setInnerExpandable(false);
        list2.setHorizontal(false);
        checkOut21.addBasicElement(list2);
        list2.onAttributesInitialized();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHorizontal(false);
        list2.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("content");
        checkOut25.setName("protector");
        checkOut25.setField("boughtChallenges");
        list2.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final ItemRenderer element33 = new ItemRenderer();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        final ItemOverListener onItemOver2 = new ItemOverListener();
        onItemOver2.setCallBackFunc("wakfu.popupInfos:showPopup(challengeDetailPopup,mainContainer)");
        element33.setOnItemOver(onItemOver2);
        final ItemOutListener onItemOut2 = new ItemOutListener();
        onItemOut2.setCallBackFunc("closePopup");
        element33.setOnItemOut(onItemOut2);
        list2.addBasicElement(element33);
        element33.onAttributesInitialized();
        this.method7(element33);
        this.method8(element33);
        element33.onChildrenAdded();
        list2.onChildrenAdded();
        checkOut21.onChildrenAdded();
        this.method9(checkOut);
        this.method10(checkOut);
        this.method11(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemCondition element2 = new ItemCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:openChallengeDescription(boughtChallenge)");
        checkOut.setOnClick(onClick);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "boughtChallenge";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.CENTER);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(2, 0, 2, 0));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setNonBlocking(true);
        element4.setDisplaySize(new Dimension(24, 24));
        element4.setExpandable(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("texture");
        element6.setField("iconUrl");
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 5, 0, 10));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("darkBold");
        element7.setMinWidth(1);
        element7.setMaxWidth(325);
        element7.setExpandable(true);
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("name");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("darkBold");
        element9.setMinWidth(1);
        element9.setMaxWidth(325);
        element9.setExpandable(true);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("remainingTime");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaSplashTitle");
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 25));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(0, 25, 0, 0));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("StyledBold16White");
        element3.setNonBlocking(true);
        element3.setExpandable(false);
        element3.setText("%nation.challenges.toSell%".replace("%nation.challenges.toSell%", Xulor.getInstance().getTranslatedString("nation.challenges.toSell")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("smallDarkBackground");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 20, 5, 20));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(2, 8, 2, 2));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("darkBold");
        element3.setText("%protector.budget%".replace("%protector.budget%", Xulor.getInstance().getTranslatedString("protector.budget")));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 0, 50));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("text");
        checkOut4.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("darkBold");
        element4.setExpandable(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element4.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 3));
        appearance3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("text");
        checkOut6.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        appearance3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("protector");
        checkOut7.setAttribute("text");
        checkOut7.setField("walletHandler/challenge/amount");
        element4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 20, 0, 20));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "challengeObjInventory";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("value");
        checkOut4.setName("protector");
        checkOut4.setField("challengeObjInventory");
        data.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "challengeInventoryView";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut.addBasicElement(data2);
        data2.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("value");
        checkOut5.setName("protector");
        checkOut5.setField("challengeInventory");
        data2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        data2.onChildrenAdded();
        final String id3 = "challengeCategories";
        final RadioGroup radioGroup = new RadioGroup();
        radioGroup.onCheckOut();
        radioGroup.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, radioGroup);
        }
        checkOut.addBasicElement(radioGroup);
        radioGroup.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("value");
        checkOut6.setName("protector");
        checkOut6.setField("challengeInventory/selectedCategory/idString");
        radioGroup.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        radioGroup.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%protector.nothingToBuy%".replace("%protector.nothingToBuy%", Xulor.getInstance().getTranslatedString("protector.nothingToBuy")));
        element.setStyle("darkBold");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("visible");
        checkOut8.setName("protector");
        checkOut8.setField("challengeInventory/selectedCategory");
        element.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut8.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NullCondition element3 = new NullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element.onChildrenAdded();
        final StackList element4 = new StackList();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInnerExpandable(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        element4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final DecoratorAppearance appearance3 = element4.getAppearance();
        appearance3.setElementMap(elementMap);
        element4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 0, 0, 3));
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("content");
        checkOut11.setName("protector");
        checkOut11.setField("challengeInventory/categories");
        element4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final String id4 = "availableChallengeList";
        final StackList list = new StackList();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, list);
        }
        list.setInnerExpandable(false);
        list.setHorizontal(false);
        element5.addBasicElement(list);
        list.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut12.setAlign(Alignment9.NORTH);
        list.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("content");
        element6.setField("items");
        list.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final ItemRenderer element7 = new ItemRenderer();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(challengeDetailPopup,mainContainer)");
        element7.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("closePopup");
        element7.setOnItemOut(onItemOut);
        list.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ItemCondition element9 = new ItemCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final String id5 = "challengeToBuy";
        final Data data3 = new Data();
        data3.onCheckOut();
        data3.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, data3);
        }
        element7.addBasicElement(data3);
        data3.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        data3.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        data3.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setNonBlocking(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:openChallengeDescription(challengeToBuy)");
        checkOut13.setOnClick(onClick);
        element7.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut13.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 0, 5, 0));
        appearance4.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setDisplaySize(new Dimension(24, 24));
        element12.setExpandable(false);
        checkOut13.addBasicElement(element12);
        element12.onAttributesInitialized();
        final RowLayoutData element13 = new RowLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("iconUrl");
        checkOut16.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut13.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut17.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 5, 0, 10));
        appearance5.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("darkBold");
        element15.setMinWidth(10);
        element15.setMaxWidth(280);
        checkOut17.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("darkBold");
        element17.setMinWidth(10);
        element17.setMaxWidth(280);
        checkOut17.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element17.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.WEST);
        element17.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("duration");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final Spacer element19 = new Spacer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        checkOut13.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("darkBold");
        element20.setExpandable(false);
        checkOut13.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element20.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element20.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("price");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("nation");
        checkOut20.setAttribute("visible");
        checkOut20.setField("localPlayerHasRankToBuyChallenges");
        element20.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        checkOut20.addBasicElement(element22);
        element22.onAttributesInitialized();
        final FalseCondition element23 = new FalseCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element20.onChildrenAdded();
        final Button element24 = new Button();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("yellowSmallFont");
        element24.setExpandable(false);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.protectorManagement:validMerchantItemPurchase(challengeObjInventory,challengeToBuy)");
        element24.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(challengeBuyPopup)");
        element24.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element24.setOnPopupHide(onPopupHide);
        checkOut13.addBasicElement(element24);
        element24.onAttributesInitialized();
        final String id6 = "challengeBuyPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id6 != null) {
            elementMap.add(id6, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element24.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setPrefSize(new Dimension(10, 0));
        checkOut21.setStyle("popup");
        popupElement.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final RowLayout checkOut22 = RowLayout.checkOut();
        checkOut22.setHorizontal(false);
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("white");
        element25.setEnableShrinking(false);
        element25.setExpandable(false);
        checkOut21.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("text");
        element26.setField("buyEnabled");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ConditionResult element27 = new ConditionResult();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setValue("%buy%".replace("%buy%", Xulor.getInstance().getTranslatedString("buy")));
        element27.setElseValue("%protector.notEnoughBudget%".replace("%protector.notEnoughBudget%", Xulor.getInstance().getTranslatedString("protector.notEnoughBudget")));
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final TrueCondition element28 = new TrueCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance9 = element25.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.CENTER);
        element25.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut23 = ColorElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("text");
        appearance9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("color");
        element29.setField("buyEnabled");
        checkOut23.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ConditionResult element30 = new ConditionResult();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setValue("1,1,1");
        element30.setElseValue("1,0,0");
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final TrueCondition element31 = new TrueCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut23.onChildrenAdded();
        appearance9.onChildrenAdded();
        element25.onChildrenAdded();
        this.method12(checkOut21);
        checkOut21.onChildrenAdded();
        popupElement.onChildrenAdded();
        this.method13(element24);
        this.method14(element24);
        this.method15(element24);
        this.method16(element24);
        element24.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element7.onChildrenAdded();
        list.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element.setEnableShrinking(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("politicInteractionRight");
        checkOut2.setAttribute("visible");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final FalseCondition element3 = new FalseCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 3));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("enabled");
        element.setField("buyEnabled");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("comparedValue");
        checkOut.setName("politicInteractionRight");
        element5.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("price");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("nation");
        checkOut.setAttribute("visible");
        checkOut.setField("localPlayerHasRankToBuyChallenges");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setVisible(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("currentPage");
        checkOut3.setAttribute("visible");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("3");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("EncyclopediaSplashTitle");
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(0, 25));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(0, 25, 0, 0));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("StyledBold16White");
        element5.setNonBlocking(true);
        element5.setExpandable(false);
        element5.setText("%nation.ecosystem%".replace("%nation.ecosystem%", Xulor.getInstance().getTranslatedString("nation.ecosystem")));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.WEST);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("smallDarkBackground");
        checkOut6.setExpandable(false);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayoutData element7 = new RowLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 20, 5, 20));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(2, 8, 2, 2));
        appearance3.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("darkBold");
        element9.setText("%protector.budget%".replace("%protector.budget%", Xulor.getInstance().getTranslatedString("protector.budget")));
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 50));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("text");
        checkOut9.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        element9.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("darkBold");
        element10.setExpandable(false);
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element10.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.CENTER);
        element10.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 0, 0, 3));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("text");
        checkOut11.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        appearance5.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("protector");
        checkOut12.setAttribute("text");
        checkOut12.setField("walletHandler/ecosystem/amount");
        element10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 25, 0, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final String id = "zoologyView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut13.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("value");
        checkOut15.setName("protector");
        checkOut15.setField("zoology");
        data.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        data.onChildrenAdded();
        final StackList element11 = new StackList();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setInnerExpandable(false);
        element11.setHorizontal(false);
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(false);
        element11.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setAttribute("content");
        checkOut17.setName("protector");
        checkOut17.setField("zoology/categories");
        element11.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final ItemRenderer element12 = new ItemRenderer();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final AndCondition element14 = new AndCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemCondition element15 = new ItemCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final NotNullCondition element16 = new NotNullCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final ItemCondition element17 = new ItemCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setField("hasItems");
        element14.addBasicElement(element17);
        element17.onAttributesInitialized();
        final TrueCondition element18 = new TrueCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setNonBlocking(false);
        element12.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(100.0f, 100.0f));
        checkOut18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut19.setAlign(Alignment9.NORTH);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final List element20 = new List();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setCellSize(new Dimension(100.0f, 48));
        element20.setHorizontal(false);
        element20.setAutoIdealSize(true);
        element20.setIdealSizeMinColumns(1);
        element20.setIdealSizeMaxColumns(1);
        checkOut18.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("content");
        element21.setField("items");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final ItemRenderer element22 = new ItemRenderer();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element20.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ItemCondition element24 = new ItemCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        final String id2 = "zoologyToBuy";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        element22.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("value");
        data2.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        element22.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.WEST);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setStyle("EncyclopediaSplash");
        checkOut20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final Image element27 = new Image();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setDisplaySize(new Dimension(32, 32));
        element27.setExpandable(false);
        checkOut22.addBasicElement(element27);
        element27.onAttributesInitialized();
        final PixmapElement checkOut23 = PixmapElement.checkOut();
        checkOut23.setElementMap(elementMap);
        element27.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("texture");
        element28.setField("iconUrl");
        checkOut23.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setExpandable(false);
        checkOut20.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut24.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut24.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut25 = Margin.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setInsets(new Insets(0, 0, 0, 10));
        appearance7.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        appearance7.onChildrenAdded();
        final StaticLayout element29 = new StaticLayout();
        element29.onCheckOut();
        element29.setAdaptToContentSize(true);
        checkOut24.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setStyle("TiledScrollCenter");
        checkOut24.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment17.WEST);
        element30.setSize(new Dimension(100.0f, 30));
        checkOut26.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        checkOut26.onChildrenAdded();
        final Image element31 = new Image();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("TiledScrollTop");
        checkOut24.addBasicElement(element31);
        element31.onAttributesInitialized();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment17.NORTH_WEST);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        final Image element33 = new Image();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setStyle("TiledScrollBottom");
        checkOut24.addBasicElement(element33);
        element33.onAttributesInitialized();
        final StaticLayoutData element34 = new StaticLayoutData();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAlign(Alignment17.SOUTH_WEST);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut24.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final StaticLayoutData element35 = new StaticLayoutData();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setSize(new Dimension(100.0f, 100.0f));
        checkOut27.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final DecoratorAppearance appearance8 = checkOut27.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut27.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut28 = Margin.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setInsets(new Insets(0, 0, 0, 20));
        appearance8.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        appearance8.onChildrenAdded();
        final Container checkOut29 = Container.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setExpandable(false);
        checkOut27.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final RowLayout checkOut30 = RowLayout.checkOut();
        checkOut30.setHorizontal(false);
        checkOut29.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final TextView element36 = new TextView();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setStyle("StyledBoldDark12");
        element36.setExpandable(false);
        checkOut29.addBasicElement(element36);
        element36.onAttributesInitialized();
        this.method18(element36);
        this.method19(element36);
        element36.onChildrenAdded();
        this.method20(checkOut29);
        checkOut29.onChildrenAdded();
        this.method21(checkOut27);
        this.method22(checkOut27);
        this.method23(checkOut27);
        this.method24(checkOut27);
        this.method25(checkOut27);
        checkOut27.onChildrenAdded();
        checkOut24.onChildrenAdded();
        checkOut20.onChildrenAdded();
        element22.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut13.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("name");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("darkBold");
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("endangeredStatus");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "protectedImage";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, image);
        }
        image.setStyle("protectedSpecies");
        image.setExpandable(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(protectedPopup,protectedImage)");
        image.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        image.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(image);
        image.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("isProtected");
        image.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        image.onChildrenAdded();
        return image;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(32, 32));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setField("isExtinct");
        element2.setAttribute("visible");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final AndCondition element4 = new AndCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("comparedValue");
        element7.setField("canBeReintroduced");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element4.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("nation");
        checkOut2.setAttribute("comparedValue");
        checkOut2.setField("localPlayerHasRankToBuyZoology");
        element8.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element8.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final String id = "reintroduceButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("yellow");
        button.setExpandable(false);
        button.setNetEnabledId("protectorEcosystemLock");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:reintroduce(zoologyView,zoologyToBuy)");
        button.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(reintroducePopup,reintroduceButton)");
        button.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        button.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(button);
        button.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("enabled");
        element10.setField("reintroductionPriceValue");
        button.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final AndCondition element12 = new AndCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final NotCondition element13 = new NotCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final GreaterCondition element14 = new GreaterCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("protector");
        checkOut3.setAttribute("value");
        checkOut3.setField("walletHandler/ecosystem/amountValue");
        element14.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final TrueCondition element15 = new TrueCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("comparedValue");
        checkOut4.setName("politicInteractionRight");
        element15.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element15.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final String id2 = "reintroducePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        button.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("white");
        element16.setEnableShrinking(false);
        checkOut5.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("getSeedsText");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final DecoratorAppearance appearance = element16.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element16.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element16.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("whitebold");
        element18.setNonBlocking(true);
        checkOut5.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element18.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element18.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("text");
        element19.setField("reintroductionPrice");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("bold");
        element20.setMinWidth(1);
        element20.setMaxWidth(200);
        element20.setText("%protector.notEnoughBudget%".replace("%protector.notEnoughBudget%", Xulor.getInstance().getTranslatedString("protector.notEnoughBudget")));
        checkOut5.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element20.getAppearance();
        appearance3.setElementMap(elementMap);
        element20.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut8 = ColorElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setColor(new Color(1.0f, 0.0f, 0.0f, 1.0f));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("visible");
        element21.setField("reintroductionPriceValue");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final GreaterCondition element23 = new GreaterCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("protector");
        checkOut9.setAttribute("value");
        checkOut9.setField("walletHandler/ecosystem/amountValue");
        element23.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("white");
        element24.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element24.setEnableShrinking(false);
        checkOut5.addBasicElement(element24);
        element24.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element24.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element24.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("politicInteractionRight");
        checkOut11.setAttribute("visible");
        element24.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ConditionResult element25 = new ConditionResult();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        checkOut11.addBasicElement(element25);
        element25.onAttributesInitialized();
        final FalseCondition element26 = new FalseCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element27 = new StaticLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setSize(new Dimension(100.0f, 100.0f));
        button.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        button.onChildrenAdded();
        final Image element28 = new Image();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("reintroduceSpecies");
        element28.setDisplaySize(new Dimension(28, 23));
        element28.setNonBlocking(true);
        checkOut.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setSize(new Dimension(100.0f, 100.0f));
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final DecoratorAppearance appearance5 = element28.getAppearance();
        appearance5.setElementMap(elementMap);
        element28.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(2, 2, 2, 2));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(32, 32));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setField("isProtected");
        element2.setAttribute("visible");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final AndCondition element4 = new AndCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("nation");
        checkOut2.setAttribute("comparedValue");
        checkOut2.setField("localPlayerHasRankToBuyZoology");
        element5.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element5.onChildrenAdded();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final String id = "unprotectButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("yellow");
        button.setExpandable(false);
        button.setNetEnabledId("protectorEcosystemLock");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:unprotect(zoologyView,zoologyToBuy)");
        button.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(unprotectPopup,unprotectButton)");
        button.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        button.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(button);
        button.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(100.0f, 100.0f));
        button.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("enabled");
        checkOut3.setName("politicInteractionRight");
        button.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        button.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("unprotectSpecies");
        element9.setDisplaySize(new Dimension(15, 28));
        element9.setNonBlocking(true);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(-2, -2));
        element10.setAlign(Alignment17.CENTER);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance = element9.getAppearance();
        appearance.setElementMap(elementMap);
        element9.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(2, 2, 2, 2));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setField("isProtected");
        element.setAttribute("visible");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("nation");
        checkOut2.setAttribute("comparedValue");
        checkOut2.setField("localPlayerHasRankToBuyZoology");
        element4.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element4.onChildrenAdded();
        final FalseCondition element5 = new FalseCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final String id = "protectButton";
        final Button button = new Button();
        button.onCheckOut();
        button.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, button);
        }
        button.setStyle("yellow");
        button.setExpandable(false);
        button.setNetEnabledId("protectorEcosystemLock");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:protect(zoologyView,zoologyToBuy)");
        button.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(protectPopup,protectButton)");
        button.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        button.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(button);
        button.onAttributesInitialized();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("enabled");
        element8.setField("protectionPriceValue");
        button.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final AndCondition element10 = new AndCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final NotCondition element11 = new NotCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final GreaterCondition element12 = new GreaterCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("protector");
        checkOut3.setAttribute("value");
        checkOut3.setField("walletHandler/ecosystem/amountValue");
        element12.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final TrueCondition element13 = new TrueCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element10.addBasicElement(element13);
        element13.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("comparedValue");
        checkOut4.setName("politicInteractionRight");
        element13.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element13.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final String id2 = "protectPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        button.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("white");
        element14.setEnableShrinking(false);
        element14.setText("%nation.ecosystem.protect%".replace("%nation.ecosystem.protect%", Xulor.getInstance().getTranslatedString("nation.ecosystem.protect")));
        checkOut5.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance = element14.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element14.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("whitebold");
        element15.setNonBlocking(true);
        checkOut5.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element15.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element15.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("protectionPrice");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("bold");
        element17.setMinWidth(1);
        element17.setMaxWidth(200);
        element17.setText("%protector.notEnoughBudget%".replace("%protector.notEnoughBudget%", Xulor.getInstance().getTranslatedString("protector.notEnoughBudget")));
        checkOut5.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element17.getAppearance();
        appearance3.setElementMap(elementMap);
        element17.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut8 = ColorElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setColor(new Color(1.0f, 0.0f, 0.0f, 1.0f));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("visible");
        element18.setField("protectionPriceValue");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final GreaterCondition element20 = new GreaterCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("protector");
        checkOut9.setAttribute("value");
        checkOut9.setField("walletHandler/ecosystem/amountValue");
        element20.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("white");
        element21.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element21.setEnableShrinking(false);
        checkOut5.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element21.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("politicInteractionRight");
        checkOut11.setAttribute("visible");
        element21.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        checkOut11.addBasicElement(element22);
        element22.onAttributesInitialized();
        final FalseCondition element23 = new FalseCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setSize(new Dimension(100.0f, 100.0f));
        button.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        button.onChildrenAdded();
        final Image element25 = new Image();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("protectSpecies");
        element25.setDisplaySize(new Dimension(28, 28));
        element25.setNonBlocking(true);
        checkOut.addBasicElement(element25);
        element25.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(100.0f, 100.0f));
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance5 = element25.getAppearance();
        appearance5.setElementMap(elementMap);
        element25.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(2, 2, 2, 2));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setVisible(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("currentPage");
        checkOut3.setAttribute("visible");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("2");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("EncyclopediaSplashTitle");
        checkOut4.setExpandable(false);
        checkOut4.setPrefSize(new Dimension(0, 25));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("protector");
        checkOut5.setField("boughtClimates");
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        element5.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(0, 25, 0, 0));
        appearance.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("StyledBold16White");
        element7.setNonBlocking(true);
        element7.setExpandable(false);
        element7.setText("%nation.climate.bought%".replace("%nation.climate.bought%", Xulor.getInstance().getTranslatedString("nation.climate.bought")));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.WEST);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(5, 0, 10, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut7.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 25, 0, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("visible");
        checkOut10.setName("protector");
        checkOut10.setField("boughtClimates");
        checkOut7.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut10.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final String id = "boughtClimatesList";
        final StackList list = new StackList();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setInnerExpandable(false);
        list.setHorizontal(false);
        list.setExpandable(false);
        checkOut7.addBasicElement(list);
        list.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        list.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("content");
        checkOut12.setName("protector");
        checkOut12.setField("boughtClimates");
        list.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(climateDetailPopup,mainContainer)");
        element11.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("closePopup");
        element11.setOnItemOut(onItemOut);
        list.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemCondition element13 = new ItemCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setNonBlocking(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:openClimateBonusDescription(climateToBuy)");
        checkOut13.setOnClick(onClick);
        element11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final String id2 = "climateToBuy";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut13.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("value");
        data.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        data.onChildrenAdded();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setAlign(Alignment9.WEST);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setNonBlocking(true);
        element16.setDisplaySize(new Dimension(24, 24));
        element16.setExpandable(false);
        checkOut13.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("visible");
        element17.setField("temperatureIconUrl");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ConditionResult element18 = new ConditionResult();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final NotNullCondition element19 = new NotNullCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element16.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap);
        element16.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("texture");
        element21.setField("temperatureIconUrl");
        checkOut15.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element16.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setNonBlocking(true);
        element22.setDisplaySize(new Dimension(24, 24));
        element22.setExpandable(false);
        checkOut13.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("visible");
        element23.setField("rainIconUrl");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element22.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("texture");
        element27.setField("rainIconUrl");
        checkOut16.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element22.onChildrenAdded();
        final TextView element28 = new TextView();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("darkBold");
        element28.setExpandable(false);
        element28.setMinWidth(10);
        element28.setMaxWidth(400);
        checkOut13.addBasicElement(element28);
        element28.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element28.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element28.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(3, 0, 5, 0));
        appearance4.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element29.setField("nameWithRemainingTime");
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element11.onChildrenAdded();
        list.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setStyle("EncyclopediaSplashTitle");
        checkOut18.setExpandable(false);
        checkOut18.setPrefSize(new Dimension(0, 25));
        checkOut.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final StaticLayout element30 = new StaticLayout();
        element30.onCheckOut();
        element30.setAdaptToContentSize(true);
        checkOut18.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut18.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element31 = new Padding();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setInsets(new Insets(0, 25, 0, 0));
        appearance5.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        appearance5.onChildrenAdded();
        final Label element32 = new Label();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("StyledBold16White");
        element32.setNonBlocking(true);
        element32.setExpandable(false);
        element32.setText("%nation.climate.available%".replace("%nation.climate.available%", Xulor.getInstance().getTranslatedString("nation.climate.available")));
        checkOut18.addBasicElement(element32);
        element32.onAttributesInitialized();
        final StaticLayoutData element33 = new StaticLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAlign(Alignment17.WEST);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final DecoratorAppearance appearance6 = element32.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element32.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(5, 0, 10, 0));
        appearance6.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance6.onChildrenAdded();
        element32.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setStyle("smallDarkBackground");
        checkOut20.setExpandable(false);
        checkOut.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final RowLayoutData element34 = new RowLayoutData();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAlign(Alignment9.WEST);
        checkOut20.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut20.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 20, 5, 20));
        appearance7.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Padding element35 = new Padding();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setInsets(new Insets(2, 8, 2, 2));
        appearance7.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        appearance7.onChildrenAdded();
        final TextView element36 = new TextView();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setStyle("darkBold");
        element36.setText("%protector.budget%".replace("%protector.budget%", Xulor.getInstance().getTranslatedString("protector.budget")));
        checkOut20.addBasicElement(element36);
        element36.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element36.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element36.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(0, 0, 0, 50));
        appearance8.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final ColorElement checkOut23 = ColorElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("text");
        checkOut23.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        appearance8.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance8.onChildrenAdded();
        element36.onChildrenAdded();
        final TextView element37 = new TextView();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setStyle("darkBold");
        element37.setExpandable(false);
        checkOut20.addBasicElement(element37);
        element37.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element37.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.CENTER);
        element37.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        this.method27(appearance9);
        this.method28(appearance9);
        appearance9.onChildrenAdded();
        this.method29(element37);
        element37.onChildrenAdded();
        checkOut20.onChildrenAdded();
        this.method30(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 3));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(0.92f, 0.8f, 0.42f, 1.0f));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("protector");
        checkOut.setAttribute("text");
        checkOut.setField("walletHandler/weather/amount");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 15, 0, 15));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 5, 10, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setText("%protector.nothingToBuy%".replace("%protector.nothingToBuy%", Xulor.getInstance().getTranslatedString("protector.nothingToBuy")));
        element2.setStyle("darkBold");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setName("protector");
        checkOut5.setField("climateInventory");
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NullCondition element4 = new NullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("visible");
        checkOut7.setName("protector");
        checkOut7.setField("climateInventory");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final String id = "climateObjInventory";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut6.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setAttribute("value");
        checkOut9.setName("protector");
        checkOut9.setField("climateObjInventory");
        data.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "availableClimatesList";
        final StackList list = new StackList();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, list);
        }
        list.setInnerExpandable(true);
        list.setHorizontal(false);
        list.setExpandable(true);
        checkOut6.addBasicElement(list);
        list.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        list.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("content");
        checkOut11.setName("protector");
        checkOut11.setField("climateInventory");
        list.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final ItemRenderer element7 = new ItemRenderer();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(climateDetailPopup,mainContainer)");
        element7.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("closePopup");
        element7.setOnItemOut(onItemOut);
        list.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ItemCondition element9 = new ItemCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setNonBlocking(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.protectorManagement:openClimateBonusDescription(climateToBuy)");
        checkOut12.setOnClick(onClick);
        element7.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.CENTER);
        element11.setSize(new Dimension(100.0f, 100.0f));
        checkOut12.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final String id3 = "climateToBuy";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        checkOut12.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("value");
        data2.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        data2.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut12.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element13 = new Padding();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setInsets(new Insets(5, 5, 5, 5));
        appearance4.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setAlign(Alignment9.WEST);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(48, 0));
        checkOut14.setExpandable(false);
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.WEST);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setNonBlocking(true);
        element14.setDisplaySize(new Dimension(24, 24));
        element14.setExpandable(false);
        checkOut14.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("visible");
        element15.setField("temperatureIconUrl");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final NotNullCondition element17 = new NotNullCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        element14.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("texture");
        element19.setField("temperatureIconUrl");
        checkOut16.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element14.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setNonBlocking(true);
        element20.setDisplaySize(new Dimension(24, 24));
        element20.setExpandable(false);
        checkOut14.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("visible");
        element21.setField("rainIconUrl");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final NotNullCondition element23 = new NotNullCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        final RowLayoutData element24 = new RowLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment9.CENTER);
        element20.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final PixmapElement checkOut17 = PixmapElement.checkOut();
        checkOut17.setElementMap(elementMap);
        element20.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("texture");
        element25.setField("rainIconUrl");
        checkOut17.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setExpandable(true);
        checkOut12.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut18.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(2, 5, 2, 2));
        appearance5.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance5.onChildrenAdded();
        final TableLayout element26 = new TableLayout();
        element26.onCheckOut();
        element26.setColumns(2);
        element26.setRows(2);
        checkOut18.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final TextView element27 = new TextView();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("darkBold");
        element27.setExpandable(true);
        element27.setMinWidth(10);
        element27.setMaxWidth(400);
        checkOut18.addBasicElement(element27);
        element27.onAttributesInitialized();
        final TableLayoutData element28 = new TableLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setRow(0);
        element28.setColumn(0);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance6 = element27.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element27.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 0, 10));
        appearance6.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance6.onChildrenAdded();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("text");
        element29.setField("name");
        element27.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element27.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final TableLayoutData element30 = new TableLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setColumn(0);
        element30.setRow(1);
        checkOut21.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final Label element31 = new Label();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("darkBold");
        checkOut21.addBasicElement(element31);
        element31.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element31.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.WEST);
        element31.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("text");
        element32.setField("duration");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setExpandable(false);
        checkOut18.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final TableLayoutData element33 = new TableLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setColumn(1);
        element33.setRow(0);
        checkOut22.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final Label element34 = new Label();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setStyle("darkBold");
        element34.setExpandable(false);
        checkOut22.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ItemElement element35 = new ItemElement();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAttribute("text");
        element35.setField("price");
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("nation");
        checkOut23.setAttribute("visible");
        checkOut23.setField("localPlayerHasRankToBuyClimateBonuses");
        element34.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element36 = new ConditionResult();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        checkOut23.addBasicElement(element36);
        element36.onAttributesInitialized();
        final FalseCondition element37 = new FalseCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        element36.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element34.onChildrenAdded();
        final Button element38 = new Button();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setExpandable(false);
        element38.setStyle("yellowSmallFont");
        element38.setPrefSize(new Dimension(0, 15));
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.protectorManagement:validMerchantItemPurchase(climateObjInventory,climateToBuy)");
        element38.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(climateBuyPopup)");
        element38.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element38.setOnPopupHide(onPopupHide);
        checkOut22.addBasicElement(element38);
        element38.onAttributesInitialized();
        this.method31(element38);
        this.method32(element38);
        this.method33(element38);
        this.method34(element38);
        this.method35(element38);
        element38.onChildrenAdded();
        checkOut22.onChildrenAdded();
        checkOut18.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element7.onChildrenAdded();
        list.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "climateBuyPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setEnableShrinking(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("buyEnabled");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("%buy%".replace("%buy%", Xulor.getInstance().getTranslatedString("buy")));
        element3.setElseValue("%protector.notEnoughBudget%".replace("%protector.notEnoughBudget%", Xulor.getInstance().getTranslatedString("protector.notEnoughBudget")));
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut3 = ColorElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("text");
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("color");
        element5.setField("buyEnabled");
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("1,1,1");
        element6.setElseValue("1,0,0");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("white");
        element8.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element8.setEnableShrinking(false);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element8.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("politicInteractionRight");
        checkOut5.setAttribute("visible");
        element8.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final FalseCondition element10 = new FalseCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 3, 0, 3));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("enabled");
        element.setField("buyEnabled");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("comparedValue");
        checkOut.setName("politicInteractionRight");
        element5.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("price");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("nation");
        checkOut.setAttribute("visible");
        checkOut.setField("localPlayerHasRankToBuyClimateBonuses");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaPane");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(454, 540));
        element.setXOffset(-10);
        element.setYOffset(1);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 61, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(40, 0, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final String id = "protectorManagementPage";
        final RadioGroup radioGroup = new RadioGroup();
        radioGroup.onCheckOut();
        radioGroup.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, radioGroup);
        }
        checkOut3.addBasicElement(radioGroup);
        radioGroup.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setAttribute("value");
        checkOut6.setLocal(true);
        checkOut6.setName("currentPage");
        radioGroup.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        radioGroup.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final RadioButton element4 = new RadioButton();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setGroupId("protectorManagementPage");
        element4.setValue("0");
        element4.setStyle("bigLeftWindow");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(taxButtonPopup)");
        element4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element4.setOnPopupHide(onPopupHide);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.protectorManagement:displayPage");
        element4.setOnSelectionChange(onSelectionChange);
        checkOut7.addBasicElement(element4);
        element4.onAttributesInitialized();
        final String id2 = "taxButtonPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element4.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setPrefSize(new Dimension(10, 0));
        checkOut8.setStyle("popup");
        popupElement.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("white");
        element5.setEnableShrinking(false);
        element5.setText("%protector.funds%".replace("%protector.funds%", Xulor.getInstance().getTranslatedString("protector.funds")));
        checkOut8.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.CENTER);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut8.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.SOUTH);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setNonBlocking(true);
        element7.setStyle("TaxProtectorManagement");
        checkOut7.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(-2, -2));
        element8.setAlign(Alignment17.NORTH);
        element8.setXOffset(1);
        element8.setYOffset(24);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final RadioButton element10 = new RadioButton();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setGroupId("protectorManagementPage");
        element10.setValue("1");
        element10.setStyle("bigLeftWindow");
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(challengeButtonPopup)");
        element10.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element10.setOnPopupHide(onPopupHide2);
        final SelectionChangedListener onSelectionChange2 = new SelectionChangedListener();
        onSelectionChange2.setCallBackFunc("wakfu.protectorManagement:displayPage");
        element10.setOnSelectionChange(onSelectionChange2);
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final String id3 = "challengeButtonPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element10.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(10, 0));
        checkOut10.setStyle("popup");
        popupElement2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("white");
        element11.setEnableShrinking(false);
        element11.setText("%nation.challenges%".replace("%nation.challenges%", Xulor.getInstance().getTranslatedString("nation.challenges")));
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element11.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(-2, -2));
        element12.setAlign(Alignment17.SOUTH);
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setNonBlocking(true);
        element13.setStyle("ChallengeProtectorManagement");
        checkOut9.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setSize(new Dimension(-2, -2));
        element14.setAlign(Alignment17.NORTH);
        element14.setXOffset(0);
        element14.setYOffset(20);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayout element15 = new StaticLayout();
        element15.onCheckOut();
        element15.setAdaptToContentSize(true);
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final RadioButton element16 = new RadioButton();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setGroupId("protectorManagementPage");
        element16.setValue("2");
        element16.setStyle("bigLeftWindow");
        final PopupDisplayListener onPopupDisplay3 = new PopupDisplayListener();
        onPopupDisplay3.setCallBackFunc("popup(weatherButtonPopup)");
        element16.setOnPopupDisplay(onPopupDisplay3);
        final PopupHideListener onPopupHide3 = new PopupHideListener();
        onPopupHide3.setCallBackFunc("closePopup");
        element16.setOnPopupHide(onPopupHide3);
        final SelectionChangedListener onSelectionChange3 = new SelectionChangedListener();
        onSelectionChange3.setCallBackFunc("wakfu.protectorManagement:displayPage");
        element16.setOnSelectionChange(onSelectionChange3);
        checkOut11.addBasicElement(element16);
        element16.onAttributesInitialized();
        final String id4 = "weatherButtonPopup";
        final PopupElement popupElement3 = new PopupElement();
        popupElement3.onCheckOut();
        popupElement3.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement3);
        }
        popupElement3.setAlign(Alignment9.NORTH);
        popupElement3.setHotSpotPosition(Alignment9.SOUTH);
        element16.addBasicElement(popupElement3);
        popupElement3.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        popupElement3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final TextView element17 = new TextView();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setStyle("white");
        element17.setEnableShrinking(false);
        element17.setText("%nation.climate%".replace("%nation.climate%", Xulor.getInstance().getTranslatedString("nation.climate")));
        checkOut12.addBasicElement(element17);
        element17.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element17.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element17.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut12.onChildrenAdded();
        popupElement3.onChildrenAdded();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setSize(new Dimension(-2, -2));
        element18.setAlign(Alignment17.SOUTH);
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element16.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setNonBlocking(true);
        element19.setStyle("weatherProtectorManagement");
        checkOut11.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(-2, -2));
        element20.setAlign(Alignment17.NORTH);
        element20.setXOffset(0);
        element20.setYOffset(20);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayout element21 = new StaticLayout();
        element21.onCheckOut();
        element21.setAdaptToContentSize(true);
        checkOut13.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final RadioButton element22 = new RadioButton();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setGroupId("protectorManagementPage");
        element22.setValue("3");
        element22.setStyle("bigLeftWindow");
        final PopupDisplayListener onPopupDisplay4 = new PopupDisplayListener();
        onPopupDisplay4.setCallBackFunc("popup(zoologyButtonPopup)");
        element22.setOnPopupDisplay(onPopupDisplay4);
        final PopupHideListener onPopupHide4 = new PopupHideListener();
        onPopupHide4.setCallBackFunc("closePopup");
        element22.setOnPopupHide(onPopupHide4);
        final SelectionChangedListener onSelectionChange4 = new SelectionChangedListener();
        onSelectionChange4.setCallBackFunc("wakfu.protectorManagement:displayPage");
        element22.setOnSelectionChange(onSelectionChange4);
        checkOut13.addBasicElement(element22);
        element22.onAttributesInitialized();
        final String id5 = "zoologyButtonPopup";
        final PopupElement popupElement4 = new PopupElement();
        popupElement4.onCheckOut();
        popupElement4.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement4);
        }
        popupElement4.setAlign(Alignment9.NORTH);
        popupElement4.setHotSpotPosition(Alignment9.SOUTH);
        element22.addBasicElement(popupElement4);
        popupElement4.onAttributesInitialized();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(10, 0));
        checkOut14.setStyle("popup");
        popupElement4.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final TextView element23 = new TextView();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("white");
        element23.setEnableShrinking(false);
        element23.setText("%nation.ecosystem%".replace("%nation.ecosystem%", Xulor.getInstance().getTranslatedString("nation.ecosystem")));
        checkOut14.addBasicElement(element23);
        element23.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element23.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.CENTER);
        element23.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut14.onChildrenAdded();
        popupElement4.onChildrenAdded();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setSize(new Dimension(-2, -2));
        element24.setAlign(Alignment17.SOUTH);
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element22.onChildrenAdded();
        final Image element25 = new Image();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setNonBlocking(true);
        element25.setStyle("wabbitProtectorManagement");
        checkOut13.addBasicElement(element25);
        element25.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(-2, -2));
        element26.setAlign(Alignment17.NORTH);
        element26.setXOffset(0);
        element26.setYOffset(20);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut13.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setInitValue(true);
        element.setAlign(Alignment17.WEST);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method41(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "challengeDetailPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("challengeCurrent");
        checkOut.setPrefSize(new Dimension(250, 0));
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(15, 32, 28, 32));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final String id2 = "itemDetailPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_EAST);
        popupElement2.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut2.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final ElementMap parentElementMap = elementMap;
        final ElementMap elementMap2 = this.env.createElementMap(((elementMap != null) ? elementMap.getId() : "") + ".itemDetailPopupInc");
        elementMap2.setParentElementMap(parentElementMap);
        this.elementMaps.push(elementMap2);
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap2);
        popupElement2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap2);
        checkOut4.setVisible(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap2);
        checkOut6.setName("itemPopupDetail");
        checkOut6.setAttribute("visible");
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap2);
        checkOut6.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap2);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap2);
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(250, 0));
        checkOut7.setStyle("popup");
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap2);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setAlign(Alignment9.NORTH);
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap2);
        element4.setStyle("DefaultBold14White");
        element4.setExpandable(false);
        element4.setMinWidth(210);
        checkOut7.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap2);
        element5.setAlign(Alignment9.WEST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap2);
        checkOut9.setName("itemPopupDetail");
        checkOut9.setAttribute("text");
        checkOut9.setField("nameWithRarity");
        element4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap2);
        checkOut10.setExpandable(false);
        checkOut7.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap2);
        checkOut12.setExpandable(false);
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap2);
        element6.setAlign(Alignment9.NORTH);
        checkOut12.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut12.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut12.getAppearance();
        appearance3.setElementMap(elementMap2);
        checkOut12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap2);
        checkOut13.setInsets(new Insets(0, 0, 0, 2));
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap2);
        checkOut14.setStyle("caracs");
        checkOut12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap2);
        element8.setSize(new Dimension(100.0f, 100.0f));
        checkOut14.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap2);
        element9.setDisplaySize(new Dimension(64, 64));
        checkOut12.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap2);
        element10.setAlign(Alignment17.CENTER);
        element10.setSize(new Dimension(-2, -2));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap2);
        element9.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap2);
        checkOut16.setName("itemPopupDetail");
        checkOut16.setAttribute("texture");
        checkOut16.setField("iconUrl");
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap2);
        checkOut10.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut17.getAppearance();
        appearance4.setElementMap(elementMap2);
        checkOut17.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap2);
        checkOut18.setInsets(new Insets(0, 0, 0, 0));
        appearance4.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut19.setAlign(Alignment9.NORTH);
        checkOut17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap2);
        element11.setStyle("11light");
        element11.setExpandable(false);
        checkOut17.addBasicElement(element11);
        element11.onAttributesInitialized();
        final RowLayoutData element12 = new RowLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap2);
        element12.setAlign(Alignment9.EAST);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap2);
        checkOut20.setName("itemPopupDetail");
        checkOut20.setAttribute("text");
        checkOut20.setField("levelDescription");
        element11.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        element11.onChildrenAdded();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap2);
        element13.setStyle("white11");
        element13.setMultiline(false);
        element13.setExpandable(false);
        checkOut17.addBasicElement(element13);
        element13.onAttributesInitialized();
        final RowLayoutData element14 = new RowLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap2);
        element14.setAlign(Alignment9.WEST);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap2);
        checkOut21.setAttribute("text");
        checkOut21.setName("itemPopupDetail");
        checkOut21.setField("type");
        element13.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        element13.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap2);
        checkOut22.setExpandable(false);
        checkOut17.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap2);
        element15.setAlign(Alignment9.EAST);
        checkOut22.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap2);
        checkOut23.setName("itemPopupDetail");
        checkOut23.setAttribute("visible");
        checkOut23.setField("ap");
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap2);
        checkOut23.addBasicElement(element16);
        element16.onAttributesInitialized();
        final AndCondition element17 = new AndCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap2);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotEqualCondition element18 = new NotEqualCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap2);
        element18.setValue("0");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final TrueCondition element19 = new TrueCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap2);
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap2);
        checkOut24.setName("itemPopupDetail");
        checkOut24.setAttribute("comparedValue");
        checkOut24.setField("usableInFight");
        element19.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element19.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut23.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap2);
        checkOut25.setExpandable(false);
        checkOut22.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap2);
        element20.setAlign(Alignment9.EAST);
        checkOut25.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final RowLayout checkOut26 = RowLayout.checkOut();
        checkOut26.setHgap((short)2);
        checkOut25.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap2);
        element21.setStyle("11Light");
        checkOut25.addBasicElement(element21);
        element21.onAttributesInitialized();
        final PropertyElement checkOut27 = PropertyElement.checkOut();
        checkOut27.setElementMap(elementMap2);
        checkOut27.setName("itemPopupDetail");
        checkOut27.setAttribute("text");
        checkOut27.setField("ap");
        element21.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        element21.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap2);
        element22.setStyle("iconAP");
        element22.setExpandable(false);
        checkOut25.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        checkOut25.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap2);
        checkOut28.setExpandable(false);
        checkOut17.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap2);
        element23.setAlign(Alignment9.EAST);
        checkOut28.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap2);
        checkOut29.setName("itemPopupDetail");
        checkOut29.setAttribute("visible");
        checkOut29.setField("range");
        checkOut28.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap2);
        checkOut29.addBasicElement(element24);
        element24.onAttributesInitialized();
        final NotNullCondition element25 = new NotNullCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap2);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut29.onChildrenAdded();
        final Container checkOut30 = Container.checkOut();
        checkOut30.setElementMap(elementMap2);
        checkOut30.setExpandable(false);
        checkOut28.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap2);
        element26.setAlign(Alignment9.EAST);
        checkOut30.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final RowLayout checkOut31 = RowLayout.checkOut();
        checkOut31.setHgap((short)2);
        checkOut30.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap2);
        element27.setStyle("11Light");
        checkOut30.addBasicElement(element27);
        element27.onAttributesInitialized();
        final PropertyElement checkOut32 = PropertyElement.checkOut();
        checkOut32.setElementMap(elementMap2);
        checkOut32.setName("itemPopupDetail");
        checkOut32.setAttribute("text");
        checkOut32.setField("range");
        element27.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        checkOut32.onChildrenAdded();
        element27.onChildrenAdded();
        final Image element28 = new Image();
        element28.onCheckOut();
        element28.setElementMap(elementMap2);
        element28.setStyle("rangeIcon");
        element28.setExpandable(false);
        checkOut30.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        checkOut30.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap2);
        element29.setStyle("bold");
        element29.setExpandable(false);
        checkOut17.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element29.getAppearance();
        appearance5.setElementMap(elementMap2);
        element29.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut33 = ColorElement.checkOut();
        checkOut33.setElementMap(elementMap2);
        checkOut33.setName("text");
        checkOut33.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        checkOut33.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayoutData element30 = new RowLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap2);
        element30.setAlign(Alignment9.WEST);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final PropertyElement checkOut34 = PropertyElement.checkOut();
        checkOut34.setElementMap(elementMap2);
        checkOut34.setName("itemPopupDetail");
        checkOut34.setAttribute("visible");
        checkOut34.setField("boundDescription");
        element29.addBasicElement(checkOut34);
        checkOut34.onAttributesInitialized();
        final ConditionResult element31 = new ConditionResult();
        element31.onCheckOut();
        element31.setElementMap(elementMap2);
        checkOut34.addBasicElement(element31);
        element31.onAttributesInitialized();
        final NotNullCondition element32 = new NotNullCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap2);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut34.onChildrenAdded();
        final PropertyElement checkOut35 = PropertyElement.checkOut();
        checkOut35.setElementMap(elementMap2);
        checkOut35.setName("itemPopupDetail");
        checkOut35.setAttribute("text");
        checkOut35.setField("boundDescription");
        element29.addBasicElement(checkOut35);
        checkOut35.onAttributesInitialized();
        checkOut35.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut10.onChildrenAdded();
        this.method42(checkOut7);
        this.method43(checkOut7);
        this.method44(checkOut7);
        this.method45(checkOut7);
        this.method46(checkOut7);
        this.method47(checkOut7);
        this.method48(checkOut7);
        checkOut7.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        this.elementMaps.pop();
        final ElementMap elementMap3 = this.elementMaps.peek();
        popupElement2.onChildrenAdded();
        this.method49(checkOut2);
        this.method50(checkOut2);
        this.method51(checkOut2);
        this.method52(checkOut2);
        this.method53(checkOut2);
        this.method54(checkOut2);
        this.method55(checkOut2);
        this.method56(checkOut2);
        this.method65(checkOut2);
        this.method66(checkOut2);
        this.method67(checkOut2);
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method42(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("visible");
        checkOut3.setName("itemPopupDetail");
        checkOut3.setField("description");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("narrow12");
        element3.setMinWidth(1);
        element3.setMaxWidth(250);
        element3.setExpandable(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("itemPopupDetail");
        checkOut7.setAttribute("text");
        checkOut7.setField("description");
        element3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method43(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("itemPopupDetail");
        checkOut2.setField("requirement");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotEqualCondition element2 = new NotEqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element3 = new TextView();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setStyle("white11");
        element3.setMinWidth(250);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("itemPopupDetail");
        checkOut7.setAttribute("text");
        checkOut7.setField("requirement");
        element3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method44(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("itemPopupDetail");
        checkOut2.setField("useRequirement");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotEqualCondition element2 = new NotEqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setText("%use.requirements%".replace("%use.requirements%", Xulor.getInstance().getTranslatedString("use.requirements")));
        element3.setStyle("11BoldLight");
        element3.setNonBlocking(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 5, 5, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        element4.setStyle("white11");
        element4.setMinWidth(1);
        element4.setMaxWidth(250);
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element4.getAppearance();
        appearance3.setElementMap(elementMap);
        element4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 20, 0, 0));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("itemPopupDetail");
        checkOut8.setAttribute("text");
        checkOut8.setField("useRequirement");
        element4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method45(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("itemPopupDetail");
        checkOut2.setField("hasCaracteristic");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final TrueCondition element2 = new TrueCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(0, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final StackList element3 = new StackList();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setHorizontal(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("itemPopupDetail");
        checkOut6.setAttribute("content");
        checkOut6.setField("caracteristic");
        element3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        element5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white11");
        element9.setMultiline(false);
        element9.setMinWidth(250);
        element9.setMaxWidth(250);
        element9.setExpandable(false);
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method46(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("itemPopupDetail");
        checkOut2.setField("effect");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final StackList element3 = new StackList();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setHorizontal(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        element5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("white11");
        element9.setMultiline(false);
        element9.setMinWidth(250);
        element9.setMaxWidth(250);
        element9.setExpandable(false);
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element5.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("itemPopupDetail");
        checkOut8.setAttribute("content");
        checkOut8.setField("effectDetails");
        element3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method47(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("itemPopupDetail");
        checkOut2.setField("storingCapacity");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final GreaterCondition element2 = new GreaterCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("whiteBold");
        element3.setNonBlocking(true);
        element3.setText("%capacity%".replace("%capacity%", Xulor.getInstance().getTranslatedString("capacity")));
        element3.setExpandable(false);
        checkOut6.addBasicElement(element3);
        element3.onAttributesInitialized();
        final BorderLayoutData checkOut8 = BorderLayoutData.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setData(BorderLayoutData.Values.SOUTH);
        element3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("white");
        element4.setNonBlocking(true);
        element4.setText("%capacity%".replace("%capacity%", Xulor.getInstance().getTranslatedString("capacity")));
        element4.setExpandable(false);
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        final BorderLayoutData checkOut10 = BorderLayoutData.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setData(BorderLayoutData.Values.SOUTH);
        element4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance3 = element4.getAppearance();
        appearance3.setElementMap(elementMap);
        element4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 5, 0, 0));
        appearance3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setAttribute("text");
        checkOut12.setName("itemPopupDetail");
        checkOut12.setField("storingCapacity");
        element4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method48(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("visible");
        checkOut2.setName("itemPopupDetail");
        checkOut2.setField("companionLevel");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setExpandable(false);
        checkOut4.setStyle("lineSeparator2");
        checkOut4.setPrefSize(new Dimension(50, 1));
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("white");
        element3.setNonBlocking(true);
        element3.setExpandable(false);
        checkOut6.addBasicElement(element3);
        element3.onAttributesInitialized();
        final BorderLayoutData checkOut8 = BorderLayoutData.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setData(BorderLayoutData.Values.SOUTH);
        element3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 5, 0, 5));
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("text");
        checkOut10.setName("itemPopupDetail");
        checkOut10.setField("companionLevel");
        element3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method49(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHorizontal(false);
        checkOut.setAlign(Alignment9.NORTH);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method50(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("AchievementUnlockedSplashScaled2");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 13, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(13, 20, 13, 20));
        appearance.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setDisplaySize(new Dimension(32, 32));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("displayedAchievement");
        checkOut4.setAttribute("texture");
        checkOut4.setField("iconUrl");
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 32, 0, 20));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, -2));
        element5.setAlign(Alignment17.CENTER);
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("styledBoldWhite12");
        element7.setMinWidth(1);
        element7.setMaxWidth(250);
        element7.setExpandable(false);
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setLocal(true);
        checkOut7.setName("displayedAchievement");
        checkOut7.setAttribute("text");
        checkOut7.setField("name");
        element7.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.NORTH);
        element8.setSize(new Dimension(100.0f, -2));
        element8.setYOffset(-3);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 20, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(100.0f, -2));
        element9.setAlign(Alignment17.SOUTH);
        element9.setYOffset(0);
        checkOut10.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(20, 0, 0, 0));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("styledBoldWhite12");
        element10.setMinWidth(1);
        element10.setMaxWidth(250);
        element10.setText("Niv. 25");
        element10.setExpandable(false);
        checkOut10.addBasicElement(element10);
        element10.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setLocal(true);
        checkOut12.setName("displayedAchievement");
        checkOut12.setAttribute("text");
        checkOut12.setField("recommandedLevel");
        element10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance5 = element10.getAppearance();
        appearance5.setElementMap(elementMap);
        element10.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.79f, 0.98f, 0.35f, 1.0f));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        element10.onChildrenAdded();
        final Spacer element11 = new Spacer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final RepeatableImage element12 = new RepeatableImage();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setExpandable(false);
        element12.setRepeatNumber(1);
        element12.setStyle("QuestNumPlayer");
        element12.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recommandedPlayersPopup)");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element12.getAppearance();
        appearance6.setElementMap(elementMap);
        element12.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setLocal(true);
        checkOut15.setName("displayedAchievement");
        checkOut15.setField("recommandedPlayers");
        checkOut15.setAttribute("repeatNumber");
        element12.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final String id = "recommandedPlayersPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        popupElement.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final Label element13 = new Label();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("popupInformation");
        element13.setText("%quest.recommandedPlayers%".replace("%quest.recommandedPlayers%", Xulor.getInstance().getTranslatedString("quest.recommandedPlayers")));
        checkOut16.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element13.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.WEST);
        element13.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut16.onChildrenAdded();
        popupElement.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method51(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ScrollContainer element = new ScrollContainer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        element.setExpandable(false);
        element.setMaxSize(new Dimension(10000, 100));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setExpandable(false);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut3.setHorizontal(false);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("darkBold");
        element2.setExpandable(false);
        element2.setMinWidth(1);
        element2.setMaxWidth(320);
        element2.setText("bg");
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("displayedAchievement");
        checkOut4.setAttribute("text");
        checkOut4.setField("backgroundText");
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setLocal(true);
        checkOut5.setName("displayedAchievement");
        checkOut5.setAttribute("visible");
        checkOut5.setField("backgroundText");
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut5.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final NotEqualCondition element7 = new NotEqualCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("");
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method52(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(false);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 30, 0, 30));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("displayedAchievement");
        checkOut2.setAttribute("content");
        checkOut2.setField("goals");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.WEST);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final String id = "goal";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("styledBoldDark12");
        element7.setExpandable(false);
        element7.setMinWidth(1);
        element7.setMaxWidth(320);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(7, 0, 7, 0));
        appearance2.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("description");
        element7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("displayedAchievement");
        checkOut6.setField("type");
        checkOut6.setAttribute("maxWidth");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("200");
        element10.setElseValue("300");
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        final EqualCondition element11 = new EqualCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setValue("1");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element7.onChildrenAdded();
        final Spacer element12 = new Spacer();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut3.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setExpandable(false);
        element13.setStyle("styledBoldDark12");
        element13.setNonBlocking(true);
        checkOut3.addBasicElement(element13);
        element13.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setLocal(true);
        checkOut7.setName("displayedAchievement");
        checkOut7.setField("type");
        checkOut7.setAttribute("visible");
        element13.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        checkOut7.addBasicElement(element14);
        element14.onAttributesInitialized();
        final EqualCondition element15 = new EqualCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setValue("1");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element13.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element13.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("progressionText");
        element13.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("visible");
        element17.setField("isCompleted");
        element13.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ConditionResult element18 = new ConditionResult();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final AndCondition element19 = new AndCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final FalseCondition element20 = new FalseCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final FalseCondition element21 = new FalseCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("comparedValue");
        element22.setField("progressionText");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final EqualCondition element24 = new EqualCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setValue("-1");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element13.onChildrenAdded();
        final ToggleButton element25 = new ToggleButton();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("objectiveCompassed");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(compassPopup)");
        element25.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element25.setOnPopupHide(onPopupHide);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.followedAchievements:compassObjective(goal)");
        element25.setOnSelectionChange(onSelectionChange);
        element25.setExpandable(false);
        checkOut3.addBasicElement(element25);
        element25.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element25.getAppearance();
        appearance4.setElementMap(elementMap);
        element25.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 3));
        appearance4.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("selected");
        element26.setField("isCompassed");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("visible");
        element27.setField("canBeCompassed");
        element25.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("enabled");
        element28.setField("canBeCompassedNow");
        element25.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final String id2 = "compassPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element25.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final Label element29 = new Label();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setText("%compass%".replace("%compass%", Xulor.getInstance().getTranslatedString("compass")));
        checkOut9.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element29.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element29.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method53(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("displayedAchievement");
        checkOut2.setAttribute("visible");
        checkOut2.setField("duration");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(5, 13, 0, 13));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("scrollTitleBar");
        element5.setDisplaySize(new Dimension(350, 29));
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.WEST);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("styledBoldDark10");
        element7.setExpandable(false);
        element7.setMinWidth(1);
        element7.setMaxWidth(275);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.WEST);
        element8.setSize(new Dimension(100.0f, 2));
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("displayedAchievement");
        checkOut6.setAttribute("text");
        checkOut6.setField("duration");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method54(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("styledBoldDark10");
        element.setExpandable(false);
        element.setMinWidth(1);
        element.setMaxWidth(275);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(5, 20, 5, 20));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("displayedAchievement");
        checkOut4.setAttribute("visible");
        checkOut4.setField("heroesPartyExists");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setLocal(true);
        checkOut5.setAttribute("text");
        checkOut5.setName("displayedAchievement");
        checkOut5.setField("concernedCharacters");
        element.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method55(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 13, 5, 13));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("scrollTitleBar");
        element3.setDisplaySize(new Dimension(350, 29));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setAlign(Alignment17.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("styledBoldWhite12");
        element5.setNonBlocking(true);
        element5.setText("%achievement.reward%".replace("%achievement.reward%", Xulor.getInstance().getTranslatedString("achievement.reward")));
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.WEST);
        element6.setSize(new Dimension(100.0f, 2));
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut3 = ColorElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setColor(new Color(0.94f, 0.86f, 0.66f, 1.0f));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method56(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "rewardsContainer";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("displayedAchievement");
        checkOut3.setField("type");
        checkOut3.setAttribute("visible");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final EqualCondition element3 = new EqualCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("2");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final OrCondition element4 = new OrCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setAttribute("comparedValue");
        checkOut4.setName("displayedAchievement");
        checkOut4.setField("firstRankReward");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setLocal(true);
        checkOut5.setAttribute("comparedValue");
        checkOut5.setName("displayedAchievement");
        checkOut5.setField("secondRankReward");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element4.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setAttribute("comparedValue");
        checkOut6.setName("displayedAchievement");
        checkOut6.setField("thirdRankReward");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element7.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final String id2 = "firstRankReward";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setLocal(true);
        checkOut7.setAttribute("value");
        checkOut7.setName("displayedAchievement");
        checkOut7.setField("firstRankReward/item");
        data.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        data.onChildrenAdded();
        final String id3 = "secondRankReward";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        checkOut.addBasicElement(data2);
        data2.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setAttribute("value");
        checkOut8.setName("displayedAchievement");
        checkOut8.setField("secondRankReward/item");
        data2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        data2.onChildrenAdded();
        final String id4 = "thirdRankReward";
        final Data data3 = new Data();
        data3.onCheckOut();
        data3.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, data3);
        }
        checkOut.addBasicElement(data3);
        data3.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setLocal(true);
        checkOut9.setAttribute("value");
        checkOut9.setName("displayedAchievement");
        checkOut9.setField("thirdRankReward/item");
        data3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        data3.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 10, 0, 10));
        appearance.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setStyle("encyclopediaSplashTitle");
        checkOut.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setLocal(true);
        checkOut12.setAttribute("visible");
        checkOut12.setName("displayedAchievement");
        checkOut12.setField("firstRankReward");
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut12.addBasicElement(element8);
        element8.onAttributesInitialized();
        final AndCondition element9 = new AndCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NotNullCondition element10 = new NotNullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final TrueCondition element11 = new TrueCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setLocal(true);
        checkOut13.setName("displayedAchievement");
        checkOut13.setField("hasMoreThanOneReward");
        checkOut13.setAttribute("comparedValue");
        element11.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element11.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut11.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 10, 0, 0));
        appearance2.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Padding element12 = new Padding();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setInsets(new Insets(5, 5, 7, 15));
        appearance2.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Label element13 = new Label();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("whiteBold");
        element13.setText("%rank.1%".replace("%rank.1%", Xulor.getInstance().getTranslatedString("rank.1")));
        checkOut11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut15.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 20, 0, 0));
        appearance3.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setLocal(true);
        checkOut17.setAttribute("visible");
        checkOut17.setName("displayedAchievement");
        checkOut17.setField("firstRankReward");
        checkOut15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        checkOut17.addBasicElement(element14);
        element14.onAttributesInitialized();
        final NotNullCondition element15 = new NotNullCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut15.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("visible");
        checkOut19.setLocal(true);
        checkOut19.setName("displayedAchievement");
        checkOut19.setField("firstRankReward");
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        checkOut19.addBasicElement(element16);
        element16.onAttributesInitialized();
        final AndCondition element17 = new AndCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final NotNullCondition element19 = new NotNullCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setAttribute("comparedValue");
        checkOut20.setLocal(true);
        checkOut20.setName("displayedAchievement");
        checkOut20.setField("firstRankReward/item");
        element19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        element19.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setAlign(Alignment9.WEST);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setExpandable(false);
        checkOut18.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut22.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut23 = Margin.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        appearance4.onChildrenAdded();
        final StaticLayout element20 = new StaticLayout();
        element20.onCheckOut();
        element20.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final Image element21 = new Image();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("IconEmptyEmote");
        checkOut22.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setSize(new Dimension(-2, -2));
        element22.setAlign(Alignment17.CENTER);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        final Image element23 = new Image();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setDisplaySize(new Dimension(48, 48));
        checkOut22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment17.CENTER);
        element24.setSize(new Dimension(-2, -2));
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final PixmapElement checkOut24 = PixmapElement.checkOut();
        checkOut24.setElementMap(elementMap);
        element23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("texture");
        checkOut25.setLocal(true);
        checkOut25.setName("displayedAchievement");
        checkOut25.setField("firstRankReward/item/iconUrl");
        checkOut24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        checkOut24.onChildrenAdded();
        element23.onChildrenAdded();
        final Label element25 = new Label();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("bold");
        checkOut22.addBasicElement(element25);
        element25.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element25.getAppearance();
        appearance5.setElementMap(elementMap);
        element25.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(5, 5, 5, 5));
        appearance5.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final ColorElement checkOut27 = ColorElement.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        checkOut27.setName("text");
        appearance5.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(-2, -2));
        element26.setAlign(Alignment17.SOUTH_EAST);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final PropertyElement checkOut28 = PropertyElement.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setAttribute("text");
        checkOut28.setLocal(true);
        checkOut28.setName("displayedAchievement");
        checkOut28.setField("firstRankReward/quantity");
        element25.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final PropertyElement checkOut29 = PropertyElement.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setAttribute("visible");
        checkOut29.setLocal(true);
        checkOut29.setName("displayedAchievement");
        checkOut29.setField("firstRankReward/quantity");
        element25.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final ConditionResult element27 = new ConditionResult();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        checkOut29.addBasicElement(element27);
        element27.onAttributesInitialized();
        final GreaterCondition element28 = new GreaterCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setValue("1");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut29.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("styledBoldDark10");
        element29.setMinWidth(1);
        element29.setMaxWidth(115);
        element29.setExpandable(false);
        checkOut18.addBasicElement(element29);
        element29.onAttributesInitialized();
        final PropertyElement checkOut30 = PropertyElement.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setAttribute("text");
        checkOut30.setLocal(true);
        checkOut30.setName("displayedAchievement");
        checkOut30.setField("firstRankReward/item/name");
        element29.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final DecoratorAppearance appearance6 = element29.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.NORTH);
        element29.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut31 = Margin.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setInsets(new Insets(10, 0, 0, 0));
        appearance6.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        appearance6.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Container checkOut32 = Container.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut15.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        final PropertyElement checkOut33 = PropertyElement.checkOut();
        checkOut33.setElementMap(elementMap);
        checkOut33.setAttribute("visible");
        checkOut33.setLocal(true);
        checkOut33.setName("displayedAchievement");
        checkOut33.setField("firstRankReward");
        checkOut32.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        this.method57(checkOut33);
        checkOut33.onChildrenAdded();
        this.method58(checkOut32);
        this.method59(checkOut32);
        this.method60(checkOut32);
        checkOut32.onChildrenAdded();
        checkOut15.onChildrenAdded();
        this.method61(checkOut);
        this.method62(checkOut);
        this.method63(checkOut);
        this.method64(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method57(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("comparedValue");
        checkOut.setLocal(true);
        checkOut.setName("displayedAchievement");
        checkOut.setField("firstRankReward/xp");
        element4.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method58(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setAlign(Alignment9.WEST);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method59(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("IconEmptyEmote");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, -2));
        element3.setAlign(Alignment17.CENTER);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setDisplaySize(new Dimension(48, 48));
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.CENTER);
        element5.setSize(new Dimension(-2, -2));
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("texture");
        checkOut4.setLocal(true);
        checkOut4.setName("displayedAchievement");
        checkOut4.setField("firstRankReward/xpIconUrl");
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method60(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("styledBoldDark10");
        element.setMinWidth(1);
        element.setMaxWidth(115);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("text");
        checkOut.setLocal(true);
        checkOut.setName("displayedAchievement");
        checkOut.setField("firstRankReward/xp");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(10, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method61(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("encyclopediaSplashTitle");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setName("displayedAchievement");
        checkOut2.setField("secondRankReward");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("displayedAchievement");
        checkOut3.setField("hasMoreThanOneReward");
        checkOut3.setAttribute("comparedValue");
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(5, 5, 7, 15));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("whiteBold");
        element6.setText("%rank.2%".replace("%rank.2%", Xulor.getInstance().getTranslatedString("rank.2")));
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method62(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 20, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setAttribute("visible");
        checkOut3.setName("displayedAchievement");
        checkOut3.setField("secondRankReward");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setLocal(true);
        checkOut5.setName("displayedAchievement");
        checkOut5.setField("secondRankReward");
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        element5.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("IconEmptyEmote");
        checkOut7.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(-2, -2));
        element7.setAlign(Alignment17.CENTER);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setDisplaySize(new Dimension(48, 48));
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setSize(new Dimension(-2, -2));
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("texture");
        checkOut10.setLocal(true);
        checkOut10.setName("displayedAchievement");
        checkOut10.setField("secondRankReward/item/iconUrl");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element8.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("bold");
        checkOut7.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element10.getAppearance();
        appearance3.setElementMap(elementMap);
        element10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        checkOut12.setName("text");
        appearance3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.SOUTH_EAST);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setAttribute("text");
        checkOut13.setLocal(true);
        checkOut13.setName("displayedAchievement");
        checkOut13.setField("secondRankReward/quantity");
        element10.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("visible");
        checkOut14.setLocal(true);
        checkOut14.setName("displayedAchievement");
        checkOut14.setField("secondRankReward/quantity");
        element10.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut14.addBasicElement(element12);
        element12.onAttributesInitialized();
        final GreaterCondition element13 = new GreaterCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("1");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("styledBoldDark10");
        element14.setMinWidth(1);
        element14.setMaxWidth(115);
        element14.setExpandable(false);
        checkOut4.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("text");
        checkOut15.setLocal(true);
        checkOut15.setName("displayedAchievement");
        checkOut15.setField("secondRankReward/item/name");
        element14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final DecoratorAppearance appearance4 = element14.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.NORTH);
        element14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(10, 0, 0, 0));
        appearance4.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance4.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("visible");
        checkOut18.setLocal(true);
        checkOut18.setName("displayedAchievement");
        checkOut18.setField("secondRankReward");
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        checkOut18.addBasicElement(element15);
        element15.onAttributesInitialized();
        final AndCondition element16 = new AndCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final NotNullCondition element17 = new NotNullCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("comparedValue");
        checkOut19.setLocal(true);
        checkOut19.setName("displayedAchievement");
        checkOut19.setField("secondRankReward/xp");
        element18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element18.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setExpandable(false);
        checkOut17.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut21.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut21.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(0, 0, 0, 5));
        appearance5.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayout element19 = new StaticLayout();
        element19.onCheckOut();
        element19.setAdaptToContentSize(true);
        checkOut21.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("IconEmptyEmote");
        checkOut21.addBasicElement(element20);
        element20.onAttributesInitialized();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setSize(new Dimension(-2, -2));
        element21.setAlign(Alignment17.CENTER);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setDisplaySize(new Dimension(48, 48));
        checkOut21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.CENTER);
        element23.setSize(new Dimension(-2, -2));
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PixmapElement checkOut23 = PixmapElement.checkOut();
        checkOut23.setElementMap(elementMap);
        element22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setAttribute("texture");
        checkOut24.setLocal(true);
        checkOut24.setName("displayedAchievement");
        checkOut24.setField("secondRankReward/xpIconUrl");
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("styledBoldDark10");
        element24.setMinWidth(1);
        element24.setMaxWidth(115);
        element24.setExpandable(false);
        checkOut17.addBasicElement(element24);
        element24.onAttributesInitialized();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("text");
        checkOut25.setLocal(true);
        checkOut25.setName("displayedAchievement");
        checkOut25.setField("secondRankReward/xp");
        element24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final DecoratorAppearance appearance6 = element24.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.NORTH);
        element24.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(10, 0, 0, 0));
        appearance6.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance6.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method63(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("encyclopediaSplashTitle");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setName("displayedAchievement");
        checkOut2.setField("thirdRankReward");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("displayedAchievement");
        checkOut3.setField("hasMoreThanOneReward");
        checkOut3.setAttribute("comparedValue");
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(5, 5, 7, 15));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("whiteBold");
        element6.setText("%rank.3%".replace("%rank.3%", Xulor.getInstance().getTranslatedString("rank.3")));
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method64(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 20, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setAttribute("visible");
        checkOut3.setName("displayedAchievement");
        checkOut3.setField("thirdRankReward");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("visible");
        checkOut5.setLocal(true);
        checkOut5.setName("displayedAchievement");
        checkOut5.setField("thirdRankReward");
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element5 = new StaticLayout();
        element5.onCheckOut();
        element5.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("IconEmptyEmote");
        checkOut7.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(-2, -2));
        element7.setAlign(Alignment17.CENTER);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setDisplaySize(new Dimension(48, 48));
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setSize(new Dimension(-2, -2));
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("texture");
        checkOut10.setLocal(true);
        checkOut10.setName("displayedAchievement");
        checkOut10.setField("thirdRankReward/item/iconUrl");
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element8.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("bold");
        checkOut7.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element10.getAppearance();
        appearance3.setElementMap(elementMap);
        element10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        checkOut12.setName("text");
        appearance3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.SOUTH_EAST);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setAttribute("text");
        checkOut13.setLocal(true);
        checkOut13.setName("displayedAchievement");
        checkOut13.setField("thirdRankReward/quantity");
        element10.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("visible");
        checkOut14.setLocal(true);
        checkOut14.setName("displayedAchievement");
        checkOut14.setField("thirdRankReward/quantity");
        element10.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut14.addBasicElement(element12);
        element12.onAttributesInitialized();
        final GreaterCondition element13 = new GreaterCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("1");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("styledBoldDark10");
        element14.setMinWidth(1);
        element14.setMaxWidth(115);
        element14.setExpandable(false);
        checkOut4.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("text");
        checkOut15.setLocal(true);
        checkOut15.setName("displayedAchievement");
        checkOut15.setField("thirdRankReward/item/name");
        element14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final DecoratorAppearance appearance4 = element14.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.NORTH);
        element14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(10, 0, 0, 0));
        appearance4.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance4.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("visible");
        checkOut18.setLocal(true);
        checkOut18.setName("displayedAchievement");
        checkOut18.setField("thirdRankReward");
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        checkOut18.addBasicElement(element15);
        element15.onAttributesInitialized();
        final AndCondition element16 = new AndCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final NotNullCondition element17 = new NotNullCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("comparedValue");
        checkOut19.setLocal(true);
        checkOut19.setName("displayedAchievement");
        checkOut19.setField("thirdRankReward/xp");
        element18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element18.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setExpandable(false);
        checkOut17.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut21.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut21.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(0, 0, 0, 5));
        appearance5.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayout element19 = new StaticLayout();
        element19.onCheckOut();
        element19.setAdaptToContentSize(true);
        checkOut21.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setStyle("IconEmptyEmote");
        checkOut21.addBasicElement(element20);
        element20.onAttributesInitialized();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setSize(new Dimension(-2, -2));
        element21.setAlign(Alignment17.CENTER);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setDisplaySize(new Dimension(48, 48));
        checkOut21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.CENTER);
        element23.setSize(new Dimension(-2, -2));
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PixmapElement checkOut23 = PixmapElement.checkOut();
        checkOut23.setElementMap(elementMap);
        element22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setAttribute("texture");
        checkOut24.setLocal(true);
        checkOut24.setName("displayedAchievement");
        checkOut24.setField("thirdRankReward/xpIconUrl");
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut21.onChildrenAdded();
        final TextView element24 = new TextView();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("styledBoldDark10");
        element24.setMinWidth(1);
        element24.setMaxWidth(115);
        element24.setExpandable(false);
        checkOut17.addBasicElement(element24);
        element24.onAttributesInitialized();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("text");
        checkOut25.setLocal(true);
        checkOut25.setName("displayedAchievement");
        checkOut25.setField("thirdRankReward/xp");
        element24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final DecoratorAppearance appearance6 = element24.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.NORTH);
        element24.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(10, 0, 0, 0));
        appearance6.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance6.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method65(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("displayedAchievement");
        checkOut2.setField("type");
        checkOut2.setAttribute("visible");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final EqualCondition element3 = new EqualCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("2");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("displayedAchievement");
        checkOut3.setField("xp");
        checkOut3.setAttribute("comparedValue");
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("styledBoldDark10");
        element5.setMinWidth(1);
        element5.setMaxWidth(115);
        element5.setExpandable(false);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setLocal(true);
        checkOut4.setName("displayedAchievement");
        checkOut4.setField("xp");
        checkOut4.setAttribute("text");
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance = element5.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.NORTH);
        element5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(10, 0, 0, 0));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method66(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(170, 52));
        element.setPrefSize(new Dimension(340, 0));
        element.setExpandable(false);
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(2);
        element.setIdealSizeMaxColumns(2);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("displayedAchievement");
        checkOut.setField("type");
        checkOut.setAttribute("visible");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final EqualCondition element3 = new EqualCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("1");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setName("displayedAchievement");
        checkOut2.setField("rewards");
        checkOut2.setAttribute("content");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu:openItemDetailWindow()");
        element5.setOnItemClick(onItemClick);
        element.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        element5.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut6.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("IconEmptyEmote");
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.CENTER);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setDisplaySize(new Dimension(48, 48));
        checkOut6.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.CENTER);
        element13.setSize(new Dimension(-2, -2));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut8 = PixmapElement.checkOut();
        checkOut8.setElementMap(elementMap);
        element12.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("iconUrl");
        checkOut8.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element12.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("bold");
        checkOut6.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element15.getAppearance();
        appearance3.setElementMap(elementMap);
        element15.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(5, 5, 5, 5));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.29f, 0.17f, 0.07f, 1.0f));
        checkOut10.setName("text");
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setSize(new Dimension(-2, -2));
        element16.setAlign(Alignment17.SOUTH_EAST);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("quantity");
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("visible");
        element18.setField("quantity");
        element15.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final GreaterCondition element20 = new GreaterCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setValue("1");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("styledBoldDark10");
        element21.setMinWidth(1);
        element21.setMaxWidth(115);
        element21.setExpandable(false);
        checkOut4.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("text");
        element22.setField("description");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance4 = element21.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.NORTH);
        element21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(10, 0, 0, 0));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element5.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method67(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "quest";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setLocal(true);
        checkOut2.setAttribute("value");
        checkOut2.setName("displayedAchievement");
        data.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        data.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setLocal(true);
        checkOut3.setName("displayedAchievement");
        checkOut3.setAttribute("visible");
        checkOut3.setField("isFollowable");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 15, 0, 0));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.followedAchievements:followAchievement(quest)");
        element.setOnSelectionChange(onSelectionChange);
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 3));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("canFollowMoreAchievements");
        checkOut7.setAttribute("enabled");
        element.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut7.addBasicElement(element2);
        element2.onAttributesInitialized();
        final OrCondition element3 = new OrCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setLocal(true);
        checkOut8.setName("displayedAchievement");
        checkOut8.setAttribute("comparedValue");
        checkOut8.setField("isFollowed");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setLocal(true);
        checkOut9.setName("displayedAchievement");
        checkOut9.setAttribute("selected");
        checkOut9.setField("isFollowed");
        element.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element.onChildrenAdded();
        final TextView element6 = new TextView();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setMinWidth(1);
        element6.setMaxWidth(200);
        element6.setText("%achievement.follow%".replace("%achievement.follow%", Xulor.getInstance().getTranslatedString("achievement.follow")));
        element6.setStyle("darkBold");
        element6.setNonBlocking(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method68(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "climateDetailPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_WEST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_EAST);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("challengeCurrent");
        checkOut.setPrefSize(new Dimension(250, 0));
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(15, 32, 28, 32));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setNonBlocking(false);
        checkOut4.setExpandable(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("climateDetail");
        checkOut5.setAttribute("visible");
        checkOut5.setField("temperatureIconUrl");
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut5.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(5, 6, 6, 5));
        appearance2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setNonBlocking(true);
        element6.setDisplaySize(new Dimension(32, 32));
        element6.setExpandable(false);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final RowLayoutData element7 = new RowLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.CENTER);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element6.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("climateDetail");
        checkOut7.setAttribute("texture");
        checkOut7.setField("temperatureIconUrl");
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setNonBlocking(false);
        checkOut8.setExpandable(false);
        checkOut3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("climateDetail");
        checkOut9.setAttribute("visible");
        checkOut9.setField("rainIconUrl");
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        checkOut9.addBasicElement(element8);
        element8.onAttributesInitialized();
        final NotNullCondition element9 = new NotNullCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final RowLayoutData element10 = new RowLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.CENTER);
        checkOut8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut8.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element11 = new Padding();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setInsets(new Insets(5, 6, 6, 5));
        appearance3.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setDisplaySize(new Dimension(32, 32));
        element12.setExpandable(false);
        checkOut8.addBasicElement(element12);
        element12.onAttributesInitialized();
        final RowLayoutData element13 = new RowLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap);
        element12.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("texture");
        checkOut11.setName("climateDetail");
        checkOut11.setField("rainIconUrl");
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("styledBoldDark12");
        element14.setExpandable(true);
        element14.setMinWidth(10);
        element14.setMaxWidth(200);
        checkOut3.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element14.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 3, 0, 3));
        appearance4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setAttribute("text");
        checkOut13.setName("climateDetail");
        checkOut13.setField("name");
        element14.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut14.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(5, 0, 0, 0));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(false);
        checkOut16.setAlign(Alignment9.NORTH);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setStyle("encyclopediaSplashTitle");
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut17.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element15 = new Padding();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setInsets(new Insets(5, 10, 7, 5));
        appearance6.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        appearance6.onChildrenAdded();
        final Label element16 = new Label();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("smallTitle");
        element16.setText("%description%".replace("%description%", Xulor.getInstance().getTranslatedString("description")));
        checkOut17.addBasicElement(element16);
        element16.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element16.getAppearance();
        appearance7.setElementMap(elementMap);
        element16.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut18.setName("text");
        appearance7.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance7.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final String id2 = "requirementsContent";
        final TextView textView = new TextView();
        textView.onCheckOut();
        textView.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textView);
        }
        textView.setStyle("darkBold");
        textView.setExpandable(false);
        textView.setMinWidth(1);
        textView.setMaxWidth(235);
        textView.setNonBlocking(true);
        checkOut14.addBasicElement(textView);
        textView.onAttributesInitialized();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("text");
        checkOut19.setName("climateDetail");
        checkOut19.setField("description");
        textView.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final DecoratorAppearance appearance8 = textView.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        textView.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 10, 0, 10));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance8.onChildrenAdded();
        textView.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method69(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "protectedPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setEnableShrinking(false);
        element.setText("%nation.ecosystem.protected.species%".replace("%nation.ecosystem.protected.species%", Xulor.getInstance().getTranslatedString("nation.ecosystem.protected.species")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
    
    public BasicElement method70(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "unprotectPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        basicElement.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(10, 0));
        checkOut.setStyle("popup");
        popupElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setEnableShrinking(false);
        element.setText("%nation.ecosystem.unprotect%".replace("%nation.ecosystem.unprotect%", Xulor.getInstance().getTranslatedString("nation.ecosystem.unprotect")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("white");
        element2.setText("%error.playerNotSubscribed%".replace("%error.playerNotSubscribed%", Xulor.getInstance().getTranslatedString("error.playerNotSubscribed")));
        element2.setEnableShrinking(false);
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut3 = ColorElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setColor(new Color(0.8f, 0.0f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("subscribedAccount");
        checkOut4.setAttribute("visible");
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        popupElement.onChildrenAdded();
        return popupElement;
    }
}
