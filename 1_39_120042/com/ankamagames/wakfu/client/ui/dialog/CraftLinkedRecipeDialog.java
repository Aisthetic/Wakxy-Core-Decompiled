package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;

public class CraftLinkedRecipeDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public CraftLinkedRecipeDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "craftWindow";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("StyledBold16White");
        element9.setNonBlocking(true);
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("linkedRecipesItemName");
        checkOut8.setAttribute("text");
        element9.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut9.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id2 = "windowContentContainer";
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, checkOut11);
        }
        checkOut11.setPrefSize(new Dimension(330, 0));
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element10 = new Padding();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        appearance6.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("title");
        element11.setText("%craft.noRecipeFound%".replace("%craft.noRecipeFound%", Xulor.getInstance().getTranslatedString("craft.noRecipeFound")));
        element11.setMinWidth(1);
        element11.setMaxWidth(330);
        checkOut11.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element11.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.CENTER);
        element11.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("linkedRecipes");
        checkOut12.setAttribute("visible");
        element11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut12.addBasicElement(element12);
        element12.onAttributesInitialized();
        final CollectionCondition element13 = new CollectionCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setKey("size");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final EqualCondition element14 = new EqualCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setValue("0");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element11.onChildrenAdded();
        final ScrollContainer element15 = new ScrollContainer();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setExpandable(false);
        element15.setMaxSize(new Dimension(10000, 585));
        element15.setHorizontalScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        element15.setPageJumpRatio(0.3f);
        checkOut11.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("linkedRecipes");
        checkOut13.setAttribute("visible");
        element15.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final ConditionResult element16 = new ConditionResult();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        checkOut13.addBasicElement(element16);
        element16.onAttributesInitialized();
        final CollectionCondition element17 = new CollectionCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setKey("size");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotEqualCondition element18 = new NotEqualCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setValue("0");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final StackList element19 = new StackList();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setExpandable(false);
        element15.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setHorizontal(false);
        element19.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("linkedRecipes");
        checkOut15.setAttribute("content");
        element19.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ItemRenderer element20 = new ItemRenderer();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setStyle("white");
        element20.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut16.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Padding element21 = new Padding();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setInsets(new Insets(7, 7, 10, 7));
        appearance8.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setStyle("titleBar");
        checkOut18.setExpandable(false);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("whiteTitle");
        element22.setNonBlocking(true);
        element22.setExpandable(false);
        checkOut18.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element22.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.NORTH);
        element22.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        appearance9.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("name");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final String id3 = "recipeList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, list);
        }
        list.setCellSize(new Dimension(330, 55));
        list.setExpandable(false);
        list.setHorizontal(false);
        list.setAutoIdealSize(true);
        list.setIdealSizeMinColumns(1);
        list.setIdealSizeMaxColumns(1);
        checkOut16.addBasicElement(list);
        list.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("content");
        element24.setField("recipes");
        list.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final ItemRenderer element25 = new ItemRenderer();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.crafts:openProducedItemDescription(craftWindow)");
        element25.setOnItemClick(onItemClick);
        list.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final AndCondition element27 = new AndCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ItemCondition element28 = new ItemCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final NotNullCondition element29 = new NotNullCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        final ListCondition element30 = new ListCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setKey("evenIndex");
        element27.addBasicElement(element30);
        element30.onAttributesInitialized();
        final TrueCondition element31 = new TrueCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final String id4 = "recipe";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, data);
        }
        element25.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("value");
        data.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recipeDesc)");
        checkOut19.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut19.setOnPopupHide(onPopupHide);
        element25.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance10 = checkOut19.getAppearance();
        appearance10.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final PlainBackground element33 = new PlainBackground();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setColor(new Color(0.37f, 0.44f, 0.43f, 1.0f));
        appearance10.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        appearance10.onChildrenAdded();
        final String id5 = "recipeDesc";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id5 != null) {
            elementMap.add(id5, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut19.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setPrefSize(new Dimension(10, 0));
        checkOut20.setStyle("popup");
        popupElement.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final BorderLayoutData checkOut21 = BorderLayoutData.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setData(BorderLayoutData.Values.CENTER);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final TextView element34 = new TextView();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setStyle("PopupInformation");
        element34.setExpandable(false);
        element34.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        checkOut20.addBasicElement(element34);
        element34.onAttributesInitialized();
        final DecoratorAppearance appearance11 = element34.getAppearance();
        appearance11.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance11).setAlignment(Alignment9.WEST);
        element34.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final ColorElement checkOut22 = ColorElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance11.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance11.onChildrenAdded();
        element34.onChildrenAdded();
        final TextView element35 = new TextView();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setStyle("white");
        element35.setMinWidth(150);
        checkOut20.addBasicElement(element35);
        element35.onAttributesInitialized();
        final ItemElement element36 = new ItemElement();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAttribute("visible");
        element36.setField("criterionDescription");
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        this.method0(element36);
        element36.onChildrenAdded();
        this.method1(element35);
        this.method2(element35);
        element35.onChildrenAdded();
        checkOut20.onChildrenAdded();
        popupElement.onChildrenAdded();
        this.method3(checkOut19);
        this.method4(checkOut19);
        this.method5(checkOut19);
        checkOut19.onChildrenAdded();
        element25.onChildrenAdded();
        this.method6(list);
        this.method11(list);
        this.method12(list);
        list.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        this.method13(element);
        this.method14(element);
        this.method15(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("criterionDescription");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setAlign(Alignment9.WEST);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(54, 54));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 2));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setDisplaySize(new Dimension(54, 54));
        element3.setNonBlocking(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setSize(new Dimension(-2, -2));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("texture");
        element5.setField("iconUrl");
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(3, 0, 0, 0));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final Label element2 = new Label();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("title");
        element2.setText("=");
        element2.setExpandable(false);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.NORTH);
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("Bold");
        element3.setExpandable(false);
        element3.setPrefSize(new Dimension(150, 0));
        checkOut6.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("text");
        element4.setField("name");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance3 = element3.getAppearance();
        appearance3.setElementMap(elementMap);
        element3.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut8 = ColorElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "ingredientList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(27, 26));
        list.setPrefSize(new Dimension(216, 26));
        list.setExpandable(false);
        checkOut6.addBasicElement(list);
        list.onAttributesInitialized();
        final DecoratorAppearance appearance4 = list.getAppearance();
        appearance4.setElementMap(elementMap);
        list.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(3, 0, 0, 0));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance4.onChildrenAdded();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("content");
        element5.setField("ingredients");
        list.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final ItemRenderer element6 = new ItemRenderer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        list.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ItemCondition element8 = new ItemCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final NotNullCondition element9 = new NotNullCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(descIngredient)");
        checkOut10.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut10.setOnPopupHide(onPopupHide);
        element6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final String id2 = "descIngredient";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut10.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        popupElement.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut12.setAlign(Alignment9.NORTH);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("white");
        element10.setExpandable(false);
        checkOut11.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element10.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element10.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("text");
        element11.setField("name");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("white");
        element12.setText("(%desc.missingIngredient%)".replace("%desc.missingIngredient%", Xulor.getInstance().getTranslatedString("desc.missingIngredient")));
        element12.setExpandable(false);
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element12.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.WEST);
        element12.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("visible");
        element13.setField("isPossessed");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final FalseCondition element15 = new FalseCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut11.onChildrenAdded();
        popupElement.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut10.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut13.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut13.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 0, 0, 1));
        appearance7.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance7.onChildrenAdded();
        final String id3 = "icon";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, image);
        }
        image.setDisplaySize(new Dimension(26, 26));
        image.setNonBlocking(true);
        checkOut13.addBasicElement(image);
        image.onAttributesInitialized();
        final DecoratorAppearance appearance8 = image.getAppearance();
        appearance8.setElementMap(elementMap);
        image.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("modulationColor");
        element17.setField("isPossessed");
        appearance8.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ConditionResult element18 = new ConditionResult();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setValue("1,1,1,1");
        element18.setElseValue("1,1,1,0.5");
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final TrueCondition element19 = new TrueCondition();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        appearance8.onChildrenAdded();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment17.CENTER);
        element20.setSize(new Dimension(-2, -2));
        image.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap);
        image.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("texture");
        element21.setField("iconUrl");
        checkOut15.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        checkOut15.onChildrenAdded();
        image.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("White10Bordered");
        element22.setNonBlocking(true);
        checkOut13.addBasicElement(element22);
        element22.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.SOUTH_EAST);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final DecoratorAppearance appearance9 = element22.getAppearance();
        appearance9.setElementMap(elementMap);
        element22.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 0, 4, 4));
        appearance9.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance9.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("quantity");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut13.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element6.onChildrenAdded();
        list.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setExpandable(false);
        checkOut.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance10 = checkOut17.getAppearance();
        appearance10.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 0, 0, 5));
        appearance10.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance10.onChildrenAdded();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setAlign(Alignment9.SOUTH);
        checkOut19.setHorizontal(false);
        checkOut17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Label element25 = new Label();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("bold");
        element25.setExpandable(false);
        checkOut17.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("text");
        element26.setField("levelShort");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final DecoratorAppearance appearance11 = element25.getAppearance();
        appearance11.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance11).setAlignment(Alignment9.WEST);
        element25.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance11.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance11.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setLocal(true);
        checkOut21.setName("craft");
        checkOut21.setAttribute("visible");
        checkOut21.setField("isConceptual");
        element25.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ConditionResult element27 = new ConditionResult();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        checkOut21.addBasicElement(element27);
        element27.onAttributesInitialized();
        final FalseCondition element28 = new FalseCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element25.onChildrenAdded();
        final Image element29 = new Image();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("CraftBubble");
        element29.setExpandable(false);
        checkOut17.addBasicElement(element29);
        element29.onAttributesInitialized();
        final RowLayoutData element30 = new RowLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment9.EAST);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("visible");
        element31.setField("hasCriterion");
        element29.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.crafts:openProducedItemDescription(craftWindow)");
        element.setOnItemClick(onItemClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("oddIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "recipe";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("value");
        data.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(recipeDesc)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element9 = new PlainBackground();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id2 = "recipeDesc";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final BorderLayoutData checkOut3 = BorderLayoutData.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setData(BorderLayoutData.Values.CENTER);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("PopupInformation");
        element10.setExpandable(false);
        element10.setText("%rightClickToShowDetailWindow%".replace("%rightClickToShowDetailWindow%", Xulor.getInstance().getTranslatedString("rightClickToShowDetailWindow")));
        checkOut2.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element10.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element10.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(0.8f, 0.8f, 0.8f, 0.8f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        element10.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("white");
        element11.setMinWidth(150);
        checkOut2.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("criterionDescription");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance3 = element11.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("criterionDescription");
        element11.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut6.setPrefSize(new Dimension(54, 54));
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.NORTH);
        checkOut6.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final StaticLayout element17 = new StaticLayout();
        element17.onCheckOut();
        element17.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut6.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 0, 0, 2));
        appearance4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setDisplaySize(new Dimension(54, 54));
        element18.setNonBlocking(false);
        checkOut6.addBasicElement(element18);
        element18.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(-2, -2));
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final PixmapElement checkOut8 = PixmapElement.checkOut();
        checkOut8.setElementMap(elementMap);
        element18.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("texture");
        element20.setField("iconUrl");
        checkOut8.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut9.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Padding element21 = new Padding();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setInsets(new Insets(3, 0, 0, 0));
        appearance5.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("title");
        element22.setText("=");
        element22.setExpandable(false);
        checkOut11.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element22.getAppearance();
        appearance6.setElementMap(elementMap);
        element22.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 0, 5));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        element22.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final RowLayout checkOut15 = RowLayout.checkOut();
        checkOut15.setAlign(Alignment9.NORTH);
        checkOut15.setHorizontal(false);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Label element23 = new Label();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setStyle("Bold");
        element23.setExpandable(false);
        element23.setPrefSize(new Dimension(150, 0));
        checkOut14.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance7 = element23.getAppearance();
        appearance7.setElementMap(elementMap);
        element23.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance7.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance7.onChildrenAdded();
        element23.onChildrenAdded();
        final String id3 = "ingredientList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, list);
        }
        list.setCellSize(new Dimension(27, 26));
        list.setPrefSize(new Dimension(216, 26));
        list.setExpandable(false);
        checkOut14.addBasicElement(list);
        list.onAttributesInitialized();
        final DecoratorAppearance appearance8 = list.getAppearance();
        appearance8.setElementMap(elementMap);
        list.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(3, 0, 0, 0));
        appearance8.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance8.onChildrenAdded();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("content");
        element25.setField("ingredients");
        list.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final ItemRenderer element26 = new ItemRenderer();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        list.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ConditionResult element27 = new ConditionResult();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ItemCondition element28 = new ItemCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final NotNullCondition element29 = new NotNullCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setNonBlocking(false);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(descIngredient)");
        checkOut18.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        checkOut18.setOnPopupHide(onPopupHide2);
        element26.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final String id4 = "descIngredient";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        checkOut18.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(10, 0));
        checkOut19.setStyle("popup");
        popupElement2.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setHorizontal(false);
        checkOut20.setAlign(Alignment9.NORTH);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final TextView element30 = new TextView();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("white");
        element30.setExpandable(false);
        checkOut19.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element30.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.WEST);
        element30.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        appearance9.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("name");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        final TextView element32 = new TextView();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("white");
        element32.setText("(%desc.missingIngredient%)".replace("%desc.missingIngredient%", Xulor.getInstance().getTranslatedString("desc.missingIngredient")));
        element32.setExpandable(false);
        checkOut19.addBasicElement(element32);
        element32.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element32.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.WEST);
        element32.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("visible");
        element33.setField("isPossessed");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final ConditionResult element34 = new ConditionResult();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        final FalseCondition element35 = new FalseCondition();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        checkOut19.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setExpandable(false);
        checkOut18.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final StaticLayout element36 = new StaticLayout();
        element36.onCheckOut();
        element36.setAdaptToContentSize(true);
        checkOut21.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final DecoratorAppearance appearance11 = checkOut21.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut21.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        this.method7(appearance11);
        appearance11.onChildrenAdded();
        this.method8(checkOut21);
        this.method9(checkOut21);
        checkOut21.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element26.onChildrenAdded();
        list.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        this.method10(checkOut9);
        checkOut9.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 0, 1));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "icon";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, image);
        }
        image.setDisplaySize(new Dimension(26, 26));
        image.setNonBlocking(true);
        basicElement.addBasicElement(image);
        image.onAttributesInitialized();
        final DecoratorAppearance appearance = image.getAppearance();
        appearance.setElementMap(elementMap);
        image.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("modulationColor");
        element.setField("isPossessed");
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("1,1,1,1");
        element2.setElseValue("1,1,1,0.5");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setSize(new Dimension(-2, -2));
        image.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        image.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("texture");
        element5.setField("iconUrl");
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        image.onChildrenAdded();
        return image;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("White10Bordered");
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.SOUTH_EAST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 0, 4, 4));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("text");
        element3.setField("quantity");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.SOUTH);
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bold");
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("levelShort");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setLocal(true);
        checkOut5.setName("craft");
        checkOut5.setAttribute("visible");
        checkOut5.setField("isConceptual");
        element.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        final FalseCondition element4 = new FalseCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("CraftBubble");
        element5.setExpandable(false);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.EAST);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("visible");
        element7.setField("hasCriterion");
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NullCondition element5 = new NullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("evenIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(0.37f, 0.44f, 0.43f, 1.0f));
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NullCondition element5 = new NullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ListCondition element6 = new ListCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setKey("oddIndex");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.EAST);
        element.setInitValue(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
