package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.decorator.mesh.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class WebShopDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public WebShopDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "window";
        final Window element = new Window();
        element.onCheckOut();
        element.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, element);
        }
        element.setPack(true);
        element.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("windowNew");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final WindowMovePoint element6 = new WindowMovePoint();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("titleBar");
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut5.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut5.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(3, 0, 3, 50));
        appearance4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance4.onChildrenAdded();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut9.getAppearance();
        appearance5.setElementMap(elementMap);
        appearance5.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut9.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(3, 10, 3, 0));
        appearance5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Button element10 = new Button();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("webShopBuy2");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:buyOgrines");
        element10.setOnClick(onClick);
        element10.setExpandable(false);
        checkOut9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(100.0f, 100.0f));
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("bold11");
        element12.setText("%shop.buyOgrins%".replace("%shop.buyOgrins%", Xulor.getInstance().getTranslatedString("shop.buyOgrins")));
        element12.setNonBlocking(true);
        checkOut9.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance6 = element12.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.CENTER);
        element12.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        checkOut11.setName("text");
        appearance6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 10, 0, 10));
        appearance6.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance6.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final StackList element14 = new StackList();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setNonBlocking(true);
        checkOut8.addBasicElement(element14);
        element14.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        element14.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("webShop");
        checkOut14.setAttribute("content");
        checkOut14.setField("wallet");
        element14.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final ItemRenderer element15 = new ItemRenderer();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        element15.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setMinWidth(1);
        element16.setMaxWidth(100);
        element16.setExpandable(false);
        element16.setNonBlocking(true);
        checkOut15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.CENTER);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("description");
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element16.onChildrenAdded();
        final Spacer element19 = new Spacer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        checkOut15.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setStyle("white");
        checkOut16.setExpandable(false);
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut16.getAppearance();
        appearance7.setElementMap(elementMap);
        appearance7.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.7f));
        checkOut16.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 0, 0, 10));
        appearance7.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHorizontal(true);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setMinWidth(50);
        element20.setMaxWidth(200);
        element20.setStyle("title");
        element20.setExpandable(false);
        element20.setNonBlocking(true);
        checkOut16.addBasicElement(element20);
        element20.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element20.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.CENTER);
        element20.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 20, 0, 15));
        appearance8.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("text");
        checkOut20.setColor(new Color(0.13725491f, 0.38039216f, 0.42745098f, 1.0f));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.CENTER);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("text");
        element22.setField("value");
        element20.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element20.onChildrenAdded();
        final Image element23 = new Image();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setExpandable(false);
        element23.setNonBlocking(true);
        checkOut16.addBasicElement(element23);
        element23.onAttributesInitialized();
        final RowLayoutData element24 = new RowLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment9.CENTER);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final PixmapElement checkOut21 = PixmapElement.checkOut();
        checkOut21.setElementMap(elementMap);
        element23.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("texture");
        element25.setField("currency");
        checkOut21.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element23.onChildrenAdded();
        checkOut16.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Spacer element26 = new Spacer();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        checkOut7.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setStyle("ShortcutRowBackgroundFull");
        checkOut22.setExpandable(false);
        checkOut22.setNonBlocking(true);
        checkOut7.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final RowLayoutData element27 = new RowLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAlign(Alignment9.CENTER);
        checkOut22.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut22.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut22.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element28 = new Padding();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setInsets(new Insets(5, 6, 5, 6));
        appearance9.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        appearance9.onChildrenAdded();
        final String id2 = "textEditor";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textEditor);
        }
        textEditor.setStyle("withoutBorder");
        textEditor.setPrefSize(new Dimension(150, 0));
        textEditor.setGhostText("%editSearch%".replace("%editSearch%", Xulor.getInstance().getTranslatedString("editSearch")));
        textEditor.setSelectOnFocus(true);
        final KeyPressedListener onKeyPress = new KeyPressedListener();
        onKeyPress.setCallBackFunc("wakfu.webShop:search(session)");
        textEditor.setOnKeyPress(onKeyPress);
        checkOut22.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final DecoratorAppearance appearance10 = textEditor.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.WEST);
        textEditor.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setAttribute("enabled");
        checkOut23.setName("webShop");
        checkOut23.setField("ready");
        textEditor.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut22.onChildrenAdded();
        final Button element29 = new Button();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setExpandable(false);
        element29.setStyle("flat");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.webShop:search(session,textEditor)");
        element29.setOnClick(onClick2);
        checkOut7.addBasicElement(element29);
        element29.onAttributesInitialized();
        final RowLayoutData element30 = new RowLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment9.CENTER);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final Image element31 = new Image();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("magnifyingGlass2");
        element31.setDisplaySize(new Dimension(16, 16));
        element31.setNonBlocking(true);
        element29.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setAttribute("enabled");
        checkOut24.setName("webShop");
        checkOut24.setField("ready");
        element29.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        element29.onChildrenAdded();
        final Button element32 = new Button();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setExpandable(false);
        element32.setStyle("flat");
        final MouseClickedListener onClick3 = new MouseClickedListener();
        onClick3.setCallBackFunc("wakfu.webShop:resetSearch(session,textEditor)");
        element32.setOnClick(onClick3);
        checkOut7.addBasicElement(element32);
        element32.onAttributesInitialized();
        final RowLayoutData element33 = new RowLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAlign(Alignment9.CENTER);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final Image element34 = new Image();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setStyle("cancel");
        element34.setDisplaySize(new Dimension(16, 16));
        element34.setNonBlocking(true);
        element32.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setAttribute("enabled");
        checkOut25.setName("webShop");
        checkOut25.setField("ready");
        element32.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        element32.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        this.method0(checkOut2);
        checkOut2.onChildrenAdded();
        this.method38(element);
        this.method39(element);
        this.method40(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 12, 0, 12));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "windowContentContainer";
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut3);
        }
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final String id2 = "session";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut3.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("webShop");
        checkOut4.setAttribute("value");
        data.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        data.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("title");
        element.setText("%loading%".replace("%loading%", Xulor.getInstance().getTranslatedString("loading")));
        element.setExpandable(false);
        element.setPrefSize(new Dimension(200, 0));
        checkOut6.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("webShop");
        checkOut7.setAttribute("visible");
        checkOut7.setField("mode");
        element.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        checkOut7.addBasicElement(element3);
        element3.onAttributesInitialized();
        final EqualCondition element4 = new EqualCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("0");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut8.setPrefSize(new Dimension(200, 0));
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayout checkOut9 = RowLayout.checkOut();
        checkOut9.setHorizontal(false);
        checkOut8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.NORTH);
        checkOut8.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("webShop");
        checkOut10.setAttribute("visible");
        checkOut10.setField("mode");
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut10.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotEqualCondition element7 = new NotEqualCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("0");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut8.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final StaticLayout element9 = new StaticLayout();
        element9.onCheckOut();
        element9.setAdaptToContentSize(true);
        checkOut11.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("webShopButtonTop");
        element10.setExpandable(false);
        element10.setDisplaySize(new Dimension(160, 50));
        checkOut11.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.NORTH);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.NORTH);
        element12.setSize(new Dimension(100.0f, -2));
        checkOut12.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut12.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(30, 0, 0, 0));
        appearance3.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayout element13 = new StaticLayout();
        element13.onCheckOut();
        element13.setAdaptToContentSize(true);
        checkOut12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Button element14 = new Button();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("WebShopCategory");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:home(session)");
        element14.setOnClick(onClick);
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("enabled");
        checkOut14.setName("webShop");
        checkOut14.setField("ready");
        element14.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setSize(new Dimension(200, 42));
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setDisplaySize(new Dimension(28, 28));
        element16.setExpandable(false);
        element16.setNonBlocking(true);
        checkOut12.addBasicElement(element16);
        element16.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.WEST);
        element17.setSize(new Dimension(-2, -2));
        element17.setXOffset(10);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap);
        element16.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("texture");
        element18.setField("iconUrl");
        checkOut15.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element16.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("title");
        element19.setText("%webShop.home%".replace("%webShop.home%", Xulor.getInstance().getTranslatedString("webShop.home")));
        element19.setNonBlocking(true);
        element19.setMinWidth(1);
        element19.setMaxWidth(220);
        element19.setExpandable(true);
        element19.setEnableAutoZoomShrink(true);
        checkOut12.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment17.CENTER);
        element20.setSize(new Dimension(-2, -2));
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut16.setName("text");
        appearance4.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance4.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setExpandable(false);
        checkOut17.setStyle("tab");
        checkOut11.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("webShop");
        checkOut18.setAttribute("visible");
        checkOut18.setField("homeSubCategories");
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        checkOut18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final CollectionCondition element22 = new CollectionCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setKey("size");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final NotEqualCondition element23 = new NotEqualCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setValue("0");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment17.NORTH);
        element24.setSize(new Dimension(100.0f, 100.0f));
        checkOut17.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut17.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(68, 10, 0, 10));
        appearance5.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Padding element25 = new Padding();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setInsets(new Insets(5, 14, 10, 14));
        appearance5.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        appearance5.onChildrenAdded();
        final List element26 = new List();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setCellSize(new Dimension(100.0f, 38));
        element26.setHorizontal(false);
        element26.setAutoIdealSize(true);
        element26.setIdealSizeMinColumns(1);
        element26.setIdealSizeMaxColumns(1);
        checkOut17.addBasicElement(element26);
        element26.onAttributesInitialized();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("webShop");
        checkOut20.setAttribute("content");
        checkOut20.setField("homeSubCategories");
        element26.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final ItemRenderer element27 = new ItemRenderer();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final String id3 = "subCategory";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        element27.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("value");
        data2.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setExpandable(false);
        element27.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final StaticLayout element29 = new StaticLayout();
        element29.onCheckOut();
        element29.setAdaptToContentSize(true);
        checkOut21.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final Button element30 = new Button();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("WebShopCategorySmall");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.webShop:selectCategory(session,subCategory)");
        element30.setOnClick(onClick2);
        checkOut21.addBasicElement(element30);
        element30.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("enabled");
        checkOut22.setName("webShop");
        checkOut22.setField("ready");
        element30.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final StaticLayoutData element31 = new StaticLayoutData();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setSize(new Dimension(150, 38));
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        final Image element32 = new Image();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setDisplaySize(new Dimension(24, 24));
        element32.setExpandable(false);
        element32.setNonBlocking(true);
        checkOut21.addBasicElement(element32);
        element32.onAttributesInitialized();
        final StaticLayoutData element33 = new StaticLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAlign(Alignment17.WEST);
        element33.setSize(new Dimension(-2, -2));
        element33.setXOffset(10);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final PixmapElement checkOut23 = PixmapElement.checkOut();
        checkOut23.setElementMap(elementMap);
        element32.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("texture");
        element34.setField("iconUrl");
        checkOut23.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element32.onChildrenAdded();
        final TextView element35 = new TextView();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setStyle("StyledBoldDark12");
        element35.setNonBlocking(true);
        element35.setMinWidth(1);
        element35.setMaxWidth(80);
        element35.setExpandable(true);
        element35.setEnableAutoZoomShrink(true);
        element35.setMultiline(false);
        checkOut21.addBasicElement(element35);
        element35.onAttributesInitialized();
        final StaticLayoutData element36 = new StaticLayoutData();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAlign(Alignment17.CENTER);
        element36.setSize(new Dimension(-2, -2));
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final ItemElement element37 = new ItemElement();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setAttribute("text");
        element37.setField("name");
        element35.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final DecoratorAppearance appearance6 = element35.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlign(Alignment9.CENTER);
        element35.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut24 = ColorElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut24.setName("text");
        appearance6.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance6.onChildrenAdded();
        element35.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut11.onChildrenAdded();
        this.method1(checkOut8);
        checkOut8.onChildrenAdded();
        this.method2(checkOut6);
        checkOut6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("webShopButtonBottom");
        element2.setExpandable(false);
        element2.setDisplaySize(new Dimension(160, 50));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, -2));
        element3.setAlign(Alignment17.SOUTH);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final StackList element4 = new StackList();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setHorizontal(false);
        element4.setInnerExpandable(false);
        element4.setExpandable(false);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final DecoratorAppearance appearance = element4.getAppearance();
        appearance.setElementMap(elementMap);
        element4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 30, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("webShop");
        checkOut4.setAttribute("content");
        checkOut4.setField("rootCategories");
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ItemRenderer element6 = new ItemRenderer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final String id = "category";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element6.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("value");
        data.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element6.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.NORTH);
        element9.setSize(new Dimension(100.0f, -2));
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Button element11 = new Button();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("WebShopCategory");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:selectCategory(session,category)");
        element11.setOnClick(onClick);
        checkOut6.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("enabled");
        checkOut7.setName("webShop");
        checkOut7.setField("ready");
        element11.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(200, 42));
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        final Image element13 = new Image();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setDisplaySize(new Dimension(32, 32));
        element13.setExpandable(false);
        element13.setNonBlocking(true);
        checkOut6.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.WEST);
        element14.setSize(new Dimension(-2, -2));
        element14.setXOffset(10);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final PixmapElement checkOut8 = PixmapElement.checkOut();
        checkOut8.setElementMap(elementMap);
        element13.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("texture");
        element15.setField("iconUrl");
        checkOut8.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element13.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("title");
        element16.setNonBlocking(true);
        element16.setMinWidth(1);
        element16.setMaxWidth(120);
        element16.setExpandable(true);
        element16.setEnableAutoZoomShrink(true);
        element16.setMultiline(false);
        checkOut6.addBasicElement(element16);
        element16.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(-2, -2));
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("name");
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance2 = element16.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element16.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut9.setName("text");
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut10.setStyle("tab");
        checkOut5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.NORTH);
        element19.setSize(new Dimension(100.0f, 100.0f));
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut10.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(38, 10, 0, 10));
        appearance3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Padding element20 = new Padding();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setInsets(new Insets(5, 14, 10, 14));
        appearance3.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("visible");
        checkOut10.addBasicElement(element21);
        element21.onAttributesInitialized();
        final ConditionResult element22 = new ConditionResult();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        final AndCondition element23 = new AndCondition();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final OrCondition element24 = new OrCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final EqualCondition element25 = new EqualCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("webShop");
        checkOut12.setAttribute("value");
        checkOut12.setField("currentCategory");
        element25.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element25.onChildrenAdded();
        final EqualCondition element26 = new EqualCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element24.addBasicElement(element26);
        element26.onAttributesInitialized();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("webShop");
        checkOut13.setAttribute("value");
        checkOut13.setField("parentCategory");
        element26.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element26.onChildrenAdded();
        element24.onChildrenAdded();
        final CollectionCondition element27 = new CollectionCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setKey("size");
        element23.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("comparedValue");
        element28.setField("children");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final NotEqualCondition element29 = new NotEqualCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setValue("0");
        element27.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element27.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        final List element30 = new List();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setCellSize(new Dimension(100.0f, 38));
        element30.setHorizontal(false);
        element30.setAutoIdealSize(true);
        element30.setIdealSizeMinColumns(1);
        element30.setIdealSizeMaxColumns(1);
        checkOut10.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("content");
        element31.setField("children");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final ItemRenderer element32 = new ItemRenderer();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element30.addBasicElement(element32);
        element32.onAttributesInitialized();
        final String id2 = "subCategory";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        element32.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("value");
        data2.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setExpandable(false);
        checkOut14.setPrefSize(new Dimension(0, 0));
        element32.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayout element34 = new StaticLayout();
        element34.onCheckOut();
        element34.setAdaptToContentSize(true);
        checkOut14.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final Button element35 = new Button();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setStyle("WebShopCategorySmall");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.webShop:selectCategory(session,subCategory)");
        element35.setOnClick(onClick2);
        checkOut14.addBasicElement(element35);
        element35.onAttributesInitialized();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("enabled");
        checkOut15.setName("webShop");
        checkOut15.setField("ready");
        element35.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final StaticLayoutData element36 = new StaticLayoutData();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setSize(new Dimension(150, 38));
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        final Image element37 = new Image();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setDisplaySize(new Dimension(24, 24));
        element37.setExpandable(false);
        element37.setNonBlocking(true);
        checkOut14.addBasicElement(element37);
        element37.onAttributesInitialized();
        final StaticLayoutData element38 = new StaticLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setAlign(Alignment17.WEST);
        element38.setSize(new Dimension(-2, -2));
        element38.setXOffset(10);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element37.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final ItemElement element39 = new ItemElement();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setAttribute("texture");
        element39.setField("iconUrl");
        checkOut16.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element37.onChildrenAdded();
        final TextView element40 = new TextView();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setStyle("StyledBoldDark12");
        element40.setNonBlocking(true);
        element40.setMinWidth(1);
        element40.setMaxWidth(80);
        element40.setEnableAutoZoomShrink(true);
        element40.setMultiline(false);
        checkOut14.addBasicElement(element40);
        element40.onAttributesInitialized();
        final StaticLayoutData element41 = new StaticLayoutData();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setAlign(Alignment17.CENTER);
        element41.setSize(new Dimension(-2, -2));
        element40.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        final ItemElement element42 = new ItemElement();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setAttribute("text");
        element42.setField("name");
        element40.addBasicElement(element42);
        element42.onAttributesInitialized();
        element42.onChildrenAdded();
        final DecoratorAppearance appearance4 = element40.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element40.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut17 = ColorElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut17.setName("text");
        appearance4.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance4.onChildrenAdded();
        element40.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element32.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut10.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("chatBubble");
        checkOut.setPrefSize(new Dimension(680, 636));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(0.29803923f, 0.36862746f, 0.36862746f, 1.0f));
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 10, 10, 10));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("title");
        element2.setText("%loading%".replace("%loading%", Xulor.getInstance().getTranslatedString("loading")));
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("webShop");
        checkOut2.setAttribute("visible");
        checkOut2.setField("mode");
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final EqualCondition element5 = new EqualCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setValue("0");
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance2 = element2.getAppearance();
        appearance2.setElementMap(elementMap);
        element2.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut3 = ColorElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut3.setName("text");
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut5.setAlign(Alignment9.NORTH);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final String id = "bannerList";
        final List list = new List();
        list.onCheckOut();
        list.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, list);
        }
        list.setCellSize(new Dimension(669, 240));
        list.setHorizontal(true);
        list.setExpandable(false);
        list.setScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_HIDE);
        checkOut6.addBasicElement(list);
        list.onAttributesInitialized();
        final DecoratorAppearance appearance3 = list.getAppearance();
        appearance3.setElementMap(elementMap);
        list.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(4, 4, 4, 4));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(677, 248));
        element8.setAlign(Alignment17.CENTER);
        list.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("webShop");
        checkOut8.setAttribute("content");
        checkOut8.setField("carrousel");
        list.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final ItemRenderer element9 = new ItemRenderer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        list.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemCondition element11 = new ItemCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setField("article");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final NotNullCondition element12 = new NotNullCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        element9.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final String id2 = "article";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut9.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("value");
        element13.setField("article");
        data.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        data.onChildrenAdded();
        final String id3 = "articleContent";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        checkOut9.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("value");
        element14.setField("article/content");
        data2.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        data2.onChildrenAdded();
        final StaticLayout element15 = new StaticLayout();
        element15.onCheckOut();
        element15.setAdaptToContentSize(true);
        checkOut9.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setDisplaySize(new Dimension(667, 240));
        checkOut9.addBasicElement(element16);
        element16.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 100.0f));
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final DecoratorAppearance appearance4 = element16.getAppearance();
        appearance4.setElementMap(elementMap);
        element16.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBorder element18 = new PlainBorder();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setInsets(new Insets(0, 1, 0, 1));
        element18.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance4.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PixmapElement checkOut10 = PixmapElement.checkOut();
        checkOut10.setElementMap(elementMap);
        element16.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("texture");
        element19.setField("iconUrl");
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element16.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setSize(new Dimension(150, 240));
        element20.setAlign(Alignment17.WEST);
        checkOut11.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance5 = checkOut11.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final PlainBackground element21 = new PlainBackground();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        appearance5.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        appearance5.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setSize(new Dimension(233, 240));
        element22.setAlign(Alignment17.WEST);
        element22.setXOffset(150);
        checkOut12.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut12.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut12.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final GradientBackground element23 = new GradientBackground();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        appearance6.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        checkOut13.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        element23.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        checkOut14.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        element23.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut15.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        element23.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut16.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        element23.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element23.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut9.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayoutData element24 = new StaticLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setSize(new Dimension(-2, -2));
        element24.setAlign(Alignment17.NORTH_WEST);
        element24.setXOffset(0);
        element24.setYOffset(-25);
        checkOut17.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut17.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final GradientBackground element25 = new GradientBackground();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        appearance7.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setColor(new Color(0.0f, 0.0f, 0.0f, 0.7f));
        checkOut18.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        element25.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final ColorElement checkOut19 = ColorElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setColor(new Color(0.0f, 0.0f, 0.0f, 0.7f));
        checkOut19.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        element25.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut20.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        element25.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut21.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        element25.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        element25.onChildrenAdded();
        final Padding element26 = new Padding();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setInsets(new Insets(8, 20, 8, 50));
        appearance7.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        appearance7.onChildrenAdded();
        final Label element27 = new Label();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("BigBordered");
        checkOut17.addBasicElement(element27);
        element27.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element27.getAppearance();
        appearance8.setElementMap(elementMap);
        element27.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut22 = ColorElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("text");
        checkOut22.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance8.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance8.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        element28.setField("name");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setMinWidth(1);
        element29.setMaxWidth(250);
        element29.setStyle("bold");
        checkOut9.addBasicElement(element29);
        element29.onAttributesInitialized();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setSize(new Dimension(-2, -2));
        element30.setAlign(Alignment17.NORTH_WEST);
        element30.setXOffset(10);
        element30.setYOffset(-70);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("description");
        element29.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final DecoratorAppearance appearance9 = element29.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setJustify(true);
        element29.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut23 = ColorElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut23.setName("text");
        appearance9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(0, 10, 0, 0));
        appearance9.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance9.onChildrenAdded();
        element29.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut9.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setSize(new Dimension(100.0f, 100.0f));
        checkOut25.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final StaticLayout element33 = new StaticLayout();
        element33.onCheckOut();
        element33.setAdaptToContentSize(true);
        checkOut25.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("visible");
        element34.setField("article");
        checkOut25.addBasicElement(element34);
        element34.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        final NotNullCondition element36 = new NotNullCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        this.method3(checkOut25);
        checkOut25.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element9.onChildrenAdded();
        this.method4(list);
        this.method5(list);
        list.onChildrenAdded();
        this.method6(checkOut6);
        this.method7(checkOut6);
        checkOut6.onChildrenAdded();
        this.method8(checkOut4);
        this.method25(checkOut4);
        checkOut4.onChildrenAdded();
        this.method26(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.SOUTH_WEST);
        element.setSize(new Dimension(-2, -2));
        element.setXOffset(20);
        element.setYOffset(20);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("caracs");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(0.0f, 0.0f, 0.0f, 0.75f));
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(15, 0, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(true);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        checkOut8.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("visible");
        element5.setField("article/originalPrice");
        checkOut8.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("defaultBold16");
        checkOut8.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut9.setName("text");
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.CENTER);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("article/originalPrice");
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setExpandable(false);
        element11.setDisplaySize(new Dimension(16, 16));
        checkOut8.addBasicElement(element11);
        element11.onAttributesInitialized();
        final RowLayoutData element12 = new RowLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment9.SOUTH);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final DecoratorAppearance appearance4 = element11.getAppearance();
        appearance4.setElementMap(elementMap);
        element11.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 0, 0, 0));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PixmapElement checkOut11 = PixmapElement.checkOut();
        checkOut11.setElementMap(elementMap);
        element11.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("texture");
        element13.setField("article/currency");
        checkOut11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayoutData element14 = new RowLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment9.CENTER);
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("defaultBold22");
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element15.getAppearance();
        appearance5.setElementMap(elementMap);
        element15.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut13.setName("text");
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("article/price");
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setExpandable(false);
        element18.setDisplaySize(new Dimension(20, 20));
        checkOut12.addBasicElement(element18);
        element18.onAttributesInitialized();
        final RowLayoutData element19 = new RowLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment9.SOUTH);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final DecoratorAppearance appearance6 = element18.getAppearance();
        appearance6.setElementMap(elementMap);
        element18.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 0, 3, 0));
        appearance6.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance6.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap);
        element18.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("texture");
        element20.setField("article/currency");
        checkOut15.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut12.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setExpandable(false);
        checkOut2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut16.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 10, 0, 0));
        appearance7.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance7.onChildrenAdded();
        final StaticLayout element21 = new StaticLayout();
        element21.onCheckOut();
        element21.setAdaptToContentSize(true);
        checkOut16.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final Button element22 = new Button();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("webShopBuy2");
        element22.setPrefSize(new Dimension(0, 0));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openArticleDescription(article)");
        element22.setOnClick(onClick);
        checkOut16.addBasicElement(element22);
        element22.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setSize(new Dimension(100.0f, 100.0f));
        element23.setAlign(Alignment17.SOUTH);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        final Label element24 = new Label();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("bigBordered");
        element24.setNonBlocking(true);
        checkOut16.addBasicElement(element24);
        element24.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setSize(new Dimension(-2, -2));
        element25.setAlign(Alignment17.CENTER);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final DecoratorAppearance appearance8 = element24.getAppearance();
        appearance8.setElementMap(elementMap);
        element24.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut18 = ColorElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut18.setName("text");
        appearance8.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 10, 0, 35));
        appearance8.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        appearance8.onChildrenAdded();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("text");
        element26.setField("article/isARental");
        element24.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ConditionResult element27 = new ConditionResult();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setValue("%rent%".replace("%rent%", Xulor.getInstance().getTranslatedString("rent")));
        element27.setElseValue("%buy%".replace("%buy%", Xulor.getInstance().getTranslatedString("buy")));
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final TrueCondition element28 = new TrueCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut16.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Image element29 = new Image();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("addToCart");
        element29.setDisplaySize(new Dimension(35, 46));
        element29.setNonBlocking(true);
        checkOut.addBasicElement(element29);
        element29.onAttributesInitialized();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setSize(new Dimension(-2, -2));
        element30.setAlign(Alignment17.EAST);
        element30.setXOffset(-5);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setField("hasCategory");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "highlight";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        checkOut.setCursorType(CursorFactory.CursorType.HAND);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:goToHighlightCategory(session,highlight)");
        checkOut.setOnClick(onClick);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setDisplaySize(new Dimension(667, 240));
        element7.setNonBlocking(true);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(100.0f, 100.0f));
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance = element7.getAppearance();
        appearance.setElementMap(elementMap);
        element7.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element9 = new PlainBorder();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(0, 1, 0, 1));
        element9.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance.onChildrenAdded();
        final PixmapElement checkOut2 = PixmapElement.checkOut();
        checkOut2.setElementMap(elementMap);
        element7.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("texture");
        element10.setField("iconUrl");
        checkOut2.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(150, 240));
        element11.setAlign(Alignment17.WEST);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element12 = new PlainBackground();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        appearance2.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance2.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(233, 240));
        element13.setAlign(Alignment17.WEST);
        element13.setXOffset(150);
        checkOut4.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final GradientBackground element14 = new GradientBackground();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        appearance3.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        checkOut5.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        element14.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        checkOut6.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        element14.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut7.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        element14.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final ColorElement checkOut8 = ColorElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut8.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        element14.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element14.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element15 = new StaticLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setSize(new Dimension(-2, -2));
        element15.setAlign(Alignment17.NORTH_WEST);
        element15.setXOffset(0);
        element15.setYOffset(-25);
        checkOut9.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final GradientBackground element16 = new GradientBackground();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        appearance4.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.0f, 0.0f, 0.0f, 0.7f));
        checkOut10.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        element16.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setColor(new Color(0.0f, 0.0f, 0.0f, 0.7f));
        checkOut11.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        element16.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut12.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        element16.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut13.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        element16.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element16.onChildrenAdded();
        final Padding element17 = new Padding();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setInsets(new Insets(8, 20, 8, 50));
        appearance4.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("BigBordered");
        element18.setNonBlocking(true);
        checkOut9.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element18.getAppearance();
        appearance5.setElementMap(elementMap);
        element18.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("text");
        element19.setField("name");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final TextView element20 = new TextView();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setMinWidth(1);
        element20.setMaxWidth(250);
        element20.setStyle("bold");
        element20.setNonBlocking(true);
        checkOut.addBasicElement(element20);
        element20.onAttributesInitialized();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setSize(new Dimension(-2, -2));
        element21.setAlign(Alignment17.NORTH_WEST);
        element21.setXOffset(10);
        element21.setYOffset(-70);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("text");
        element22.setField("description");
        element20.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance6 = element20.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setJustify(true);
        element20.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut15.setName("text");
        appearance6.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 10, 0, 0));
        appearance6.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance6.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setDisplaySize(new Dimension(667, 240));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBorder element5 = new PlainBorder();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(0, 1, 0, 1));
        element5.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final PixmapElement checkOut2 = PixmapElement.checkOut();
        checkOut2.setElementMap(elementMap);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("texture");
        element6.setField("iconUrl");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(150, 240));
        element7.setAlign(Alignment17.WEST);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        appearance2.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance2.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(233, 240));
        element9.setAlign(Alignment17.WEST);
        element9.setXOffset(150);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final GradientBackground element10 = new GradientBackground();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        appearance3.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        checkOut5.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        element10.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setColor(new Color(0.0f, 0.0f, 0.0f, 0.3f));
        checkOut6.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        element10.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut7.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        element10.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final ColorElement checkOut8 = ColorElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut8.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        element10.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element10.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.NORTH_WEST);
        element11.setXOffset(0);
        element11.setYOffset(-25);
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final GradientBackground element12 = new GradientBackground();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        appearance4.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.0f, 0.0f, 0.0f, 0.7f));
        checkOut10.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_WEST);
        element12.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setColor(new Color(0.0f, 0.0f, 0.0f, 0.7f));
        checkOut11.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_WEST);
        element12.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut12.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.NORTH_EAST);
        element12.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        checkOut13.setPosition(GradientBackgroundMesh.GradientBackgroundColorAlign.SOUTH_EAST);
        element12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        element12.onChildrenAdded();
        final Padding element13 = new Padding();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setInsets(new Insets(8, 20, 8, 50));
        appearance4.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        appearance4.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("BigBordered");
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("name");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setMinWidth(1);
        element16.setMaxWidth(250);
        element16.setStyle("bold");
        checkOut.addBasicElement(element16);
        element16.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(-2, -2));
        element17.setAlign(Alignment17.NORTH_WEST);
        element17.setXOffset(10);
        element17.setYOffset(-70);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("description");
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance6 = element16.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setJustify(true);
        element16.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut15.setName("text");
        appearance6.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 10, 0, 0));
        appearance6.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance6.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("WebShopCarrouselBorder");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.SOUTH_EAST);
        element.setXOffset(-10);
        element.setYOffset(10);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final String id = "carrousel";
        final RadioGroup radioGroup = new RadioGroup();
        radioGroup.onCheckOut();
        radioGroup.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, radioGroup);
        }
        checkOut.addBasicElement(radioGroup);
        radioGroup.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("webShop");
        checkOut2.setAttribute("value");
        checkOut2.setField("currentCarrousel");
        radioGroup.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        radioGroup.onChildrenAdded();
        final List element2 = new List();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setCellSize(new Dimension(16, 16));
        element2.setAutoIdealSize(true);
        element2.setIdealSizeMinRows(1);
        element2.setIdealSizeMaxRows(1);
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final DecoratorAppearance appearance = element2.getAppearance();
        appearance.setElementMap(elementMap);
        element2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(3, 3, 0, 3));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("webShop");
        checkOut4.setAttribute("content");
        checkOut4.setField("carrousel");
        element2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final String id2 = "highlight";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        element3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("value");
        data.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        data.onChildrenAdded();
        final RadioButton element5 = new RadioButton();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setGroupId("carrousel");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:selectCarrouselHighlight(session,highlight)");
        element5.setOnClick(onClick);
        element5.setExpandable(false);
        element3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("selected");
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final EqualCondition element9 = new EqualCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("webShop");
        checkOut5.setAttribute("value");
        checkOut5.setField("currentCarrousel");
        element9.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element5.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(10, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(true);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(154, 189));
        element.setAutoIdealSize(true);
        element.setIdealSizeMinRows(2);
        element.setIdealSizeMaxRows(2);
        element.setIdealSizeMinColumns(3);
        element.setIdealSizeMaxColumns(3);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("content");
        checkOut4.setName("webShop");
        checkOut4.setField("homeArticles");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut5.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final String id = "article";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut5.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("value");
        data.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "articleContent";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut5.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        element5.setField("content");
        data2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(130, 50));
        element6.setAlign(Alignment17.NORTH);
        element6.setYOffset(-134);
        checkOut7.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut8.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(4, 4, 4, 4));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setColor(new Color(0.05882353f, 0.22352941f, 0.23921569f, 1.0f));
        appearance3.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(100.0f, 100.0f));
        checkOut8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setPrefSize(new Dimension(0, 30));
        checkOut7.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 0, 0, 36));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.SOUTH);
        element10.setSize(new Dimension(-2, -2));
        element10.setYOffset(8);
        checkOut10.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut12.setAlign(Alignment9.CENTER);
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut10.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayoutData element11 = new RowLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.CENTER);
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("originalPrice");
        checkOut13.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("11");
        element15.setMaxWidth(50);
        element15.setMaxSize(new Dimension(50, 10000));
        element15.setEnableAutoZoomShrink(true);
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final RowLayoutData element16 = new RowLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("text");
        element17.setField("originalPrice");
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final DecoratorAppearance appearance5 = element15.getAppearance();
        appearance5.setElementMap(elementMap);
        element15.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setColor(new Color(0.19215687f, 0.7019608f, 0.7490196f, 1.0f));
        checkOut14.setName("text");
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        element15.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setExpandable(false);
        element18.setDisplaySize(new Dimension(13, 13));
        checkOut13.addBasicElement(element18);
        element18.onAttributesInitialized();
        final RowLayoutData element19 = new RowLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment9.CENTER);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap);
        element18.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("texture");
        element20.setField("currency");
        checkOut15.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut13.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setExpandable(false);
        checkOut10.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.CENTER);
        checkOut16.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("bold11");
        element22.setMaxWidth(50);
        element22.setMaxSize(new Dimension(50, 10000));
        element22.setEnableAutoZoomShrink(true);
        checkOut16.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("price");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance6 = element22.getAppearance();
        appearance6.setElementMap(elementMap);
        element22.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut17 = ColorElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setColor(new Color(0.2509804f, 0.9372549f, 1.0f, 1.0f));
        checkOut17.setName("text");
        appearance6.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 0, 1, 2));
        appearance6.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        appearance6.onChildrenAdded();
        element22.onChildrenAdded();
        final Image element25 = new Image();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setExpandable(false);
        element25.setDisplaySize(new Dimension(16, 16));
        checkOut16.addBasicElement(element25);
        element25.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.CENTER);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element25.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("texture");
        element27.setField("currency");
        checkOut19.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        checkOut19.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut16.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setStyle("companionPane");
        checkOut7.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setSize(new Dimension(100.0f, 100.0f));
        checkOut20.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut20.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 0, 0, 0));
        appearance7.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance7.onChildrenAdded();
        checkOut20.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut7.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final ItemElement element29 = new ItemElement();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAttribute("visible");
        checkOut22.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ConditionResult element30 = new ConditionResult();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final NotNullCondition element31 = new NotNullCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment17.SOUTH_EAST);
        element32.setSize(new Dimension(-2, -2));
        element32.setXOffset(-7);
        element32.setYOffset(8);
        checkOut22.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final StaticLayout element33 = new StaticLayout();
        element33.onCheckOut();
        element33.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final Button element34 = new Button();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setStyle("webShopBuy2");
        element34.setPrefSize(new Dimension(36, 30));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openArticleDescription(article)");
        element34.setOnClick(onClick);
        checkOut22.addBasicElement(element34);
        element34.onAttributesInitialized();
        final StaticLayoutData element35 = new StaticLayoutData();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setSize(new Dimension(-2, -2));
        element35.setAlign(Alignment17.CENTER);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final ItemElement element36 = new ItemElement();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAttribute("enabled");
        element36.setField("isAvailable");
        element34.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element34.onChildrenAdded();
        final Image element37 = new Image();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setStyle("addToCart");
        element37.setDisplaySize(new Dimension(24, 30));
        element37.setNonBlocking(true);
        checkOut22.addBasicElement(element37);
        element37.onAttributesInitialized();
        final StaticLayoutData element38 = new StaticLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setSize(new Dimension(-2, -2));
        element38.setAlign(Alignment17.CENTER);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        element37.onChildrenAdded();
        checkOut22.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final StaticLayoutData element39 = new StaticLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setSize(new Dimension(149, 149));
        element39.setAlign(Alignment17.NORTH);
        checkOut23.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final StaticLayout element40 = new StaticLayout();
        element40.onCheckOut();
        element40.setAdaptToContentSize(true);
        checkOut23.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        final Image element41 = new Image();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setDisplaySize(new Dimension(135, 135));
        element41.setStyle("articleBackground");
        checkOut23.addBasicElement(element41);
        element41.onAttributesInitialized();
        this.method9(element41);
        this.method10(element41);
        element41.onChildrenAdded();
        this.method11(checkOut23);
        this.method12(checkOut23);
        this.method13(checkOut23);
        this.method14(checkOut23);
        this.method15(checkOut23);
        this.method16(checkOut23);
        this.method17(checkOut23);
        checkOut23.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        this.method18(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("modulationColor");
        element.setField("isAvailable");
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("1,1,1");
        element2.setElseValue("0.9,0.9,0.9");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final TrueCondition element3 = new TrueCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(4, 4, 4, 4));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(100, 100));
        element.setFadeOnPixmapLoaded(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.CENTER);
        element2.setYOffset(-10);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("modulationColor");
        element3.setField("isAvailable");
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("1,1,1,1");
        element4.setElseValue("1,1,1,0.7");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(4, 4, 4, 4));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PixmapElement checkOut2 = PixmapElement.checkOut();
        checkOut2.setElementMap(elementMap);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("texture");
        element6.setField("iconUrl");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("canBeEquiped");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, -2));
        element3.setAlign(Alignment17.SOUTH_EAST);
        element3.setXOffset(-10);
        element3.setYOffset(10);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("webShopItem");
        checkOut2.setExpandable(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(0.23529412f, 0.6f, 0.5686275f, 1.0f));
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Button element5 = new Button();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("StuffPreview");
        element5.setNonBlocking(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openStuffPreviewWindow(article)");
        element5.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(stuffPreviewButtonPopup)");
        element5.setOnPopupDisplay(onPopupDisplay);
        element5.setExpandable(false);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element5.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(100.0f, 100.0f));
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(4, 4, 4, 4));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id = "stuffPreviewButtonPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element5.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setPrefSize(new Dimension(10, 0));
        checkOut4.setStyle("popup");
        popupElement.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        element7.setExpandable(false);
        element7.setText("%openStuffPreview%".replace("%openStuffPreview%", Xulor.getInstance().getTranslatedString("openStuffPreview")));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut4.onChildrenAdded();
        popupElement.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("caracs");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(0.0f, 0.0f, 0.0f, 0.75f));
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.NORTH);
        element4.setSize(new Dimension(-2, -2));
        element4.setYOffset(-10);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setMinWidth(1);
        element5.setMaxWidth(110);
        element5.setStyle("bold");
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("name");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut2.setName("text");
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("companionPane");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(timeRemainingPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "timeRemainingPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setExpandable(false);
        element.setText("%webShop.timeRemainingDescription%".replace("%webShop.timeRemainingDescription%", Xulor.getInstance().getTranslatedString("webShop.timeRemainingDescription")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("remainingTime");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(-2, 38));
        element5.setAlign(Alignment17.SOUTH_WEST);
        element5.setXOffset(0);
        element5.setYOffset(10);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("shopTimedArticleLeft");
        element8.setExpandable(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("shopTimedArticleCenter");
        element9.setExpandable(true);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("shopTimedArticleRight");
        element10.setExpandable(false);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("SmallBoldBordered12");
        element11.setMaxWidth(100);
        element11.setMaxSize(new Dimension(100, 10000));
        element11.setEnableAutoZoomShrink(true);
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 35, 0, 10));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut7.setName("text");
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(100.0f, -2));
        element12.setAlign(Alignment17.CENTER);
        element12.setYOffset(1);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("remainingTime");
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(stockPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "stockPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setExpandable(false);
        element.setText("%webShop.stockDescription%".replace("%webShop.stockDescription%", Xulor.getInstance().getTranslatedString("webShop.stockDescription")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("stock");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(-2, 38));
        element5.setAlign(Alignment17.SOUTH_WEST);
        element5.setXOffset(0);
        element5.setYOffset(42);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("shopInfoArticleLeft");
        element8.setExpandable(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("shopInfoArticleCenter");
        element9.setExpandable(true);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("shopInfoArticleRight");
        element10.setExpandable(false);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("SmallBoldBordered12");
        element11.setMaxWidth(100);
        element11.setMaxSize(new Dimension(100, 10000));
        element11.setEnableAutoZoomShrink(true);
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 35, 0, 10));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut7.setName("text");
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(100.0f, -2));
        element12.setAlign(Alignment17.CENTER);
        element12.setYOffset(1);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("stock");
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(rentalPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "rentalPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setExpandable(false);
        element.setText("%webShop.rentalDescription%".replace("%webShop.rentalDescription%", Xulor.getInstance().getTranslatedString("webShop.rentalDescription")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("isARental");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, 38));
        element3.setAlign(Alignment17.SOUTH_WEST);
        element3.setXOffset(0);
        element3.setYOffset(74);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("shopInfoArticleLeft");
        element6.setExpandable(false);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("shopInfoArticleCenter");
        element7.setExpandable(true);
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("shopInfoArticleRight");
        element8.setExpandable(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("SmallBoldBordered12");
        element9.setMaxWidth(100);
        element9.setMaxSize(new Dimension(100, 10000));
        element9.setEnableAutoZoomShrink(true);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 35, 0, 10));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut7.setName("text");
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(100.0f, -2));
        element10.setAlign(Alignment17.CENTER);
        element10.setYOffset(1);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("text");
        element11.setField("rentalDescription");
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInnerExpandable(false);
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setHorizontal(false);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setField("article");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final String id = "article";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element2.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("value");
        element6.setField("article");
        data.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "articleContent";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        element2.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("value");
        element7.setField("article/content");
        data2.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        element8.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(4, 4, 4, 4));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final PlainBackground element9 = new PlainBackground();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setColor(new Color(0.05882353f, 0.22352941f, 0.23921569f, 1.0f));
        appearance.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(100.0f, 100.0f));
        checkOut3.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Image element11 = new Image();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setDisplaySize(new Dimension(204, 124));
        element11.setExpandable(false);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element11.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("texture");
        element12.setField("iconUrl");
        checkOut5.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setMinWidth(1);
        element13.setMaxWidth(150);
        element13.setStyle("bold");
        checkOut2.addBasicElement(element13);
        element13.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.NORTH);
        element14.setSize(new Dimension(-2, -2));
        element14.setYOffset(-10);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("article/name");
        element13.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final DecoratorAppearance appearance2 = element13.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element13.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut6 = ColorElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut6.setName("text");
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        element13.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.SOUTH);
        element16.setSize(new Dimension(100.0f, 42));
        element16.setYOffset(0);
        checkOut7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut7.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PlainBackground element17 = new PlainBackground();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setColor(new Color(0.0f, 0.0f, 0.0f, 0.6f));
        appearance3.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(4, 4, 4, 4));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.CENTER);
        checkOut9.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("title");
        element19.setMaxWidth(50);
        element19.setMaxSize(new Dimension(50, 10000));
        element19.setEnableAutoZoomShrink(true);
        checkOut9.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("article/price");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setColor(new Color(0.2509804f, 0.9372549f, 1.0f, 1.0f));
        checkOut10.setName("text");
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element19.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setDisplaySize(new Dimension(18, 18));
        checkOut9.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PixmapElement checkOut11 = PixmapElement.checkOut();
        checkOut11.setElementMap(elementMap);
        element22.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("texture");
        element24.setField("article/currency");
        checkOut11.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment17.SOUTH_EAST);
        element25.setSize(new Dimension(30, 30));
        element25.setXOffset(-7);
        element25.setYOffset(8);
        checkOut12.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final StaticLayout element26 = new StaticLayout();
        element26.onCheckOut();
        element26.setAdaptToContentSize(true);
        checkOut12.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final Button element27 = new Button();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setStyle("webShopBuy2");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openArticleDescription(article)");
        element27.setOnClick(onClick);
        checkOut12.addBasicElement(element27);
        element27.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setSize(new Dimension(100.0f, 100.0f));
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        final Image element29 = new Image();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("addToCart");
        element29.setDisplaySize(new Dimension(24, 30));
        element29.setNonBlocking(true);
        checkOut12.addBasicElement(element29);
        element29.onAttributesInitialized();
        final StaticLayoutData element30 = new StaticLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setSize(new Dimension(-2, -2));
        element30.setAlign(Alignment17.CENTER);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setStyle("companionPane");
        checkOut2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayoutData element31 = new StaticLayoutData();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setSize(new Dimension(100.0f, 100.0f));
        checkOut13.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        checkOut13.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element2.onChildrenAdded();
        final ItemRenderer element32 = new ItemRenderer();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ConditionResult element33 = new ConditionResult();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final ItemCondition element34 = new ItemCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setField("gondolaHead");
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        final NotNullCondition element35 = new NotNullCondition();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(0, 100));
        element32.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayout element36 = new StaticLayout();
        element36.onCheckOut();
        element36.setAdaptToContentSize(true);
        checkOut14.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final Image element37 = new Image();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setScaled(true);
        element37.setKeepAspectRatio(false);
        element37.setStyle("articleBackground");
        element37.setShrinkable(true);
        checkOut14.addBasicElement(element37);
        element37.onAttributesInitialized();
        final StaticLayoutData element38 = new StaticLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setSize(new Dimension(100.0f, 100.0f));
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        final DecoratorAppearance appearance5 = element37.getAppearance();
        appearance5.setElementMap(elementMap);
        element37.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(4, 4, 4, 4));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        element37.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut16.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(4, 4, 4, 4));
        appearance6.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Padding element39 = new Padding();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setInsets(new Insets(4, 4, 4, 4));
        appearance6.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        appearance6.onChildrenAdded();
        final StaticLayoutData element40 = new StaticLayoutData();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setSize(new Dimension(100.0f, 100.0f));
        checkOut16.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHorizontal(false);
        checkOut18.setAlign(Alignment9.NORTH);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setExpandable(false);
        checkOut16.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut19.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 3, 0));
        appearance7.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance7.onChildrenAdded();
        final TextView element41 = new TextView();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setStyle("title");
        element41.setExpandable(true);
        checkOut19.addBasicElement(element41);
        element41.onAttributesInitialized();
        final ItemElement element42 = new ItemElement();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setAttribute("text");
        element42.setField("gondolaHead/name");
        element41.addBasicElement(element42);
        element42.onAttributesInitialized();
        element42.onChildrenAdded();
        final DecoratorAppearance appearance8 = element41.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.CENTER);
        element41.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut21.setName("text");
        appearance8.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance8.onChildrenAdded();
        element41.onChildrenAdded();
        this.method19(checkOut19);
        checkOut19.onChildrenAdded();
        this.method20(checkOut16);
        checkOut16.onChildrenAdded();
        this.method21(checkOut14);
        checkOut14.onChildrenAdded();
        element32.onChildrenAdded();
        this.method22(element);
        this.method23(element);
        this.method24(element);
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(48, 19));
        element.setExpandable(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-2);
        element2.setYOffset(-2);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("texture");
        element3.setField("gondolaHead/iconUrl");
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setInnerExpandable(false);
        element.setHorizontal(false);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 5, 0, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("content");
        element2.setField("gondolaHead/articles");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final String id = "article";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element4 = new ItemElement();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAttribute("value");
        data.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setCursorType(CursorFactory.CursorType.HAND);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openArticleDescription(article)");
        checkOut3.setOnClick(onClick);
        checkOut3.setNonBlocking(false);
        element3.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(2, 0, 2, 0));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element5 = new Padding();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setInsets(new Insets(2, 2, 2, 2));
        appearance2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final PlainBackground element6 = new PlainBackground();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setColor(new Color(0.0f, 0.0f, 0.0f, 0.5f));
        appearance2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final TextView element7 = new TextView();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setNonBlocking(true);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut5.setName("text");
        appearance3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("text");
        element8.setField("name");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("companionPane");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setField("hasCategory");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final String id = "highlight";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        element.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("value");
        data.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setNonBlocking(false);
        checkOut.setCursorType(CursorFactory.CursorType.HAND);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:goToHighlightCategory(session,highlight)");
        checkOut.setOnClick(onClick);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(4, 4, 4, 4));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PlainBackground element7 = new PlainBackground();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setColor(new Color(0.05882353f, 0.22352941f, 0.23921569f, 1.0f));
        appearance.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setDisplaySize(new Dimension(204, 124));
        element9.setExpandable(false);
        element9.setNonBlocking(true);
        checkOut2.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PixmapElement checkOut4 = PixmapElement.checkOut();
        checkOut4.setElementMap(elementMap);
        element9.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("texture");
        element10.setField("iconUrl");
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setStyle("companionPane");
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(100.0f, 100.0f));
        checkOut5.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.NORTH);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("webShop");
        checkOut.setAttribute("content");
        checkOut.setField("highlights");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("webShop");
        checkOut.setAttribute("visible");
        checkOut.setField("mode");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("1");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setCellSize(new Dimension(154, 189));
        element.setAutoIdealSize(true);
        element.setIdealSizeMinColumns(4);
        element.setIdealSizeMaxColumns(4);
        element.setIdealSizeMinRows(3);
        element.setIdealSizeMaxRows(3);
        element.setExpandable(false);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setAttribute("content");
        checkOut3.setName("webShop");
        checkOut3.setField("articles");
        element.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final ItemRenderer element3 = new ItemRenderer();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemCondition element5 = new ItemCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        element3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut4.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 5));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayout element7 = new StaticLayout();
        element7.onCheckOut();
        element7.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final String id = "article";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut4.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element8 = new ItemElement();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAttribute("value");
        data.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "articleContent";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut4.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("value");
        element9.setField("content");
        data2.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(130, 50));
        element10.setAlign(Alignment17.NORTH);
        element10.setYOffset(-134);
        checkOut6.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(4, 4, 4, 4));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final PlainBackground element12 = new PlainBackground();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setColor(new Color(0.05882353f, 0.22352941f, 0.23921569f, 1.0f));
        appearance2.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        checkOut7.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(0, 30));
        checkOut6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut9.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 0, 0, 36));
        appearance3.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.SOUTH);
        element14.setSize(new Dimension(-2, -2));
        element14.setYOffset(8);
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut11.setAlign(Alignment9.CENTER);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut9.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.CENTER);
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("visible");
        element16.setField("originalPrice");
        checkOut12.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final NotNullCondition element18 = new NotNullCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("11");
        element19.setMaxWidth(50);
        element19.setMaxSize(new Dimension(50, 10000));
        element19.setEnableAutoZoomShrink(true);
        checkOut12.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("originalPrice");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setColor(new Color(0.19215687f, 0.7019608f, 0.7490196f, 1.0f));
        checkOut13.setName("text");
        appearance4.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance4.onChildrenAdded();
        element19.onChildrenAdded();
        final Image element22 = new Image();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setDisplaySize(new Dimension(13, 13));
        checkOut12.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final PixmapElement checkOut14 = PixmapElement.checkOut();
        checkOut14.setElementMap(elementMap);
        element22.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("texture");
        element24.setField("currency");
        checkOut14.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut9.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        checkOut15.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final TextView element26 = new TextView();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("bold11");
        element26.setMaxWidth(50);
        element26.setMaxSize(new Dimension(50, 10000));
        element26.setEnableAutoZoomShrink(true);
        checkOut15.addBasicElement(element26);
        element26.onAttributesInitialized();
        final RowLayoutData element27 = new RowLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAlign(Alignment9.CENTER);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("text");
        element28.setField("price");
        element26.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance5 = element26.getAppearance();
        appearance5.setElementMap(elementMap);
        element26.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut16 = ColorElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setColor(new Color(0.2509804f, 0.9372549f, 1.0f, 1.0f));
        checkOut16.setName("text");
        appearance5.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 0, 1, 2));
        appearance5.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance5.onChildrenAdded();
        element26.onChildrenAdded();
        final Image element29 = new Image();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setExpandable(false);
        element29.setDisplaySize(new Dimension(16, 16));
        checkOut15.addBasicElement(element29);
        element29.onAttributesInitialized();
        final RowLayoutData element30 = new RowLayoutData();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAlign(Alignment9.CENTER);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final PixmapElement checkOut18 = PixmapElement.checkOut();
        checkOut18.setElementMap(elementMap);
        element29.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("texture");
        element31.setField("currency");
        checkOut18.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut15.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setStyle("companionPane");
        checkOut6.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setSize(new Dimension(100.0f, 100.0f));
        checkOut19.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut19.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance6.onChildrenAdded();
        checkOut19.onChildrenAdded();
        final Container checkOut21 = Container.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut6.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("visible");
        checkOut21.addBasicElement(element33);
        element33.onAttributesInitialized();
        final ConditionResult element34 = new ConditionResult();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        final NotNullCondition element35 = new NotNullCondition();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        final StaticLayoutData element36 = new StaticLayoutData();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAlign(Alignment17.SOUTH_EAST);
        element36.setSize(new Dimension(-2, -2));
        element36.setXOffset(-7);
        element36.setYOffset(8);
        checkOut21.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final StaticLayout element37 = new StaticLayout();
        element37.onCheckOut();
        element37.setAdaptToContentSize(true);
        checkOut21.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final Button element38 = new Button();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setStyle("webShopBuy2");
        element38.setPrefSize(new Dimension(36, 30));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openArticleDescription(article)");
        element38.setOnClick(onClick);
        checkOut21.addBasicElement(element38);
        element38.onAttributesInitialized();
        final StaticLayoutData element39 = new StaticLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setSize(new Dimension(-2, -2));
        element39.setAlign(Alignment17.CENTER);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final ItemElement element40 = new ItemElement();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAttribute("enabled");
        element40.setField("isAvailable");
        element38.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        element38.onChildrenAdded();
        final Image element41 = new Image();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setStyle("addToCart");
        element41.setDisplaySize(new Dimension(24, 30));
        element41.setNonBlocking(true);
        checkOut21.addBasicElement(element41);
        element41.onAttributesInitialized();
        final StaticLayoutData element42 = new StaticLayoutData();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setSize(new Dimension(-2, -2));
        element42.setAlign(Alignment17.CENTER);
        element41.addBasicElement(element42);
        element42.onAttributesInitialized();
        element42.onChildrenAdded();
        element41.onChildrenAdded();
        checkOut21.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final StaticLayoutData element43 = new StaticLayoutData();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element43.setSize(new Dimension(149, 149));
        element43.setAlign(Alignment17.NORTH);
        checkOut22.addBasicElement(element43);
        element43.onAttributesInitialized();
        element43.onChildrenAdded();
        this.method27(checkOut22);
        this.method28(checkOut22);
        this.method29(checkOut22);
        this.method30(checkOut22);
        this.method31(checkOut22);
        this.method32(checkOut22);
        this.method33(checkOut22);
        this.method34(checkOut22);
        this.method35(checkOut22);
        checkOut22.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        this.method36(checkOut);
        this.method37(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return null;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(135, 135));
        element.setStyle("articleBackground");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("modulationColor");
        element3.setField("isAvailable");
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("1,1,1");
        element4.setElseValue("0.9,0.9,0.9");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(4, 4, 4, 4));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(100, 100));
        element.setFadeOnPixmapLoaded(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.CENTER);
        element2.setYOffset(-10);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("modulationColor");
        element3.setField("isAvailable");
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setValue("1,1,1,1");
        element4.setElseValue("1,1,1,0.7");
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(4, 4, 4, 4));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PixmapElement checkOut2 = PixmapElement.checkOut();
        checkOut2.setElementMap(elementMap);
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("texture");
        element6.setField("iconUrl");
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("canBeEquiped");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, -2));
        element3.setAlign(Alignment17.SOUTH_EAST);
        element3.setXOffset(-10);
        element3.setYOffset(10);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("webShopItem");
        checkOut2.setExpandable(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(0.23529412f, 0.6f, 0.5686275f, 1.0f));
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Button element5 = new Button();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("StuffPreview");
        element5.setNonBlocking(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:openStuffPreviewWindow(article)");
        element5.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(stuffPreviewButtonPopup)");
        element5.setOnPopupDisplay(onPopupDisplay);
        element5.setExpandable(false);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element5.setOnPopupHide(onPopupHide);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(100.0f, 100.0f));
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(4, 4, 4, 4));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id = "stuffPreviewButtonPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element5.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setPrefSize(new Dimension(10, 0));
        checkOut4.setStyle("popup");
        popupElement.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setAlign(Alignment9.WEST);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("PopupInformation");
        element7.setExpandable(false);
        element7.setText("%openStuffPreview%".replace("%openStuffPreview%", Xulor.getInstance().getTranslatedString("openStuffPreview")));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut4.onChildrenAdded();
        popupElement.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("caracs");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(0.0f, 0.0f, 0.0f, 0.75f));
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.NORTH);
        element4.setSize(new Dimension(-2, -2));
        element4.setYOffset(-10);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setMinWidth(1);
        element5.setMaxWidth(110);
        element5.setStyle("bold");
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("name");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut2.setName("text");
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("companionPane");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(timeRemainingPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "timeRemainingPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setExpandable(false);
        element.setText("%webShop.timeRemainingDescription%".replace("%webShop.timeRemainingDescription%", Xulor.getInstance().getTranslatedString("webShop.timeRemainingDescription")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("remainingTime");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(-2, 38));
        element5.setAlign(Alignment17.SOUTH_WEST);
        element5.setXOffset(0);
        element5.setYOffset(10);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("shopTimedArticleLeft");
        element8.setExpandable(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("shopTimedArticleCenter");
        element9.setExpandable(true);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("shopTimedArticleRight");
        element10.setExpandable(false);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("SmallBoldBordered12");
        element11.setMaxWidth(100);
        element11.setMaxSize(new Dimension(100, 10000));
        element11.setEnableAutoZoomShrink(true);
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 35, 0, 10));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut7.setName("text");
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(100.0f, -2));
        element12.setAlign(Alignment17.CENTER);
        element12.setYOffset(1);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("remainingTime");
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(stockPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "stockPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setExpandable(false);
        element.setText("%webShop.stockDescription%".replace("%webShop.stockDescription%", Xulor.getInstance().getTranslatedString("webShop.stockDescription")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("stock");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(-2, 38));
        element5.setAlign(Alignment17.SOUTH_WEST);
        element5.setXOffset(0);
        element5.setYOffset(42);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("shopInfoArticleLeft");
        element8.setExpandable(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("shopInfoArticleCenter");
        element9.setExpandable(true);
        checkOut4.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("shopInfoArticleRight");
        element10.setExpandable(false);
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element11 = new TextView();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("SmallBoldBordered12");
        element11.setMaxWidth(100);
        element11.setMaxSize(new Dimension(100, 10000));
        element11.setEnableAutoZoomShrink(true);
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 35, 0, 10));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut7.setName("text");
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setSize(new Dimension(100.0f, -2));
        element12.setAlign(Alignment17.CENTER);
        element12.setYOffset(1);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("stock");
        element11.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(rentalPopup)");
        checkOut.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        checkOut.setOnPopupHide(onPopupHide);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final String id = "rentalPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(10, 0));
        checkOut2.setStyle("popup");
        popupElement.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("PopupInformation");
        element.setExpandable(false);
        element.setText("%webShop.rentalDescription%".replace("%webShop.rentalDescription%", Xulor.getInstance().getTranslatedString("webShop.rentalDescription")));
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        popupElement.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("isARental");
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, 38));
        element3.setAlign(Alignment17.SOUTH_WEST);
        element3.setXOffset(0);
        element3.setYOffset(74);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("shopInfoArticleLeft");
        element6.setExpandable(false);
        checkOut4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("shopInfoArticleCenter");
        element7.setExpandable(true);
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("shopInfoArticleRight");
        element8.setExpandable(false);
        checkOut4.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element9 = new TextView();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("SmallBoldBordered12");
        element9.setMaxWidth(100);
        element9.setMaxSize(new Dimension(100, 10000));
        element9.setEnableAutoZoomShrink(true);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 35, 0, 10));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut7.setName("text");
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(100.0f, -2));
        element10.setAlign(Alignment17.CENTER);
        element10.setYOffset(1);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("text");
        element11.setField("rentalDescription");
        element9.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(5, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.CENTER);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setStyle("whiteLeftArrowWithStop");
        element.setNetEnabledId("marketBoardSearchLock");
        element.setEnabled(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.webShop:first(session)");
        element.setOnClick(onClick);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("webShop");
        checkOut4.setField("currentPage");
        checkOut4.setAttribute("enabled");
        element.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final GreaterCondition element3 = new GreaterCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("1");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element.onChildrenAdded();
        final Button element4 = new Button();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        element4.setStyle("whiteLeftArrow");
        element4.setNetEnabledId("marketBoardSearchLock");
        element4.setEnabled(false);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.webShop:previous(session)");
        element4.setOnClick(onClick2);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("webShop");
        checkOut5.setField("currentPage");
        checkOut5.setAttribute("enabled");
        element4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        final GreaterCondition element6 = new GreaterCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setValue("1");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element4.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setExpandable(false);
        element7.setPrefSize(new Dimension(250, 0));
        element7.setText("%marketBoard.noResults%".replace("%marketBoard.noResults%", Xulor.getInstance().getTranslatedString("marketBoard.noResults")));
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("webShop");
        checkOut6.setField("pagesDescription");
        checkOut6.setAttribute("text");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element7.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("text");
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        element7.onChildrenAdded();
        final Button element8 = new Button();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setStyle("whiteRightArrow");
        element8.setNetEnabledId("marketBoardSearchLock");
        element8.setEnabled(false);
        final MouseClickedListener onClick3 = new MouseClickedListener();
        onClick3.setCallBackFunc("wakfu.webShop:next(session)");
        element8.setOnClick(onClick3);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("webShop");
        checkOut8.setField("currentPage");
        checkOut8.setAttribute("enabled");
        element8.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        checkOut8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final LessCondition element10 = new LessCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("webShop");
        checkOut9.setAttribute("value");
        checkOut9.setField("totalPages");
        element10.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut8.onChildrenAdded();
        element8.onChildrenAdded();
        final Button element11 = new Button();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setExpandable(false);
        element11.setStyle("whiteRightArrowWithStop");
        element11.setNetEnabledId("marketBoardSearchLock");
        element11.setEnabled(false);
        final MouseClickedListener onClick4 = new MouseClickedListener();
        onClick4.setCallBackFunc("wakfu.webShop:last(session)");
        element11.setOnClick(onClick4);
        checkOut.addBasicElement(element11);
        element11.onAttributesInitialized();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("webShop");
        checkOut10.setField("currentPage");
        checkOut10.setAttribute("enabled");
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final LessCondition element13 = new LessCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("webShop");
        checkOut11.setAttribute("value");
        checkOut11.setField("totalPages");
        element13.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("webShop");
        checkOut.setAttribute("visible");
        checkOut.setField("mode");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("2");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.EAST);
        element.setResizeOnce(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
