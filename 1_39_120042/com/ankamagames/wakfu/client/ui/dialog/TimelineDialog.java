package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class TimelineDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public TimelineDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(0, 90));
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.NORTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setPrefSize(new Dimension(400, 0));
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment17.NORTH);
        element3.setSize(new Dimension(-2, -2));
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("TimeLineDecoratorLeft");
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.CENTER);
        element6.setXOffset(-85);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("TimeLineDecoratorRight");
        checkOut2.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.CENTER);
        element8.setXOffset(85);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("TimeLineDark");
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setSize(new Dimension(-2, 20));
        checkOut3.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("TimeLineDark");
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.CENTER);
        element11.setSize(new Dimension(100.0f, 100.0f));
        checkOut4.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("bigTitle");
        element12.setText("Tour 10");
        checkOut3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.CENTER);
        element13.setSize(new Dimension(100.0f, 100.0f));
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance = element12.getAppearance();
        appearance.setElementMap(elementMap);
        element12.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 15, 0, 15));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setPrefSize(new Dimension(120, 20));
        checkOut2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.WEST);
        checkOut6.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final StaticLayout element15 = new StaticLayout();
        element15.onCheckOut();
        checkOut6.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final ProgressBar element16 = new ProgressBar();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setUseIncreaseProgressTween(true);
        element16.setUseDecreaseProgressTween(true);
        element16.setStyle("XP2");
        element16.setNonBlocking(false);
        element16.setValue(1.0f);
        element16.setTweenDuration(1000L);
        checkOut6.addBasicElement(element16);
        element16.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, 8));
        element17.setAlign(Alignment17.CENTER);
        element17.setXOffset(5);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final DecoratorAppearance appearance2 = element16.getAppearance();
        appearance2.setElementMap(elementMap);
        element16.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("progressBar");
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("modulationColor");
        checkOut8.setName("countdownState");
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ConditionResult element18 = new ConditionResult();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setElseValue("#cdee34");
        checkOut8.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ConditionResult element19 = new ConditionResult();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setValue("0.98,0.79,0");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final EqualCondition element20 = new EqualCondition();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setValue("1");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final ConditionResult element21 = new ConditionResult();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setValue("1,0.19,0");
        element18.addBasicElement(element21);
        element21.onAttributesInitialized();
        final EqualCondition element22 = new EqualCondition();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setValue("2");
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element21.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 12, 0, 12));
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("value");
        checkOut10.setName("countdownPercentage");
        element16.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element16.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setStyle("TimeLineBarHighlight");
        checkOut6.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.CENTER);
        element23.setSize(new Dimension(100.0f, 100.0f));
        checkOut11.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut11.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 10, 0, 0));
        appearance3.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Image element24 = new Image();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("FightTimer");
        checkOut6.addBasicElement(element24);
        element24.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment17.WEST);
        element25.setXOffset(4);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setPrefSize(new Dimension(126, 20));
        checkOut2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment17.EAST);
        checkOut13.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        checkOut13.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setStyle("TimeLineBarHighlight");
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element28 = new StaticLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment17.CENTER);
        element28.setSize(new Dimension(100.0f, 100.0f));
        element28.setXOffset(7);
        checkOut14.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut14.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 13, 0, 0));
        appearance4.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut13.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAlign(Alignment17.CENTER);
        element29.setSize(new Dimension(100.0f, 100.0f));
        element29.setXOffset(13);
        checkOut16.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final StaticLayout element30 = new StaticLayout();
        element30.onCheckOut();
        element30.setAdaptToContentSize(true);
        checkOut16.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final String id = "extraTurnScoreImage1";
        final Image image = new Image();
        image.onCheckOut();
        image.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, image);
        }
        image.setExpandable(false);
        checkOut16.addBasicElement(image);
        image.onAttributesInitialized();
        final StaticLayoutData element31 = new StaticLayoutData();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAlign(Alignment17.WEST);
        element31.setXOffset(9);
        image.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final PropertyElement checkOut17 = PropertyElement.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setAttribute("style");
        checkOut17.setName("localPlayer");
        checkOut17.setField("extraTurnScoreValue");
        image.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setValue("BonusTickActivated");
        element32.setElseValue("BonusTickUnactivated");
        checkOut17.addBasicElement(element32);
        element32.onAttributesInitialized();
        final GreaterCondition element33 = new GreaterCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setValue("-1");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        checkOut17.onChildrenAdded();
        image.onChildrenAdded();
        final String id2 = "extraTurnScoreImage2";
        final Image image2 = new Image();
        image2.onCheckOut();
        image2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, image2);
        }
        image2.setExpandable(false);
        checkOut16.addBasicElement(image2);
        image2.onAttributesInitialized();
        final StaticLayoutData element34 = new StaticLayoutData();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAlign(Alignment17.CENTER);
        image2.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("style");
        checkOut18.setName("localPlayer");
        checkOut18.setField("extraTurnScoreValue");
        image2.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ConditionResult element35 = new ConditionResult();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setValue("BonusTickActivated");
        element35.setElseValue("BonusTickUnactivated");
        checkOut18.addBasicElement(element35);
        element35.onAttributesInitialized();
        final GreaterCondition element36 = new GreaterCondition();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setValue("0");
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        checkOut18.onChildrenAdded();
        image2.onChildrenAdded();
        final String id3 = "extraTurnScoreImage3";
        final Image image3 = new Image();
        image3.onCheckOut();
        image3.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, image3);
        }
        image3.setExpandable(false);
        checkOut16.addBasicElement(image3);
        image3.onAttributesInitialized();
        final StaticLayoutData element37 = new StaticLayoutData();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setAlign(Alignment17.EAST);
        element37.setXOffset(-9);
        image3.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setAttribute("style");
        checkOut19.setName("localPlayer");
        checkOut19.setField("extraTurnScoreValue");
        image3.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final ConditionResult element38 = new ConditionResult();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setValue("BonusTickActivated");
        element38.setElseValue("BonusTickUnactivated");
        checkOut19.addBasicElement(element38);
        element38.onAttributesInitialized();
        final GreaterCondition element39 = new GreaterCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setValue("1");
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        element38.onChildrenAdded();
        checkOut19.onChildrenAdded();
        image3.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Image element40 = new Image();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setStyle("TimeBonusIcon");
        checkOut13.addBasicElement(element40);
        element40.onAttributesInitialized();
        final StaticLayoutData element41 = new StaticLayoutData();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setAlign(Alignment17.WEST);
        element40.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        element40.onChildrenAdded();
        checkOut13.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut20.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(35, 0, 0, 0));
        appearance5.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance5.onChildrenAdded();
        final StaticLayoutData element42 = new StaticLayoutData();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setAlign(Alignment17.SOUTH);
        checkOut20.addBasicElement(element42);
        element42.onAttributesInitialized();
        element42.onChildrenAdded();
        this.method0(checkOut20);
        this.method1(checkOut20);
        this.method20(checkOut20);
        checkOut20.onChildrenAdded();
        this.method21(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteLeftArrow");
        element.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.timeline:setPreviousPlayer");
        element.setOnMousePress(onMousePress);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(20, 0, 0, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StackList element = new StackList();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setHorizontal(true);
        element.setNeedsScissor(false);
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("content");
        checkOut.setName("fight.timeline");
        checkOut.setField("fighters");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.timeline:selectFighterInTimeline(fighterOne)");
        checkOut3.setOnMousePress(onMousePress);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.timeline:highlightFighterInTimeline(fighterOne);popup(extraTurnScorePopup)");
        checkOut3.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.timeline:unhighlightFighterInTimeline(fighterOne);closePopup");
        checkOut3.setOnMouseExit(onMouseExit);
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("visible");
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ConditionResult element8 = new ConditionResult();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final EqualCondition element9 = new EqualCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("value");
        checkOut4.setName("selectedFighter");
        element9.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        checkOut3.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("SelectedFighterContainer");
        checkOut3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.NORTH);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(90, 0));
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment17.CENTER);
        checkOut5.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut5.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut5.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(60, 0, 0, 0));
        appearance.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.SOUTH);
        checkOut7.setHorizontal(false);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setExpandable(false);
        checkOut8.setPrefSize(new Dimension(80, 0));
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.CENTER);
        checkOut8.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut8.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 3, 0, 5));
        appearance2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element16 = new StaticLayout();
        element16.onCheckOut();
        element16.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(100.0f, 6));
        checkOut10.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut10.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final PlainBackground element18 = new PlainBackground();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance3.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 1, 0, 1));
        appearance3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance3.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final ProgressBar element19 = new ProgressBar();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setUseIncreaseProgressTween(false);
        element19.setUseDecreaseProgressTween(true);
        element19.setNonBlocking(false);
        element19.setValue(1.0f);
        element19.setTweenDuration(1000L);
        element19.setStyle("hp");
        checkOut8.addBasicElement(element19);
        element19.onAttributesInitialized();
        final StaticLayoutData element20 = new StaticLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment17.CENTER);
        element20.setSize(new Dimension(100.0f, 8));
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance4 = element19.getAppearance();
        appearance4.setElementMap(elementMap);
        element19.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 1, 0, 0));
        appearance4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut13 = PropertyElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("selectedFighter");
        checkOut13.setAttribute("maxBound");
        checkOut13.setField("characteristics/HP/max");
        element19.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("selectedFighter");
        checkOut14.setAttribute("value");
        checkOut14.setField("characteristics/HP/value");
        element19.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element19.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setStyle("TimeLineProgressBar");
        checkOut8.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final StaticLayoutData element21 = new StaticLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment17.CENTER);
        element21.setSize(new Dimension(100.0f, 8));
        checkOut15.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        checkOut15.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("title");
        element22.setExpandable(false);
        element22.setMinWidth(1);
        element22.setMaxWidth(125);
        element22.setMultiline(false);
        checkOut5.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final DecoratorAppearance appearance5 = element22.getAppearance();
        appearance5.setElementMap(elementMap);
        element22.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(3, 0, 0, 0));
        appearance5.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element22.onChildrenAdded();
        final String id = "stateContainer";
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut17);
        }
        checkOut5.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        checkOut17.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final String id2 = "statePopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.NORTH_WEST);
        checkOut17.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setPrefSize(new Dimension(10, 0));
        checkOut18.setStyle("popup");
        popupElement.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut19.setAlign(Alignment9.NORTH);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setPrefSize(new Dimension(150, 0));
        checkOut18.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut20.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element26 = new Padding();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setInsets(new Insets(3, 3, 3, 3));
        appearance6.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        appearance6.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut20.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final Image element27 = new Image();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setExpandable(false);
        element27.setScaled(true);
        element27.setDisplaySize(new Dimension(48, 48));
        element27.setNonBlocking(true);
        checkOut22.addBasicElement(element27);
        element27.onAttributesInitialized();
        final RowLayoutData element28 = new RowLayoutData();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment9.NORTH);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final PixmapElement checkOut23 = PixmapElement.checkOut();
        checkOut23.setElementMap(elementMap);
        element27.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("describedRunningEffect");
        checkOut24.setLocal(true);
        checkOut24.setField("iconUrl");
        checkOut24.setAttribute("texture");
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        checkOut23.onChildrenAdded();
        element27.onChildrenAdded();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut22.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut25.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut25.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut26 = Margin.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setInsets(new Insets(0, 3, 0, 0));
        appearance7.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut27 = RowLayout.checkOut();
        checkOut27.setAlign(Alignment9.NORTH);
        checkOut27.setHorizontal(false);
        checkOut25.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        final Container checkOut28 = Container.checkOut();
        checkOut28.setElementMap(elementMap);
        checkOut28.setStyle("smallDarkBackground");
        checkOut28.setPrefSize(new Dimension(0, 20));
        checkOut28.setExpandable(false);
        checkOut25.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut28.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut28.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut29 = Margin.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setInsets(new Insets(2, 0, 2, 0));
        appearance8.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        appearance8.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("whiteBold11");
        element29.setNonBlocking(true);
        checkOut28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element29.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.WEST);
        element29.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setInsets(new Insets(0, 5, 0, 5));
        appearance9.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        appearance9.onChildrenAdded();
        final PropertyElement checkOut31 = PropertyElement.checkOut();
        checkOut31.setElementMap(elementMap);
        checkOut31.setName("describedRunningEffect");
        checkOut31.setLocal(true);
        checkOut31.setAttribute("text");
        checkOut31.setField("nameAndLevel");
        element29.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut28.onChildrenAdded();
        final Container checkOut32 = Container.checkOut();
        checkOut32.setElementMap(elementMap);
        checkOut32.setExpandable(false);
        checkOut32.setPrefSize(new Dimension(0, 20));
        checkOut32.setStyle("smallDarkBackground");
        checkOut25.addBasicElement(checkOut32);
        checkOut32.onAttributesInitialized();
        final DecoratorAppearance appearance10 = checkOut32.getAppearance();
        appearance10.setElementMap(elementMap);
        checkOut32.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final Margin checkOut33 = Margin.checkOut();
        checkOut33.setElementMap(elementMap);
        checkOut33.setInsets(new Insets(2, 0, 2, 0));
        appearance10.addBasicElement(checkOut33);
        checkOut33.onAttributesInitialized();
        checkOut33.onChildrenAdded();
        final Padding element30 = new Padding();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setInsets(new Insets(0, 5, 0, 5));
        appearance10.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        appearance10.onChildrenAdded();
        this.method2(checkOut32);
        this.method3(checkOut32);
        this.method4(checkOut32);
        this.method5(checkOut32);
        checkOut32.onChildrenAdded();
        checkOut25.onChildrenAdded();
        checkOut22.onChildrenAdded();
        this.method6(checkOut20);
        this.method7(checkOut20);
        checkOut20.onChildrenAdded();
        checkOut18.onChildrenAdded();
        popupElement.onChildrenAdded();
        this.method8(checkOut17);
        this.method9(checkOut17);
        checkOut17.onChildrenAdded();
        checkOut5.onChildrenAdded();
        this.method10(checkOut3);
        this.method11(checkOut3);
        checkOut3.onChildrenAdded();
        this.method12(checkOut2);
        checkOut2.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayout checkOut = RowLayout.checkOut();
        checkOut.setAlign(Alignment9.WEST);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return null;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedRunningEffect");
        checkOut.setLocal(true);
        checkOut.setAttribute("visible");
        checkOut.setField("remainingDurationText");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setStyle("whiteBold");
        element.setText("%duration% ".replace("%duration%", Xulor.getInstance().getTranslatedString("duration")));
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("white");
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("describedRunningEffect");
        checkOut.setLocal(true);
        checkOut.setAttribute("text");
        checkOut.setField("remainingDurationText");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedRunningEffect");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("remainingDurationText");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("smallDarkBackground");
        checkOut.setPrefSize(new Dimension(0, 20));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("isInFight");
        checkOut2.setAttribute("visible");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final FalseCondition element3 = new FalseCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("describedRunningEffect");
        checkOut3.setLocal(true);
        checkOut3.setAttribute("comparedValue");
        checkOut3.setField("description");
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(2, 0, 2, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("narrow12");
        element8.setNonBlocking(true);
        element8.setMinWidth(1);
        element8.setMaxWidth(230);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element8.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("describedRunningEffect");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("description");
        element8.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setStyle("smallDarkBackground");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedRunningEffect");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("effects");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(2, 0, 2, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("white11");
        element4.setMinWidth(1);
        element4.setMaxWidth(230);
        element4.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element4.setOnClick(onClick);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element4.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element4.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("describedRunningEffect");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("text");
        checkOut4.setField("effects");
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("visible");
        checkOut.setName("selectedFighter");
        checkOut.setField("allStates");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 3, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, -2));
        element2.setAlign(Alignment17.SOUTH);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("stateBarContainerLeft");
        element3.setExpandable(false);
        checkOut2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("stateBarContainerCenter");
        element4.setScaled(true);
        element4.setExpandable(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("stateBarContainerRight");
        element5.setExpandable(false);
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final List element6 = new List();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setCellSize(new Dimension(34, 42));
        element6.setExpandable(false);
        element6.setHorizontal(false);
        element6.setAutoIdealSize(true);
        element6.setPrefSize(new Dimension(34, 42));
        element6.setNonBlocking(true);
        element6.setIdealSizeMinRows(1);
        element6.setIdealSizeMaxRows(2);
        element6.setIdealSizeMinColumns(1);
        element6.setIdealSizeMaxColumns(4);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.controlCenter:openRunningEffectDescription");
        element6.setOnItemClick(onItemClick);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(statePopup)");
        element6.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("wakfu.popupInfos:closePopup");
        element6.setOnItemOut(onItemOut);
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setSize(new Dimension(100.0f, 100.0f));
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance2 = element6.getAppearance();
        appearance2.setElementMap(elementMap);
        element6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 5, 0, 5));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemRenderer element8 = new ItemRenderer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element6.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ItemCondition element10 = new ItemCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final NotNullCondition element11 = new NotNullCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        element8.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element12 = new StaticLayout();
        element12.onCheckOut();
        checkOut5.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("white2");
        checkOut6.setExpandable(false);
        checkOut6.setNonBlocking(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(32, 32));
        element13.setAlign(Alignment17.NORTH);
        checkOut6.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element14 = new Padding();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setInsets(new Insets(2, 2, 2, 2));
        appearance3.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayout element15 = new StaticLayout();
        element15.onCheckOut();
        element15.setAdaptToContentSize(true);
        checkOut6.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setExpandable(false);
        element16.setScaled(true);
        element16.setDisplaySize(new Dimension(24, 24));
        element16.setNonBlocking(true);
        checkOut6.addBasicElement(element16);
        element16.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment17.CENTER);
        element17.setSize(new Dimension(100.0f, 100.0f));
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut7 = PixmapElement.checkOut();
        checkOut7.setElementMap(elementMap);
        element16.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setField("iconUrl");
        element18.setAttribute("texture");
        checkOut7.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut7.onChildrenAdded();
        element16.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setStyle("backgroundPopupLight");
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("visible");
        element19.setField("stackSize");
        checkOut8.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final GreaterCondition element21 = new GreaterCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setValue("1");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut8.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element22 = new Padding();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setInsets(new Insets(2, 2, 2, 2));
        appearance4.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        appearance4.onChildrenAdded();
        final StaticLayoutData element23 = new StaticLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment17.SOUTH_EAST);
        element23.setSize(new Dimension(-2, -2));
        element23.setXOffset(3);
        element23.setYOffset(-3);
        checkOut8.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final Label element24 = new Label();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setStyle("White10Bordered");
        element24.setExpandable(false);
        element24.setNonBlocking(true);
        element24.setMaxWidth(30);
        element24.setEnableAutoZoomShrink(true);
        checkOut8.addBasicElement(element24);
        element24.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element24.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.CENTER);
        element24.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final ItemElement element25 = new ItemElement();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAttribute("text");
        element25.setField("stackSize");
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("backgroundPopupLight");
        checkOut5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setSize(new Dimension(-2, -2));
        element26.setAlign(Alignment17.SOUTH);
        checkOut9.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("visible");
        element27.setField("remainingDuration");
        checkOut9.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ConditionResult element28 = new ConditionResult();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final NotEqualCondition element29 = new NotEqualCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setValue("");
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut9.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element30 = new Padding();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setInsets(new Insets(0, 3, 0, 3));
        appearance6.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        appearance6.onChildrenAdded();
        final TextView element31 = new TextView();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("white");
        element31.setExpandable(false);
        element31.setNonBlocking(true);
        checkOut9.addBasicElement(element31);
        element31.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element31.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlign(Alignment9.CENTER);
        element31.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("text");
        element32.setField("remainingDuration");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element8.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("selectedFighter");
        checkOut10.setAttribute("content");
        checkOut10.setField("allStates");
        element6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.NORTH_WEST);
        element.setXOffset(24);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setDisplaySize(new Dimension(55, 55));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setSize(new Dimension(55, 55));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PixmapElement checkOut2 = PixmapElement.checkOut();
        checkOut2.setElementMap(elementMap);
        element3.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element5 = new ItemElement();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAttribute("texture");
        element5.setField("timelineIllustrationUrl");
        checkOut2.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("shader");
        element6.setField("isKO");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("HavenWorldEntryDisabled");
        element7.setElseValue("");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final TrueCondition element8 = new TrueCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("TimeLinePortrait");
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment17.CENTER);
        element9.setSize(new Dimension(60, 60));
        checkOut3.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setField("team");
        element10.setAttribute("modulationColor");
        appearance.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setValue("#ca3f3f");
        element11.setElseValue("#46e3ec");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final EqualCondition element12 = new EqualCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setValue("0");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.NORTH_WEST);
        checkOut4.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final StaticLayout element14 = new StaticLayout();
        element14.onCheckOut();
        element14.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("FighterColorPoint");
        checkOut4.addBasicElement(element15);
        element15.onAttributesInitialized();
        final StaticLayoutData element16 = new StaticLayoutData();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAlign(Alignment17.CENTER);
        element16.setSize(new Dimension(100.0f, 100.0f));
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final DecoratorAppearance appearance2 = element15.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(0.7019608f, 0.0f, 1.0f, 1.0f));
        element15.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("modulationColor");
        element17.setField("colorPoint");
        appearance2.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        appearance2.onChildrenAdded();
        element15.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("SmallBoldBordered");
        checkOut4.addBasicElement(element18);
        element18.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("text");
        element20.setField("timelineIndex");
        element18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final TextView element21 = new TextView();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("SmallBoldBordered");
        checkOut.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.SOUTH_WEST);
        element22.setYOffset(5);
        element22.setXOffset(5);
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("level");
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element21.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.NORTH_EAST);
        element.setXOffset(-31);
        element.setYOffset(-3);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.WEST);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("iconAP");
        element2.setExpandable(false);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("smallTitle");
        element3.setExpandable(false);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("text");
        checkOut5.setName("selectedFighter");
        checkOut5.setField("characteristics/AP/value");
        element3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setAlign(Alignment9.WEST);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Image element4 = new Image();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("iconMP");
        element4.setExpandable(false);
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("smallTitle");
        element5.setExpandable(false);
        checkOut6.addBasicElement(element5);
        element5.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("text");
        checkOut8.setName("selectedFighter");
        checkOut8.setField("characteristics/MP/value");
        element5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("iconWP");
        element6.setExpandable(false);
        checkOut9.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("smallTitle");
        element7.setExpandable(false);
        checkOut9.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("text");
        checkOut11.setName("selectedFighter");
        checkOut11.setField("characteristics/WP/value");
        element7.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.timeline:selectFighterInTimeline(fighterOne)");
        checkOut.setOnMousePress(onMousePress);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.timeline:highlightFighterInTimeline(fighterOne);popup(extraTurnScorePopup)");
        checkOut.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("wakfu.timeline:unhighlightFighterInTimeline(fighterOne);closePopup");
        checkOut.setOnMouseExit(onMouseExit);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotCondition element3 = new NotCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final EqualCondition element4 = new EqualCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("value");
        checkOut2.setName("selectedFighter");
        element4.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment17.NORTH);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(2, 0, 0, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut4.setHorizontal(false);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        element6.setAdaptToContentSize(true);
        checkOut5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setDisplaySize(new Dimension(50, 50));
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.CENTER);
        element8.setSize(new Dimension(50, 50));
        element8.setYOffset(2);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PixmapElement checkOut6 = PixmapElement.checkOut();
        checkOut6.setElementMap(elementMap);
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("texture");
        element9.setField("timelineIllustrationUrl");
        checkOut6.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("shader");
        element10.setField("isKO");
        element7.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ConditionResult element11 = new ConditionResult();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setValue("HavenWorldEntryDisabled");
        element11.setElseValue("");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final TrueCondition element12 = new TrueCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element7.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setStyle("TimeLineCell");
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.CENTER);
        element13.setSize(new Dimension(50, 55));
        checkOut7.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setField("team");
        element14.setAttribute("modulationColor");
        appearance2.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setValue("#ca3f3f");
        element15.setElseValue("#46e3ec");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final EqualCondition element16 = new EqualCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setValue("0");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        appearance2.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final StaticLayoutData element17 = new StaticLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setSize(new Dimension(100.0f, -2));
        element17.setAlign(Alignment17.SOUTH);
        element17.setYOffset(4);
        checkOut8.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut8.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 6, 0, 6));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final StaticLayout element18 = new StaticLayout();
        element18.onCheckOut();
        element18.setAdaptToContentSize(true);
        checkOut8.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final StaticLayoutData element19 = new StaticLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment17.CENTER);
        element19.setSize(new Dimension(100.0f, 6));
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut10.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut10.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final PlainBackground element20 = new PlainBackground();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setColor(new Color(0.0f, 0.0f, 0.0f, 1.0f));
        appearance4.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 1, 0, 1));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final ProgressBar element21 = new ProgressBar();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setUseIncreaseProgressTween(false);
        element21.setUseDecreaseProgressTween(true);
        element21.setNonBlocking(false);
        element21.setValue(1.0f);
        element21.setTweenDuration(1000L);
        element21.setStyle("hp");
        checkOut8.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAlign(Alignment17.CENTER);
        element22.setSize(new Dimension(100.0f, 6));
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final DecoratorAppearance appearance5 = element21.getAppearance();
        appearance5.setElementMap(elementMap);
        element21.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 1, 0, 0));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("maxBound");
        element23.setField("characteristics/HP/max");
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("value");
        element24.setField("characteristics/HP/value");
        element21.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element21.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setStyle("TimeLineProgressBar");
        checkOut8.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final StaticLayoutData element25 = new StaticLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment17.CENTER);
        element25.setSize(new Dimension(100.0f, 6));
        checkOut13.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        checkOut13.onChildrenAdded();
        checkOut8.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final StaticLayoutData element26 = new StaticLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment17.NORTH_WEST);
        element26.setXOffset(2);
        element26.setYOffset(-2);
        checkOut14.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut14.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Image element28 = new Image();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("FighterColorPoint");
        checkOut14.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAlign(Alignment17.CENTER);
        element29.setSize(new Dimension(100.0f, 100.0f));
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final DecoratorAppearance appearance6 = element28.getAppearance();
        appearance6.setElementMap(elementMap);
        appearance6.setModulationColor(new Color(0.7019608f, 0.0f, 1.0f, 1.0f));
        element28.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("modulationColor");
        element30.setField("colorPoint");
        appearance6.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        appearance6.onChildrenAdded();
        element28.onChildrenAdded();
        final TextView element31 = new TextView();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("SmallBoldBordered");
        checkOut14.addBasicElement(element31);
        element31.onAttributesInitialized();
        final StaticLayoutData element32 = new StaticLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment17.CENTER);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("text");
        element33.setField("timelineIndex");
        element31.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element31.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut5.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final StaticLayoutData element34 = new StaticLayoutData();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAlign(Alignment17.SOUTH);
        element34.setSize(new Dimension(100.0f, -2));
        checkOut15.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final String id = "statePopup2";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.EAST);
        popupElement.setHotSpotPosition(Alignment9.WEST);
        checkOut15.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setPrefSize(new Dimension(10, 0));
        checkOut16.setStyle("popup");
        popupElement.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(false);
        checkOut17.setAlign(Alignment9.NORTH);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setPrefSize(new Dimension(150, 0));
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut18.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut18.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Padding element35 = new Padding();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setInsets(new Insets(3, 3, 3, 3));
        appearance7.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut18.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final Image element36 = new Image();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setExpandable(false);
        element36.setScaled(true);
        element36.setDisplaySize(new Dimension(48, 48));
        element36.setNonBlocking(true);
        checkOut20.addBasicElement(element36);
        element36.onAttributesInitialized();
        final RowLayoutData element37 = new RowLayoutData();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setAlign(Alignment9.NORTH);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final PixmapElement checkOut21 = PixmapElement.checkOut();
        checkOut21.setElementMap(elementMap);
        element36.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("describedRunningEffect");
        checkOut22.setLocal(true);
        checkOut22.setField("iconUrl");
        checkOut22.setAttribute("texture");
        checkOut21.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        checkOut21.onChildrenAdded();
        element36.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut20.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final DecoratorAppearance appearance8 = checkOut23.getAppearance();
        appearance8.setElementMap(elementMap);
        checkOut23.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut24 = Margin.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setInsets(new Insets(0, 3, 0, 0));
        appearance8.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        appearance8.onChildrenAdded();
        final RowLayout checkOut25 = RowLayout.checkOut();
        checkOut25.setAlign(Alignment9.NORTH);
        checkOut25.setHorizontal(false);
        checkOut23.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final Container checkOut26 = Container.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setStyle("smallDarkBackground");
        checkOut26.setPrefSize(new Dimension(0, 20));
        checkOut26.setExpandable(false);
        checkOut23.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        final DecoratorAppearance appearance9 = checkOut26.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut26.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        this.method13(appearance9);
        appearance9.onChildrenAdded();
        this.method14(checkOut26);
        checkOut26.onChildrenAdded();
        this.method15(checkOut23);
        checkOut23.onChildrenAdded();
        checkOut20.onChildrenAdded();
        this.method16(checkOut18);
        this.method17(checkOut18);
        checkOut18.onChildrenAdded();
        checkOut16.onChildrenAdded();
        popupElement.onChildrenAdded();
        this.method18(checkOut15);
        this.method19(checkOut15);
        checkOut15.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(2, 0, 2, 0));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteBold11");
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 5, 0, 5));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedRunningEffect");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("text");
        checkOut2.setField("nameAndLevel");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setPrefSize(new Dimension(0, 20));
        checkOut.setStyle("smallDarkBackground");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(2, 0, 2, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(0, 5, 0, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("describedRunningEffect");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("visible");
        checkOut4.setField("remainingDurationText");
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        element4.setStyle("whiteBold");
        element4.setText("%duration% ".replace("%duration%", Xulor.getInstance().getTranslatedString("duration")));
        element4.setNonBlocking(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("white");
        element5.setNonBlocking(true);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setName("describedRunningEffect");
        checkOut5.setLocal(true);
        checkOut5.setAttribute("text");
        checkOut5.setField("remainingDurationText");
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("describedRunningEffect");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("visible");
        checkOut6.setField("remainingDurationText");
        element5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final ConditionResult element6 = new ConditionResult();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NotNullCondition element7 = new NotNullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("smallDarkBackground");
        checkOut.setPrefSize(new Dimension(0, 20));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("isInFight");
        checkOut2.setAttribute("visible");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final AndCondition element2 = new AndCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final FalseCondition element3 = new FalseCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("describedRunningEffect");
        checkOut3.setLocal(true);
        checkOut3.setAttribute("comparedValue");
        checkOut3.setField("description");
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final NotNullCondition element6 = new NotNullCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(2, 0, 2, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Padding element7 = new Padding();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        appearance.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("narrow12");
        element8.setNonBlocking(true);
        element8.setMinWidth(1);
        element8.setMaxWidth(230);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element8.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlign(Alignment9.WEST);
        element8.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut5 = ColorElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setColor(new Color(0.98f, 0.77f, 0.0f, 1.0f));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("describedRunningEffect");
        checkOut6.setLocal(true);
        checkOut6.setAttribute("text");
        checkOut6.setField("description");
        element8.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        checkOut.setStyle("smallDarkBackground");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("describedRunningEffect");
        checkOut2.setLocal(true);
        checkOut2.setAttribute("visible");
        checkOut2.setField("effects");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut2.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(2, 0, 2, 0));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(5, 5, 5, 5));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("white11");
        element4.setMinWidth(1);
        element4.setMaxWidth(230);
        element4.setEnableOnlySelectablePartInteraction(true);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element4.setOnClick(onClick);
        final MouseEnteredListener onMouseEnter = new MouseEnteredListener();
        onMouseEnter.setCallBackFunc("wakfu.spellDetails:processText(container,stateDetailPopup)");
        element4.setOnMouseEnter(onMouseEnter);
        final MouseExitedListener onMouseExit = new MouseExitedListener();
        onMouseExit.setCallBackFunc("xulor:closePopup");
        element4.setOnMouseExit(onMouseExit);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("describedRunningEffect");
        checkOut4.setLocal(true);
        checkOut4.setAttribute("text");
        checkOut4.setField("effects");
        element4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element4.getAppearance();
        appearance2.setElementMap(elementMap);
        element4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 0, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("allStates");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final NotNullCondition element3 = new NotNullCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final List element = new List();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAutoIdealSize(true);
        element.setCellSize(new Dimension(22, 22));
        element.setIdealSizeMinRows(1);
        element.setIdealSizeMaxRows(4);
        element.setIdealSizeMinColumns(1);
        element.setIdealSizeMaxColumns(2);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.controlCenter:openRunningEffectDescription");
        element.setOnItemClick(onItemClick);
        final ItemOverListener onItemOver = new ItemOverListener();
        onItemOver.setCallBackFunc("wakfu.popupInfos:showPopup(statePopup2)");
        element.setOnItemOver(onItemOver);
        final ItemOutListener onItemOut = new ItemOutListener();
        onItemOut.setCallBackFunc("wakfu.popupInfos:closePopup");
        element.setOnItemOut(onItemOut);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemRenderer element2 = new ItemRenderer();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element2.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element6 = new StaticLayout();
        element6.onCheckOut();
        checkOut.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Image element7 = new Image();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setScaled(true);
        element7.setDisplaySize(new Dimension(22, 22));
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final StaticLayoutData element8 = new StaticLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment17.CENTER);
        element8.setSize(new Dimension(100.0f, 100.0f));
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PixmapElement checkOut2 = PixmapElement.checkOut();
        checkOut2.setElementMap(elementMap);
        element7.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setField("iconUrl");
        element9.setAttribute("texture");
        checkOut2.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element7.onChildrenAdded();
        final TextView element10 = new TextView();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("bold");
        element10.setNonBlocking(true);
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment17.SOUTH_WEST);
        element11.setSize(new Dimension(100.0f, -2));
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("isInfiniteDuration");
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final FalseCondition element14 = new FalseCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("remainingDuration");
        element10.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut.onChildrenAdded();
        element2.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("content");
        element16.setField("allStates");
        element.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("whiteRightArrow");
        element.setExpandable(false);
        final MousePressedListener onMousePress = new MousePressedListener();
        onMousePress.setCallBackFunc("wakfu.timeline:setNextPlayer");
        element.setOnMousePress(onMousePress);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(20, 5, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("TimeLineArrow");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.NORTH);
        element.setSize(new Dimension(100.0f, 26));
        element.setXOffset(10);
        element.setYOffset(-17);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
}
