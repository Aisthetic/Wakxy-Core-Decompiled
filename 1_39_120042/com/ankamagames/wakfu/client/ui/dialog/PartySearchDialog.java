package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.util.*;
import com.ankamagames.xulor2.core.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.decorator.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.event.listener.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.core.renderer.condition.*;

public class PartySearchDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public PartySearchDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Window window = new Window();
        window.onCheckOut();
        window.setElementMap(elementMap);
        window.setPack(true);
        window.setPrefSize(new Dimension(955, 600));
        window.setNonBlocking(true);
        window.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        window.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        window.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final String id = "resultContainer";
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut2);
        }
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element4 = new StaticLayout();
        element4.onCheckOut();
        element4.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("tiledScroll");
        checkOut3.setExpandable(false);
        checkOut3.setPrefSize(new Dimension(400, 0));
        checkOut2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element5 = new StaticLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setSize(new Dimension(100.0f, 100.0f));
        element5.setAlign(Alignment17.CENTER);
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(5, 10, 5, 10));
        appearance.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(20, 20, 19, 20));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut5.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final List element7 = new List();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setCellSize(new Dimension(400, 140));
        element7.setHorizontal(false);
        element7.setPrefSize(new Dimension(400, 0));
        element7.setScrollBar(true);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("partyOccupationsSearch");
        checkOut6.setAttribute("content");
        checkOut6.setField("requesters");
        element7.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemRenderer element8 = new ItemRenderer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ConditionResult element9 = new ConditionResult();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ItemCondition element10 = new ItemCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final NotNullCondition element11 = new NotNullCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        final String id2 = "requester";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        element8.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("value");
        data.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        data.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        element8.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(100.0f, 100.0f));
        checkOut7.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut9.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance2.onChildrenAdded();
        final TextView element14 = new TextView();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("dark");
        element14.setMinWidth(300);
        element14.setMaxWidth(300);
        checkOut9.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("description");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final Spacer element16 = new Spacer();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        checkOut9.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut9.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.NORTH);
        checkOut11.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Label element18 = new Label();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("dark");
        element18.setText("%partySearch.mood%".replace("%partySearch.mood%", Xulor.getInstance().getTranslatedString("partySearch.mood")));
        element18.setExpandable(false);
        element18.setMinWidth(1);
        element18.setMaxWidth(75);
        checkOut11.addBasicElement(element18);
        element18.onAttributesInitialized();
        final RowLayoutData element19 = new RowLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment9.WEST);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setExpandable(false);
        element20.setDisplaySize(new Dimension(24, 24));
        checkOut11.addBasicElement(element20);
        element20.onAttributesInitialized();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.WEST);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("style");
        element22.setField("mood/style");
        element20.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        element20.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setExpandable(false);
        checkOut7.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        checkOut13.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setPrefSize(new Dimension(60, 0));
        checkOut14.setExpandable(false);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut14.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 0, 0, 0));
        appearance3.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(false);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final StaticLayout element24 = new StaticLayout();
        element24.onCheckOut();
        element24.setAdaptToContentSize(true);
        checkOut17.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        checkOut17.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final Image element26 = new Image();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("IconUnknownEmote");
        checkOut17.addBasicElement(element26);
        element26.onAttributesInitialized();
        final StaticLayoutData element27 = new StaticLayoutData();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setSize(new Dimension(100.0f, 100.0f));
        element27.setAlign(Alignment17.CENTER);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance4 = element26.getAppearance();
        appearance4.setElementMap(elementMap);
        appearance4.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element26.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element26.onChildrenAdded();
        final Image element28 = new Image();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setDisplaySize(new Dimension(48, 48));
        checkOut17.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setSize(new Dimension(-2, -2));
        element29.setAlign(Alignment17.CENTER);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final PixmapElement checkOut18 = PixmapElement.checkOut();
        checkOut18.setElementMap(elementMap);
        element28.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("texture");
        element30.setField("member0/breed/iconUrl");
        checkOut18.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut17.onChildrenAdded();
        final Label element31 = new Label();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("darkBold");
        element31.setExpandable(false);
        element31.setMaxWidth(60);
        checkOut14.addBasicElement(element31);
        element31.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element31.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.CENTER);
        element31.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("text");
        element32.setField("member0/level");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        final Image element33 = new Image();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setDisplaySize(new Dimension(24, 24));
        checkOut14.addBasicElement(element33);
        element33.onAttributesInitialized();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("style");
        element34.setField("member0/role/style");
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final ItemElement element35 = new ItemElement();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAttribute("visible");
        element35.setField("member0");
        element33.addBasicElement(element35);
        element35.onAttributesInitialized();
        final ConditionResult element36 = new ConditionResult();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final NotNullCondition element37 = new NotNullCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        element33.onChildrenAdded();
        final RowLayoutData element38 = new RowLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setAlign(Alignment9.NORTH);
        checkOut14.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        checkOut14.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setPrefSize(new Dimension(60, 0));
        checkOut19.setExpandable(false);
        checkOut13.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut19.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance6.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut19.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final StaticLayout element39 = new StaticLayout();
        element39.onCheckOut();
        element39.setAdaptToContentSize(true);
        checkOut22.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final RowLayoutData element40 = new RowLayoutData();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAlign(Alignment9.CENTER);
        checkOut22.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        final Image element41 = new Image();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setStyle("IconUnknownEmote");
        checkOut22.addBasicElement(element41);
        element41.onAttributesInitialized();
        final StaticLayoutData element42 = new StaticLayoutData();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setSize(new Dimension(100.0f, 100.0f));
        element42.setAlign(Alignment17.CENTER);
        element41.addBasicElement(element42);
        element42.onAttributesInitialized();
        element42.onChildrenAdded();
        final DecoratorAppearance appearance7 = element41.getAppearance();
        appearance7.setElementMap(elementMap);
        appearance7.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element41.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        element41.onChildrenAdded();
        final Image element43 = new Image();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element43.setDisplaySize(new Dimension(48, 48));
        checkOut22.addBasicElement(element43);
        element43.onAttributesInitialized();
        final StaticLayoutData element44 = new StaticLayoutData();
        element44.onCheckOut();
        element44.setElementMap(elementMap);
        element44.setSize(new Dimension(-2, -2));
        element44.setAlign(Alignment17.CENTER);
        element43.addBasicElement(element44);
        element44.onAttributesInitialized();
        element44.onChildrenAdded();
        this.method0(element43);
        element43.onChildrenAdded();
        checkOut22.onChildrenAdded();
        this.method1(checkOut19);
        this.method2(checkOut19);
        this.method3(checkOut19);
        checkOut19.onChildrenAdded();
        this.method4(checkOut13);
        this.method5(checkOut13);
        this.method6(checkOut13);
        this.method7(checkOut13);
        this.method8(checkOut13);
        this.method9(checkOut13);
        checkOut13.onChildrenAdded();
        this.method10(checkOut7);
        checkOut7.onChildrenAdded();
        element8.onChildrenAdded();
        this.method11(element7);
        element7.onChildrenAdded();
        checkOut3.onChildrenAdded();
        this.method12(checkOut2);
        this.method13(checkOut2);
        checkOut2.onChildrenAdded();
        this.method14(checkOut);
        checkOut.onChildrenAdded();
        this.method30(window);
        this.method85(window);
        this.method86(window);
        this.method87(window);
        window.onChildrenAdded();
        return window;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("texture");
        element.setField("member1/breed/iconUrl");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("darkBold");
        element.setExpandable(false);
        element.setMaxWidth(60);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.CENTER);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("member1/level");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setDisplaySize(new Dimension(24, 24));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("style");
        element2.setField("member1/role/style");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("visible");
        element3.setField("member1");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.NORTH);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(60, 0));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("IconUnknownEmote");
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element4.setAlign(Alignment17.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("texture");
        element7.setField("member2/breed/iconUrl");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("darkBold");
        element8.setExpandable(false);
        element8.setMaxWidth(60);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("member2/level");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setDisplaySize(new Dimension(24, 24));
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("style");
        element11.setField("member2/role/style");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("member2");
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(60, 0));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("IconUnknownEmote");
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element4.setAlign(Alignment17.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("texture");
        element7.setField("member3/breed/iconUrl");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("darkBold");
        element8.setExpandable(false);
        element8.setMaxWidth(60);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("member3/level");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setDisplaySize(new Dimension(24, 24));
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("style");
        element11.setField("member3/role/style");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("member3");
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(60, 0));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("IconUnknownEmote");
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element4.setAlign(Alignment17.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("texture");
        element7.setField("member4/breed/iconUrl");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("darkBold");
        element8.setExpandable(false);
        element8.setMaxWidth(60);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("member4/level");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setDisplaySize(new Dimension(24, 24));
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("style");
        element11.setField("member4/role/style");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("member4");
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method7(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(60, 0));
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut4.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut4.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("IconUnknownEmote");
        checkOut4.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element4.setAlign(Alignment17.CENTER);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("texture");
        element7.setField("member5/breed/iconUrl");
        checkOut5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("darkBold");
        element8.setExpandable(false);
        element8.setMaxWidth(60);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element8.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("text");
        element9.setField("member5/level");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setDisplaySize(new Dimension(24, 24));
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("style");
        element11.setField("member5/role/style");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("visible");
        element12.setField("member5");
        element10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final NotNullCondition element14 = new NotNullCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element10.onChildrenAdded();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method8(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method9(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut3.setPrefSize(new Dimension(30, 25));
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Button element3 = new Button();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("yellow");
        element3.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.partySearch:group(requester)");
        element3.setOnClick(onClick);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(addToGroupPopup)");
        element3.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element3.setOnPopupHide(onPopupHide);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment17.CENTER);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(2, 2, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "addToGroupPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH_EAST);
        popupElement.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element3.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        popupElement.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final BorderLayoutData checkOut6 = BorderLayoutData.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setData(BorderLayoutData.Values.CENTER);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element5 = new Label();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("PopupInformation");
        element5.setText("%invitToJoinGroup%".replace("%invitToJoinGroup%", Xulor.getInstance().getTranslatedString("invitToJoinGroup")));
        checkOut5.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut5.onChildrenAdded();
        popupElement.onChildrenAdded();
        element3.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setNonBlocking(true);
        element6.setStyle("contactsIcon");
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.CENTER);
        element7.setSize(new Dimension(30, 30));
        element7.setYOffset(-2);
        element7.setXOffset(1);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(30, 25));
        checkOut.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final StaticLayout element8 = new StaticLayout();
        element8.onCheckOut();
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final Button element9 = new Button();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("yellow");
        element9.setExpandable(false);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.partySearch:talk(requester)");
        element9.setOnClick(onClick2);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(privateChatPopup)");
        element9.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide2);
        element9.setPrefSize(new Dimension(19, 19));
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment17.CENTER);
        element10.setSize(new Dimension(100.0f, 100.0f));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance3 = element9.getAppearance();
        appearance3.setElementMap(elementMap);
        element9.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 2, 2, 0));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final String id2 = "privateChatPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH_EAST);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH_WEST);
        element9.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement2.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final BorderLayoutData checkOut10 = BorderLayoutData.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setData(BorderLayoutData.Values.CENTER);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("PopupInformation");
        element11.setText("%createPrivateChat%".replace("%createPrivateChat%", Xulor.getInstance().getTranslatedString("createPrivateChat")));
        checkOut9.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element11.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.WEST);
        element11.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement2.onChildrenAdded();
        element9.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setNonBlocking(true);
        element12.setStyle("privateChat");
        element12.setScaled(true);
        element12.setDisplaySize(new Dimension(20, 20));
        checkOut7.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment17.CENTER);
        element13.setXOffset(2);
        element13.setYOffset(1);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut7.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method10(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("TiledScrollBottom");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method11(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method12(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("EncyclopediaPane");
        checkOut.setNonBlocking(true);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment17.CENTER);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method13(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, 100.0f));
        element.setAlign(Alignment17.WEST);
        element.setInitValue(true);
        element.setXOffset(70);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method14(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "selectedOccupationsContainer";
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut);
        }
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setStyle("white");
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final List element2 = new List();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setCellSize(new Dimension(100.0f, 64));
        element2.setHorizontal(false);
        element2.setScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_DISPLAY);
        element2.setPrefSize(new Dimension(420, 0));
        element2.setExpandable(false);
        checkOut2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(100.0f, 100.0f));
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final ItemRenderer element4 = new ItemRenderer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ConditionResult element5 = new ConditionResult();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final AndCondition element6 = new AndCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemCondition element7 = new ItemCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotNullCondition element8 = new NotNullCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final ItemCondition element9 = new ItemCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setField("monster");
        element6.addBasicElement(element9);
        element9.onAttributesInitialized();
        final NullCondition element10 = new NullCondition();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element4.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element11 = new PlainBackground();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        appearance.addBasicElement(element11);
        element11.onAttributesInitialized();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("color");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ConditionResult element13 = new ConditionResult();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setValue("0.37,0.44,0.43,1");
        element13.setElseValue("0.45,0.52,0.51,1");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ListCondition element14 = new ListCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setKey("evenIndex");
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final TrueCondition element15 = new TrueCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id2 = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut3.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("value");
        element16.setField("monster");
        data.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        data.onChildrenAdded();
        final String id3 = "dungeonView";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        checkOut3.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("value");
        element17.setField("dungeon");
        data2.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        data2.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("title");
        element18.setExpandable(false);
        element18.setMinWidth(180);
        element18.setMaxWidth(180);
        checkOut3.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element18.getAppearance();
        appearance2.setElementMap(elementMap);
        element18.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("text");
        checkOut4.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("text");
        element19.setField("name");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        element18.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final Container checkOut8 = Container.checkOut();
        checkOut8.setElementMap(elementMap);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(dungeonView)");
        checkOut8.setOnSelectionChange(onSelectionChange);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut8.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut8.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 10, 0, 5));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(true);
        checkOut8.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Image element21 = new Image();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("dungeonSmallIcon");
        element21.setExpandable(false);
        checkOut8.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element21.getAppearance();
        appearance4.setElementMap(elementMap);
        element21.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut11 = Margin.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final ItemElement element22 = new ItemElement();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setAttribute("modulationColor");
        element22.setField("dungeon/enabled");
        appearance4.addBasicElement(element22);
        element22.onAttributesInitialized();
        final ConditionResult element23 = new ConditionResult();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setValue("#ffffffff");
        element23.setElseValue("#ffffff77");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final TrueCondition element24 = new TrueCondition();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        appearance4.onChildrenAdded();
        element21.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut8.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("bold");
        element25.setExpandable(false);
        element25.setMinWidth(160);
        element25.setMaxWidth(160);
        checkOut12.addBasicElement(element25);
        element25.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.CENTER);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("dungeon/name");
        element25.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance5 = element25.getAppearance();
        appearance5.setElementMap(elementMap);
        element25.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        element25.onChildrenAdded();
        final TextView element28 = new TextView();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setExpandable(false);
        element28.setMinWidth(160);
        element28.setMaxWidth(160);
        checkOut12.addBasicElement(element28);
        element28.onAttributesInitialized();
        final RowLayoutData element29 = new RowLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAlign(Alignment9.CENTER);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("text");
        element30.setField("dungeon/level");
        element28.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final DecoratorAppearance appearance6 = element28.getAppearance();
        appearance6.setElementMap(elementMap);
        element28.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("text");
        checkOut15.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance6.onChildrenAdded();
        element28.onChildrenAdded();
        checkOut12.onChildrenAdded();
        final Spacer element31 = new Spacer();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        checkOut8.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final ToggleButton element32 = new ToggleButton();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setStyle("roundBlue");
        element32.setExpandable(false);
        final SelectionChangedListener onSelectionChange2 = new SelectionChangedListener();
        onSelectionChange2.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(dungeonView)");
        element32.setOnSelectionChange(onSelectionChange2);
        checkOut8.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ItemElement element33 = new ItemElement();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAttribute("visible");
        element33.setField("dungeon/enabled");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final ItemElement element34 = new ItemElement();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setAttribute("selected");
        element34.setField("dungeon/selected");
        element32.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        final RowLayoutData element35 = new RowLayoutData();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAlign(Alignment9.CENTER);
        element32.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setName("partyOccupations");
        checkOut16.setAttribute("enabled");
        checkOut16.setField("isLeader");
        element32.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element32.onChildrenAdded();
        final ItemElement element36 = new ItemElement();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAttribute("visible");
        element36.setField("dungeon/selected");
        checkOut8.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        checkOut8.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element4.onChildrenAdded();
        final ItemRenderer element37 = new ItemRenderer();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element2.addBasicElement(element37);
        element37.onAttributesInitialized();
        final ConditionResult element38 = new ConditionResult();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        final AndCondition element39 = new AndCondition();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        final ItemCondition element40 = new ItemCondition();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element39.addBasicElement(element40);
        element40.onAttributesInitialized();
        final NotNullCondition element41 = new NotNullCondition();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element40.addBasicElement(element41);
        element41.onAttributesInitialized();
        element41.onChildrenAdded();
        element40.onChildrenAdded();
        final ItemCondition element42 = new ItemCondition();
        element42.onCheckOut();
        element42.setElementMap(elementMap);
        element42.setField("dungeon");
        element39.addBasicElement(element42);
        element42.onAttributesInitialized();
        final NullCondition element43 = new NullCondition();
        element43.onCheckOut();
        element43.setElementMap(elementMap);
        element42.addBasicElement(element43);
        element43.onAttributesInitialized();
        element43.onChildrenAdded();
        element42.onChildrenAdded();
        element39.onChildrenAdded();
        element38.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        element37.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut17.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final PlainBackground element44 = new PlainBackground();
        element44.onCheckOut();
        element44.setElementMap(elementMap);
        appearance7.addBasicElement(element44);
        element44.onAttributesInitialized();
        final ItemElement element45 = new ItemElement();
        element45.onCheckOut();
        element45.setElementMap(elementMap);
        element45.setAttribute("color");
        element44.addBasicElement(element45);
        element45.onAttributesInitialized();
        final ConditionResult element46 = new ConditionResult();
        element46.onCheckOut();
        element46.setElementMap(elementMap);
        element46.setValue("0.37,0.44,0.43,1");
        element46.setElseValue("0.45,0.52,0.51,1");
        element45.addBasicElement(element46);
        element46.onAttributesInitialized();
        final ListCondition element47 = new ListCondition();
        element47.onCheckOut();
        element47.setElementMap(elementMap);
        element47.setKey("evenIndex");
        element46.addBasicElement(element47);
        element47.onAttributesInitialized();
        final TrueCondition element48 = new TrueCondition();
        element48.onCheckOut();
        element48.setElementMap(elementMap);
        element47.addBasicElement(element48);
        element48.onAttributesInitialized();
        element48.onChildrenAdded();
        element47.onChildrenAdded();
        element46.onChildrenAdded();
        element45.onChildrenAdded();
        element44.onChildrenAdded();
        appearance7.onChildrenAdded();
        this.method15(checkOut17);
        this.method16(checkOut17);
        this.method17(checkOut17);
        this.method18(checkOut17);
        checkOut17.onChildrenAdded();
        element37.onChildrenAdded();
        this.method19(element2);
        this.method24(element2);
        this.method25(element2);
        this.method26(element2);
        element2.onChildrenAdded();
        this.method27(checkOut2);
        this.method28(checkOut2);
        checkOut2.onChildrenAdded();
        this.method29(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method15(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        element.setField("monster");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method16(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "dungeonView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        element.setField("dungeon");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method17(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("title");
        element.setExpandable(false);
        element.setMinWidth(180);
        element.setMaxWidth(180);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method18(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(monsterView)");
        checkOut3.setOnSelectionChange(onSelectionChange);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 5));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("smallMonster");
        element.setExpandable(false);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("modulationColor");
        element2.setField("monster/enabled");
        appearance2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("#ffffffff");
        element3.setElseValue("#ffffff77");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("bold");
        element5.setExpandable(false);
        element5.setMinWidth(160);
        element5.setMaxWidth(160);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("monster/name");
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("text");
        checkOut9.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setMinWidth(160);
        element8.setMaxWidth(160);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.CENTER);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("monster/level");
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("text");
        checkOut10.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Spacer element11 = new Spacer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ToggleButton element12 = new ToggleButton();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("roundBlue");
        element12.setExpandable(false);
        final SelectionChangedListener onSelectionChange2 = new SelectionChangedListener();
        onSelectionChange2.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(monsterView)");
        element12.setOnSelectionChange(onSelectionChange2);
        checkOut3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("visible");
        element13.setField("monster/enabled");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("selected");
        element14.setField("monster/selected");
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("partyOccupations");
        checkOut11.setAttribute("enabled");
        checkOut11.setField("isLeader");
        element12.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element12.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("visible");
        element16.setField("monster/selected");
        checkOut3.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method19(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("color");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("0.37,0.44,0.43,1");
        element7.setElseValue("0.45,0.52,0.51,1");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ListCondition element8 = new ListCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setKey("evenIndex");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final TrueCondition element9 = new TrueCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("value");
        element10.setField("monster");
        data.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "dungeonView";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("dungeon");
        data2.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        data2.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("title");
        element12.setExpandable(false);
        element12.setMinWidth(180);
        element12.setMaxWidth(180);
        checkOut.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element12.getAppearance();
        appearance2.setElementMap(elementMap);
        element12.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("text");
        checkOut2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("name");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final RowLayoutData element14 = new RowLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(dungeonView)");
        checkOut6.setOnSelectionChange(onSelectionChange);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 0, 5));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(true);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("dungeonSmallIcon");
        element15.setExpandable(false);
        checkOut6.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element15.getAppearance();
        appearance4.setElementMap(elementMap);
        element15.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("modulationColor");
        element16.setField("dungeon/enabled");
        appearance4.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setValue("#ffffffff");
        element17.setElseValue("#ffffff77");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final TrueCondition element18 = new TrueCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        appearance4.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("bold");
        element19.setExpandable(false);
        element19.setMinWidth(160);
        element19.setMaxWidth(160);
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("dungeon/name");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance5 = element19.getAppearance();
        appearance5.setElementMap(elementMap);
        element19.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("text");
        checkOut12.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element19.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setMinWidth(160);
        element22.setMaxWidth(160);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("dungeon/level");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance6 = element22.getAppearance();
        appearance6.setElementMap(elementMap);
        element22.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Spacer element25 = new Spacer();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        checkOut6.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final ToggleButton element26 = new ToggleButton();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("roundBlue");
        element26.setExpandable(false);
        final SelectionChangedListener onSelectionChange2 = new SelectionChangedListener();
        onSelectionChange2.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(dungeonView)");
        element26.setOnSelectionChange(onSelectionChange2);
        checkOut6.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("visible");
        element27.setField("dungeon/enabled");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("selected");
        element28.setField("dungeon/selected");
        element26.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final RowLayoutData element29 = new RowLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAlign(Alignment9.CENTER);
        element26.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("partyOccupations");
        checkOut14.setAttribute("enabled");
        checkOut14.setField("isLeader");
        element26.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element26.onChildrenAdded();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("visible");
        element30.setField("dungeon/selected");
        checkOut6.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        final SelectionChangedListener onSelectionChange3 = new SelectionChangedListener();
        onSelectionChange3.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(monsterView)");
        checkOut15.setOnSelectionChange(onSelectionChange3);
        checkOut4.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut15.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(0, 10, 0, 5));
        appearance7.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setHorizontal(true);
        checkOut15.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Image element31 = new Image();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setStyle("smallMonster");
        element31.setExpandable(false);
        checkOut15.addBasicElement(element31);
        element31.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element31.getAppearance();
        appearance8.setElementMap(elementMap);
        element31.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut18 = Margin.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setInsets(new Insets(0, 0, 0, 5));
        appearance8.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("modulationColor");
        element32.setField("monster/enabled");
        appearance8.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ConditionResult element33 = new ConditionResult();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setValue("#ffffffff");
        element33.setElseValue("#ffffff77");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final TrueCondition element34 = new TrueCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        appearance8.onChildrenAdded();
        element31.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setExpandable(false);
        checkOut15.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final RowLayout checkOut20 = RowLayout.checkOut();
        checkOut20.setHorizontal(false);
        checkOut19.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final TextView element35 = new TextView();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setStyle("bold");
        element35.setExpandable(false);
        element35.setMinWidth(160);
        element35.setMaxWidth(160);
        checkOut19.addBasicElement(element35);
        element35.onAttributesInitialized();
        final RowLayoutData element36 = new RowLayoutData();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAlign(Alignment9.CENTER);
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final ItemElement element37 = new ItemElement();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setAttribute("text");
        element37.setField("monster/name");
        element35.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        final DecoratorAppearance appearance9 = element35.getAppearance();
        appearance9.setElementMap(elementMap);
        element35.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("text");
        checkOut21.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance9.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance9.onChildrenAdded();
        element35.onChildrenAdded();
        final TextView element38 = new TextView();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setExpandable(false);
        element38.setMinWidth(160);
        element38.setMaxWidth(160);
        checkOut19.addBasicElement(element38);
        element38.onAttributesInitialized();
        final RowLayoutData element39 = new RowLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setAlign(Alignment9.CENTER);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final ItemElement element40 = new ItemElement();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAttribute("text");
        element40.setField("monster/level");
        element38.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        this.method20(element38);
        element38.onChildrenAdded();
        checkOut19.onChildrenAdded();
        this.method21(checkOut15);
        this.method22(checkOut15);
        this.method23(checkOut15);
        checkOut15.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method20(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method21(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method22(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("roundBlue");
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(monsterView)");
        element.setOnSelectionChange(onSelectionChange);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("monster/enabled");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("selected");
        element3.setField("monster/selected");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupations");
        checkOut.setAttribute("enabled");
        checkOut.setField("isLeader");
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method23(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("monster/selected");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method24(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ListCondition element3 = new ListCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setKey("evenIndex");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setColor(new Color(0.37f, 0.44f, 0.43f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method25(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ListCondition element3 = new ListCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setKey("oddIndex");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method26(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupations");
        checkOut.setAttribute("content");
        checkOut.setField("selectedViews");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method27(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("LineSeparatorVertical");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(7, 100.0f));
        element.setAlign(Alignment17.SOUTH_WEST);
        element.setXOffset(185);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(3, 0, 3, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method28(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(10, 10, 10, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 20, 10, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method29(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, 100.0f));
        element.setAlign(Alignment17.WEST);
        element.setInitValue(true);
        element.setXOffset(55);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method30(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("windowNew");
        checkOut.setExpandable(false);
        checkOut.setNonBlocking(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final WindowMovePoint element3 = new WindowMovePoint();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element3.getAppearance();
        appearance2.setElementMap(elementMap);
        element3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 10, 0, 10));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("titleBar");
        element3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut4.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(3, 20, 3, 20));
        appearance3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        checkOut6.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final Label element6 = new Label();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setStyle("StyledBold16White");
        element6.setNonBlocking(true);
        element6.setText("%partySearchRegistration.title%".replace("%partySearchRegistration.title%", Xulor.getInstance().getTranslatedString("partySearchRegistration.title")));
        checkOut6.addBasicElement(element6);
        element6.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element6.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlignment(Alignment9.CENTER);
        element6.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        element3.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance5 = checkOut7.getAppearance();
        appearance5.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 12, 0, 12));
        appearance5.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance5.onChildrenAdded();
        final String id = "windowContentContainer";
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut9);
        }
        checkOut7.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setExpandable(false);
        checkOut10.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayoutData element7 = new RowLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.CENTER);
        checkOut12.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setStyle("cream");
        checkOut13.setExpandable(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final DecoratorAppearance appearance6 = checkOut13.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut13.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Padding element8 = new Padding();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setInsets(new Insets(5, 8, 5, 8));
        appearance6.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        appearance6.onChildrenAdded();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setHorizontal(false);
        checkOut14.setAlign(Alignment9.NORTH);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setExpandable(false);
        checkOut13.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.CENTER);
        checkOut15.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final StaticLayout element10 = new StaticLayout();
        element10.onCheckOut();
        element10.setAdaptToContentSize(true);
        checkOut15.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setStyle("itemMystery");
        checkOut16.setPrefSize(new Dimension(52, 52));
        checkOut15.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.CENTER);
        checkOut16.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut16.getAppearance();
        appearance7.setElementMap(elementMap);
        appearance7.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut16.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        checkOut16.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setDisplaySize(new Dimension(48, 48));
        checkOut15.addBasicElement(element12);
        element12.onAttributesInitialized();
        final StaticLayoutData element13 = new StaticLayoutData();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setSize(new Dimension(-2, -2));
        element13.setAlign(Alignment17.CENTER);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut17 = PixmapElement.checkOut();
        checkOut17.setElementMap(elementMap);
        element12.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setName("partyOccupations");
        checkOut18.setAttribute("texture");
        checkOut18.setField("member0/breed/iconUrl");
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setExpandable(false);
        element14.setMinWidth(54);
        element14.setMaxWidth(54);
        checkOut13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element14.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.CENTER);
        element14.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut19 = PropertyElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("partyOccupations");
        checkOut19.setAttribute("text");
        checkOut19.setField("member0/name");
        element14.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("bold");
        element15.setExpandable(false);
        element15.setMinWidth(54);
        element15.setMaxWidth(54);
        checkOut13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element15.getAppearance();
        appearance9.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance9).setAlign(Alignment9.CENTER);
        element15.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        appearance9.onChildrenAdded();
        final PropertyElement checkOut20 = PropertyElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("partyOccupations");
        checkOut20.setAttribute("text");
        checkOut20.setField("member0/level");
        element15.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        element15.onChildrenAdded();
        final String id2 = "member0";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut13.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("partyOccupations");
        checkOut21.setAttribute("value");
        checkOut21.setField("member0");
        data.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        data.onChildrenAdded();
        final ComboBox element16 = new ComboBox();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setExpandable(false);
        element16.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationRole(member0)");
        element16.setOnListSelectionChange(onListSelectionChange);
        checkOut13.addBasicElement(element16);
        element16.onAttributesInitialized();
        final RenderableContainer element17 = new RenderableContainer();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setPrefSize(new Dimension(0, 1));
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final ItemRenderer element18 = new ItemRenderer();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        final Container checkOut22 = Container.checkOut();
        checkOut22.setElementMap(elementMap);
        element18.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        final RowLayout checkOut23 = RowLayout.checkOut();
        checkOut23.setAlign(Alignment9.WEST);
        checkOut22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setDisplaySize(new Dimension(24, 24));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element19.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element19.setOnPopupHide(onPopupHide);
        element19.setPrefSize(new Dimension(24, 24));
        checkOut22.addBasicElement(element19);
        element19.onAttributesInitialized();
        final PopupElement element20 = new PopupElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.NORTH);
        element20.setHotSpotPosition(Alignment9.SOUTH);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final Container checkOut24 = Container.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setPrefSize(new Dimension(10, 0));
        checkOut24.setStyle("popup");
        element20.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        final RowLayout checkOut25 = RowLayout.checkOut();
        checkOut25.setHorizontal(false);
        checkOut24.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        final Label element21 = new Label();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setStyle("bold");
        element21.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut24.addBasicElement(element21);
        element21.onAttributesInitialized();
        final DecoratorAppearance appearance10 = element21.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlignment(Alignment9.WEST);
        element21.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final ColorElement checkOut26 = ColorElement.checkOut();
        checkOut26.setElementMap(elementMap);
        checkOut26.setName("text");
        checkOut26.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance10.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        appearance10.onChildrenAdded();
        element21.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("PopupInformation");
        checkOut24.addBasicElement(element22);
        element22.onAttributesInitialized();
        final DecoratorAppearance appearance11 = element22.getAppearance();
        appearance11.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance11).setAlignment(Alignment9.WEST);
        element22.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        appearance11.onChildrenAdded();
        final ItemElement element23 = new ItemElement();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAttribute("text");
        element23.setField("name");
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut24.onChildrenAdded();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance12 = element19.getAppearance();
        appearance12.setElementMap(elementMap);
        element19.addBasicElement(appearance12);
        appearance12.onAttributesInitialized();
        final Margin checkOut27 = Margin.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setInsets(new Insets(2, 2, 2, 2));
        appearance12.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        checkOut27.onChildrenAdded();
        appearance12.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("style");
        element24.setField("style");
        element19.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final PixmapElement checkOut28 = PixmapElement.checkOut();
        checkOut28.setElementMap(elementMap);
        element19.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut22.onChildrenAdded();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        final List element25 = new List();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setHorizontal(false);
        element25.setCellSize(new Dimension(120, 24));
        element16.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemRenderer element26 = new ItemRenderer();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final Container checkOut29 = Container.checkOut();
        checkOut29.setElementMap(elementMap);
        element26.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        final RowLayout checkOut30 = RowLayout.checkOut();
        checkOut30.setAlign(Alignment9.WEST);
        checkOut29.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        final Image element27 = new Image();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setDisplaySize(new Dimension(24, 24));
        element27.setExpandable(false);
        checkOut29.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("style");
        element28.setField("style");
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final PixmapElement checkOut31 = PixmapElement.checkOut();
        checkOut31.setElementMap(elementMap);
        element27.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        element27.onChildrenAdded();
        final TextView element29 = new TextView();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setExpandable(false);
        element29.setStyle("bold");
        element29.setEnableAutoZoomShrink(true);
        checkOut29.addBasicElement(element29);
        element29.onAttributesInitialized();
        this.method31(element29);
        this.method32(element29);
        this.method33(element29);
        element29.onChildrenAdded();
        checkOut29.onChildrenAdded();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        this.method34(element16);
        this.method35(element16);
        this.method36(element16);
        this.method37(element16);
        this.method38(element16);
        element16.onChildrenAdded();
        checkOut13.onChildrenAdded();
        this.method39(checkOut12);
        this.method40(checkOut12);
        this.method41(checkOut12);
        this.method42(checkOut12);
        this.method43(checkOut12);
        checkOut12.onChildrenAdded();
        this.method44(checkOut10);
        this.method45(checkOut10);
        this.method61(checkOut10);
        this.method62(checkOut10);
        checkOut10.onChildrenAdded();
        this.method63(checkOut9);
        checkOut9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        this.method83(checkOut);
        this.method84(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method31(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method32(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("name");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method33(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method34(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method35(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupations");
        checkOut.setAttribute("enabled");
        checkOut.setField("isLeader");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method36(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupations");
        checkOut.setAttribute("content");
        checkOut.setField("roles");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method37(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupations");
        checkOut.setAttribute("selectedValue");
        checkOut.setField("member0/role");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method38(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupations");
        checkOut.setAttribute("visible");
        checkOut.setField("member0");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final NotNullCondition element2 = new NotNullCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method39(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("cream");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 8, 5, 8));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("itemMystery");
        checkOut4.setPrefSize(new Dimension(52, 52));
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setAlign(Alignment17.CENTER);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("partyOccupations");
        checkOut6.setAttribute("texture");
        checkOut6.setField("member1/breed/iconUrl");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setExpandable(false);
        element7.setMinWidth(54);
        element7.setMaxWidth(54);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("partyOccupations");
        checkOut7.setAttribute("text");
        checkOut7.setField("member1/name");
        element7.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element7.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("bold");
        element8.setExpandable(false);
        element8.setMinWidth(54);
        element8.setMaxWidth(54);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("partyOccupations");
        checkOut8.setAttribute("text");
        checkOut8.setField("member1/level");
        element8.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element8.onChildrenAdded();
        final String id = "member1";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("partyOccupations");
        checkOut9.setAttribute("value");
        checkOut9.setField("member1");
        data.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        data.onChildrenAdded();
        final ComboBox element9 = new ComboBox();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationRole(member1)");
        element9.setOnListSelectionChange(onListSelectionChange);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RenderableContainer element10 = new RenderableContainer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setPrefSize(new Dimension(0, 1));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setDisplaySize(new Dimension(24, 24));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        element12.setPrefSize(new Dimension(24, 24));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PopupElement element13 = new PopupElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment9.NORTH);
        element13.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        element13.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("PopupInformation");
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance7 = element12.getAppearance();
        appearance7.setElementMap(elementMap);
        element12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(2, 2, 2, 2));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("style");
        element17.setField("style");
        element12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final List element18 = new List();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setHorizontal(false);
        element18.setCellSize(new Dimension(120, 24));
        element9.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        element19.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(24, 24));
        element20.setExpandable(false);
        checkOut17.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("style");
        element21.setField("style");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element20.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setStyle("bold");
        element22.setEnableAutoZoomShrink(true);
        checkOut17.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance8 = element22.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("text");
        checkOut20.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance8.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("partyOccupations");
        checkOut22.setAttribute("enabled");
        checkOut22.setField("isLeader");
        element9.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("partyOccupations");
        checkOut23.setAttribute("content");
        checkOut23.setField("roles");
        element9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("partyOccupations");
        checkOut24.setAttribute("selectedValue");
        checkOut24.setField("member1/role");
        element9.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("partyOccupations");
        checkOut25.setAttribute("visible");
        checkOut25.setField("member1");
        element9.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        checkOut25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut25.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method40(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("cream");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 8, 5, 8));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("itemMystery");
        checkOut4.setPrefSize(new Dimension(52, 52));
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setAlign(Alignment17.CENTER);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("partyOccupations");
        checkOut6.setAttribute("texture");
        checkOut6.setField("member2/breed/iconUrl");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setExpandable(false);
        element7.setMinWidth(54);
        element7.setMaxWidth(54);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("partyOccupations");
        checkOut7.setAttribute("text");
        checkOut7.setField("member2/name");
        element7.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element7.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("bold");
        element8.setExpandable(false);
        element8.setMinWidth(54);
        element8.setMaxWidth(54);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("partyOccupations");
        checkOut8.setAttribute("text");
        checkOut8.setField("member2/level");
        element8.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element8.onChildrenAdded();
        final String id = "member2";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("partyOccupations");
        checkOut9.setAttribute("value");
        checkOut9.setField("member2");
        data.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        data.onChildrenAdded();
        final ComboBox element9 = new ComboBox();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationRole(member2)");
        element9.setOnListSelectionChange(onListSelectionChange);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RenderableContainer element10 = new RenderableContainer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setPrefSize(new Dimension(0, 1));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setDisplaySize(new Dimension(24, 24));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        element12.setPrefSize(new Dimension(24, 24));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PopupElement element13 = new PopupElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment9.NORTH);
        element13.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        element13.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("PopupInformation");
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance7 = element12.getAppearance();
        appearance7.setElementMap(elementMap);
        element12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(2, 2, 2, 2));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("style");
        element17.setField("style");
        element12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final List element18 = new List();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setHorizontal(false);
        element18.setCellSize(new Dimension(120, 24));
        element9.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        element19.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(24, 24));
        element20.setExpandable(false);
        checkOut17.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("style");
        element21.setField("style");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element20.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setStyle("bold");
        element22.setEnableAutoZoomShrink(true);
        checkOut17.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance8 = element22.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("text");
        checkOut20.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance8.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("partyOccupations");
        checkOut22.setAttribute("enabled");
        checkOut22.setField("isLeader");
        element9.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("partyOccupations");
        checkOut23.setAttribute("content");
        checkOut23.setField("roles");
        element9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("partyOccupations");
        checkOut24.setAttribute("selectedValue");
        checkOut24.setField("member2/role");
        element9.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("partyOccupations");
        checkOut25.setAttribute("visible");
        checkOut25.setField("member2");
        element9.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        checkOut25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut25.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method41(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("cream");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 8, 5, 8));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("itemMystery");
        checkOut4.setPrefSize(new Dimension(52, 52));
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setAlign(Alignment17.CENTER);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("partyOccupations");
        checkOut6.setAttribute("texture");
        checkOut6.setField("member3/breed/iconUrl");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setExpandable(false);
        element7.setMinWidth(54);
        element7.setMaxWidth(54);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("partyOccupations");
        checkOut7.setAttribute("text");
        checkOut7.setField("member3/name");
        element7.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element7.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("bold");
        element8.setExpandable(false);
        element8.setMinWidth(54);
        element8.setMaxWidth(54);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("partyOccupations");
        checkOut8.setAttribute("text");
        checkOut8.setField("member3/level");
        element8.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element8.onChildrenAdded();
        final String id = "member3";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("partyOccupations");
        checkOut9.setAttribute("value");
        checkOut9.setField("member3");
        data.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        data.onChildrenAdded();
        final ComboBox element9 = new ComboBox();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationRole(member3)");
        element9.setOnListSelectionChange(onListSelectionChange);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RenderableContainer element10 = new RenderableContainer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setPrefSize(new Dimension(0, 1));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setDisplaySize(new Dimension(24, 24));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        element12.setPrefSize(new Dimension(24, 24));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PopupElement element13 = new PopupElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment9.NORTH);
        element13.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        element13.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("PopupInformation");
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance7 = element12.getAppearance();
        appearance7.setElementMap(elementMap);
        element12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(2, 2, 2, 2));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("style");
        element17.setField("style");
        element12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final List element18 = new List();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setHorizontal(false);
        element18.setCellSize(new Dimension(120, 24));
        element9.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        element19.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(24, 24));
        element20.setExpandable(false);
        checkOut17.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("style");
        element21.setField("style");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element20.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setStyle("bold");
        element22.setEnableAutoZoomShrink(true);
        checkOut17.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance8 = element22.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("text");
        checkOut20.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance8.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("partyOccupations");
        checkOut22.setAttribute("enabled");
        checkOut22.setField("isLeader");
        element9.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("partyOccupations");
        checkOut23.setAttribute("content");
        checkOut23.setField("roles");
        element9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("partyOccupations");
        checkOut24.setAttribute("selectedValue");
        checkOut24.setField("member3/role");
        element9.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("partyOccupations");
        checkOut25.setAttribute("visible");
        checkOut25.setField("member3");
        element9.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        checkOut25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut25.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method42(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("cream");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 8, 5, 8));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("itemMystery");
        checkOut4.setPrefSize(new Dimension(52, 52));
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setAlign(Alignment17.CENTER);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("partyOccupations");
        checkOut6.setAttribute("texture");
        checkOut6.setField("member4/breed/iconUrl");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setExpandable(false);
        element7.setMinWidth(54);
        element7.setMaxWidth(54);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("partyOccupations");
        checkOut7.setAttribute("text");
        checkOut7.setField("member4/name");
        element7.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element7.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("bold");
        element8.setExpandable(false);
        element8.setMinWidth(54);
        element8.setMaxWidth(54);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("partyOccupations");
        checkOut8.setAttribute("text");
        checkOut8.setField("member4/level");
        element8.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element8.onChildrenAdded();
        final String id = "member4";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("partyOccupations");
        checkOut9.setAttribute("value");
        checkOut9.setField("member4");
        data.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        data.onChildrenAdded();
        final ComboBox element9 = new ComboBox();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationRole(member4)");
        element9.setOnListSelectionChange(onListSelectionChange);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RenderableContainer element10 = new RenderableContainer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setPrefSize(new Dimension(0, 1));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setDisplaySize(new Dimension(24, 24));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        element12.setPrefSize(new Dimension(24, 24));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PopupElement element13 = new PopupElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment9.NORTH);
        element13.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        element13.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("PopupInformation");
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance7 = element12.getAppearance();
        appearance7.setElementMap(elementMap);
        element12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(2, 2, 2, 2));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("style");
        element17.setField("style");
        element12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final List element18 = new List();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setHorizontal(false);
        element18.setCellSize(new Dimension(120, 24));
        element9.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        element19.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(24, 24));
        element20.setExpandable(false);
        checkOut17.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("style");
        element21.setField("style");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element20.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setStyle("bold");
        element22.setEnableAutoZoomShrink(true);
        checkOut17.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance8 = element22.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("text");
        checkOut20.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance8.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("partyOccupations");
        checkOut22.setAttribute("enabled");
        checkOut22.setField("isLeader");
        element9.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("partyOccupations");
        checkOut23.setAttribute("content");
        checkOut23.setField("roles");
        element9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("partyOccupations");
        checkOut24.setAttribute("selectedValue");
        checkOut24.setField("member4/role");
        element9.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("partyOccupations");
        checkOut25.setAttribute("visible");
        checkOut25.setField("member4");
        element9.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        checkOut25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut25.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method43(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("cream");
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(5, 8, 5, 8));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut2.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.CENTER);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut3.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setStyle("itemMystery");
        checkOut4.setPrefSize(new Dimension(52, 52));
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(-2, -2));
        element4.setAlign(Alignment17.CENTER);
        checkOut4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final Image element5 = new Image();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setDisplaySize(new Dimension(48, 48));
        checkOut3.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(-2, -2));
        element6.setAlign(Alignment17.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PixmapElement checkOut5 = PixmapElement.checkOut();
        checkOut5.setElementMap(elementMap);
        element5.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("partyOccupations");
        checkOut6.setAttribute("texture");
        checkOut6.setField("member5/breed/iconUrl");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setStyle("bold");
        element7.setExpandable(false);
        element7.setMinWidth(54);
        element7.setMaxWidth(54);
        checkOut.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element7.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.CENTER);
        element7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("partyOccupations");
        checkOut7.setAttribute("text");
        checkOut7.setField("member5/name");
        element7.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        element7.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("bold");
        element8.setExpandable(false);
        element8.setMinWidth(54);
        element8.setMaxWidth(54);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("partyOccupations");
        checkOut8.setAttribute("text");
        checkOut8.setField("member5/level");
        element8.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        element8.onChildrenAdded();
        final String id = "member5";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut9 = PropertyElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("partyOccupations");
        checkOut9.setAttribute("value");
        checkOut9.setField("member5");
        data.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        data.onChildrenAdded();
        final ComboBox element9 = new ComboBox();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setExpandable(false);
        element9.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationRole(member5)");
        element9.setOnListSelectionChange(onListSelectionChange);
        checkOut.addBasicElement(element9);
        element9.onAttributesInitialized();
        final RenderableContainer element10 = new RenderableContainer();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setPrefSize(new Dimension(0, 1));
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemRenderer element11 = new ItemRenderer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element11.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element12 = new Image();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setDisplaySize(new Dimension(24, 24));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element12.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide);
        element12.setPrefSize(new Dimension(24, 24));
        checkOut10.addBasicElement(element12);
        element12.onAttributesInitialized();
        final PopupElement element13 = new PopupElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAlign(Alignment9.NORTH);
        element13.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Container checkOut12 = Container.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setPrefSize(new Dimension(10, 0));
        checkOut12.setStyle("popup");
        element13.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        final RowLayout checkOut13 = RowLayout.checkOut();
        checkOut13.setHorizontal(false);
        checkOut12.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("bold");
        element14.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut12.addBasicElement(element14);
        element14.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element14.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element14.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut14 = ColorElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("text");
        checkOut14.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance5.onChildrenAdded();
        element14.onChildrenAdded();
        final Label element15 = new Label();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("PopupInformation");
        checkOut12.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element15.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element15.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut12.onChildrenAdded();
        element13.onChildrenAdded();
        final DecoratorAppearance appearance7 = element12.getAppearance();
        appearance7.setElementMap(elementMap);
        element12.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(2, 2, 2, 2));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("style");
        element17.setField("style");
        element12.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut16 = PixmapElement.checkOut();
        checkOut16.setElementMap(elementMap);
        element12.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final List element18 = new List();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setHorizontal(false);
        element18.setCellSize(new Dimension(120, 24));
        element9.addBasicElement(element18);
        element18.onAttributesInitialized();
        final ItemRenderer element19 = new ItemRenderer();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        element19.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setAlign(Alignment9.WEST);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Image element20 = new Image();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setDisplaySize(new Dimension(24, 24));
        element20.setExpandable(false);
        checkOut17.addBasicElement(element20);
        element20.onAttributesInitialized();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("style");
        element21.setField("style");
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PixmapElement checkOut19 = PixmapElement.checkOut();
        checkOut19.setElementMap(elementMap);
        element20.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        element20.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setStyle("bold");
        element22.setEnableAutoZoomShrink(true);
        checkOut17.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance8 = element22.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element22.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("text");
        checkOut20.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance8.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Margin checkOut21 = Margin.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance8.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut17.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final RowLayoutData element25 = new RowLayoutData();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setAlign(Alignment9.CENTER);
        element9.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("partyOccupations");
        checkOut22.setAttribute("enabled");
        checkOut22.setField("isLeader");
        element9.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("partyOccupations");
        checkOut23.setAttribute("content");
        checkOut23.setField("roles");
        element9.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("partyOccupations");
        checkOut24.setAttribute("selectedValue");
        checkOut24.setField("member5/role");
        element9.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("partyOccupations");
        checkOut25.setAttribute("visible");
        checkOut25.setField("member5");
        element9.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final ConditionResult element26 = new ConditionResult();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        checkOut25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut25.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method44(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(3, 5, 3, 5));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 0, 2, 5));
        appearance2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance2.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setText("%partySearch.descriptionText%".replace("%partySearch.descriptionText%", Xulor.getInstance().getTranslatedString("partySearch.descriptionText")));
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("ShortcutRowBackgroundFull");
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(3, 3, 3, 3));
        appearance3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        appearance3.onChildrenAdded();
        final String id = "searchDescription";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textEditor);
        }
        textEditor.setStyle("withoutBorder");
        textEditor.setMaxChars(80);
        textEditor.setPrefSize(new Dimension(250, 0));
        textEditor.setSelectOnFocus(true);
        checkOut6.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final DecoratorAppearance appearance4 = textEditor.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        textEditor.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        appearance4.onChildrenAdded();
        final PropertyElement checkOut7 = PropertyElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setAttribute("text");
        checkOut7.setName("partyOccupations");
        checkOut7.setField("description");
        textEditor.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setName("partyOccupations");
        checkOut8.setAttribute("editable");
        checkOut8.setField("isLeader");
        textEditor.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setExpandable(false);
        checkOut.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setHorizontal(false);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setText("%partySearch.mood%".replace("%partySearch.mood%", Xulor.getInstance().getTranslatedString("partySearch.mood")));
        checkOut9.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.WEST);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        final ComboBox element5 = new ComboBox();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setExpandable(false);
        element5.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationMood");
        element5.setOnListSelectionChange(onListSelectionChange);
        checkOut9.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RenderableContainer element6 = new RenderableContainer();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setPrefSize(new Dimension(0, 1));
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ItemRenderer element7 = new ItemRenderer();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        element7.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setAlign(Alignment9.WEST);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setDisplaySize(new Dimension(24, 24));
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element8.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element8.setOnPopupHide(onPopupHide);
        element8.setPrefSize(new Dimension(24, 24));
        checkOut11.addBasicElement(element8);
        element8.onAttributesInitialized();
        final PopupElement element9 = new PopupElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.NORTH);
        element9.setHotSpotPosition(Alignment9.SOUTH);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setPrefSize(new Dimension(10, 0));
        checkOut13.setStyle("popup");
        element9.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final RowLayout checkOut14 = RowLayout.checkOut();
        checkOut14.setHorizontal(false);
        checkOut13.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("bold");
        element10.setText("%partySearch.mood%".replace("%partySearch.mood%", Xulor.getInstance().getTranslatedString("partySearch.mood")));
        checkOut13.addBasicElement(element10);
        element10.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element10.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.WEST);
        element10.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut15 = ColorElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("text");
        checkOut15.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance5.onChildrenAdded();
        element10.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("PopupInformation");
        checkOut13.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element11.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        final ItemElement element12 = new ItemElement();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAttribute("text");
        element12.setField("name");
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        checkOut13.onChildrenAdded();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance7 = element8.getAppearance();
        appearance7.setElementMap(elementMap);
        element8.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut16 = Margin.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setInsets(new Insets(2, 2, 2, 2));
        appearance7.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        appearance7.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("style");
        element13.setField("style");
        element8.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final PixmapElement checkOut17 = PixmapElement.checkOut();
        checkOut17.setElementMap(elementMap);
        element8.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        final List element14 = new List();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setHorizontal(false);
        element14.setCellSize(new Dimension(120, 24));
        element5.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemRenderer element15 = new ItemRenderer();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        element15.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setAlign(Alignment9.WEST);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setDisplaySize(new Dimension(24, 24));
        element16.setExpandable(false);
        checkOut18.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("style");
        element17.setField("style");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final PixmapElement checkOut20 = PixmapElement.checkOut();
        checkOut20.setElementMap(elementMap);
        element16.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        element16.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setExpandable(false);
        element18.setStyle("bold");
        element18.setEnableAutoZoomShrink(true);
        checkOut18.addBasicElement(element18);
        element18.onAttributesInitialized();
        final RowLayoutData element19 = new RowLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment9.CENTER);
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final ItemElement element20 = new ItemElement();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAttribute("text");
        element20.setField("name");
        element18.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final DecoratorAppearance appearance8 = element18.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        element18.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("text");
        checkOut21.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance8.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final Margin checkOut22 = Margin.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setInsets(new Insets(0, 5, 0, 0));
        appearance8.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance8.onChildrenAdded();
        element18.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        final RowLayoutData element21 = new RowLayoutData();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAlign(Alignment9.WEST);
        element5.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setAttribute("content");
        checkOut23.setName("partyOccupations");
        checkOut23.setField("moods");
        element5.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final PropertyElement checkOut24 = PropertyElement.checkOut();
        checkOut24.setElementMap(elementMap);
        checkOut24.setName("partyOccupations");
        checkOut24.setAttribute("enabled");
        checkOut24.setField("isLeader");
        element5.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final PropertyElement checkOut25 = PropertyElement.checkOut();
        checkOut25.setElementMap(elementMap);
        checkOut25.setName("partyOccupations");
        checkOut25.setAttribute("selectedValue");
        checkOut25.setField("selectedMood");
        element5.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        checkOut25.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method45(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("white");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(8, 8, 8, 4));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("title");
        element2.setText("%partySearch.occupationChoice%".replace("%partySearch.occupationChoice%", Xulor.getInstance().getTranslatedString("partySearch.occupationChoice")));
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 3, 5, 3));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut7.setAlign(Alignment9.NORTH);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 5));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setText("%partySearch.familyName%".replace("%partySearch.familyName%", Xulor.getInstance().getTranslatedString("partySearch.familyName")));
        element4.setExpandable(false);
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("ShortcutRowBackgroundFull");
        checkOut9.setExpandable(false);
        checkOut6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        checkOut9.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(3, 3, 3, 3));
        appearance4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance4.onChildrenAdded();
        final String id = "registrationFamilySearch";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textEditor);
        }
        textEditor.setStyle("withoutBorder");
        textEditor.setPrefSize(new Dimension(250, 0));
        textEditor.setGhostText("%editSearch%".replace("%editSearch%", Xulor.getInstance().getTranslatedString("editSearch")));
        textEditor.setSelectOnFocus(true);
        final KeyPressedListener onKeyPress = new KeyPressedListener();
        onKeyPress.setCallBackFunc("wakfu.partySearch:keyPressRegistrationOccupations(registrationFamilySearch,registrationMinLevel,registrationMaxLevel)");
        textEditor.setOnKeyPress(onKeyPress);
        checkOut9.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final DecoratorAppearance appearance5 = textEditor.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        textEditor.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("text");
        checkOut10.setName("partyOccupations");
        checkOut10.setField("searchString");
        textEditor.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut12.setAlign(Alignment9.NORTH);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setText("%levelShort%".replace("%levelShort%", Xulor.getInstance().getTranslatedString("levelShort")));
        element7.setExpandable(false);
        checkOut11.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setStyle("ShortcutRowBackgroundFull");
        checkOut15.setExpandable(false);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut15.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut15.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(3, 3, 3, 3));
        appearance7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance7.onChildrenAdded();
        final String id2 = "registrationMinLevel";
        final TextEditor textEditor2 = new TextEditor();
        textEditor2.onCheckOut();
        textEditor2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textEditor2);
        }
        textEditor2.setStyle("withoutBorder");
        textEditor2.setPrefSize(new Dimension(25, 0));
        textEditor2.setExpandable(false);
        textEditor2.setRestrict("[0-9]");
        textEditor2.setMaxChars(3);
        textEditor2.setSelectOnFocus(true);
        final KeyPressedListener onKeyPress2 = new KeyPressedListener();
        onKeyPress2.setCallBackFunc("wakfu.partySearch:keyPressRegistrationOccupations(registrationFamilySearch,registrationMinLevel,registrationMaxLevel)");
        textEditor2.setOnKeyPress(onKeyPress2);
        checkOut15.addBasicElement(textEditor2);
        textEditor2.onAttributesInitialized();
        final DecoratorAppearance appearance8 = textEditor2.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        textEditor2.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setAttribute("text");
        checkOut16.setName("partyOccupations");
        checkOut16.setField("occupationMinLevel");
        textEditor2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        textEditor2.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setText("-");
        element10.setExpandable(false);
        checkOut14.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setStyle("ShortcutRowBackgroundFull");
        checkOut17.setExpandable(false);
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayoutData element11 = new RowLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.CENTER);
        checkOut17.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut17.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element12 = new Padding();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setInsets(new Insets(3, 3, 3, 3));
        appearance9.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance9.onChildrenAdded();
        final String id3 = "registrationMaxLevel";
        final TextEditor textEditor3 = new TextEditor();
        textEditor3.onCheckOut();
        textEditor3.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, textEditor3);
        }
        textEditor3.setStyle("withoutBorder");
        textEditor3.setPrefSize(new Dimension(25, 0));
        textEditor3.setExpandable(false);
        textEditor3.setRestrict("[0-9]");
        textEditor3.setMaxChars(3);
        textEditor3.setSelectOnFocus(true);
        final KeyPressedListener onKeyPress3 = new KeyPressedListener();
        onKeyPress3.setCallBackFunc("wakfu.partySearch:keyPressRegistrationOccupations(registrationFamilySearch,registrationMinLevel,registrationMaxLevel)");
        textEditor3.setOnKeyPress(onKeyPress3);
        checkOut17.addBasicElement(textEditor3);
        textEditor3.onAttributesInitialized();
        final DecoratorAppearance appearance10 = textEditor3.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.WEST);
        textEditor3.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("text");
        checkOut18.setName("partyOccupations");
        checkOut18.setField("occupationMaxLevel");
        textEditor3.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        textEditor3.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Spacer element13 = new Spacer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        checkOut3.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Button element14 = new Button();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setExpandable(false);
        element14.setStyle("flat");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.partySearch:filterRegistrationOccupations(registrationFamilySearch,registrationMinLevel,registrationMaxLevel)");
        element14.setOnClick(onClick);
        checkOut3.addBasicElement(element14);
        element14.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.SOUTH);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("magnifyingGlass2");
        element16.setDisplaySize(new Dimension(20, 20));
        element16.setNonBlocking(true);
        element14.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element14.onChildrenAdded();
        final Button element17 = new Button();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setExpandable(false);
        element17.setStyle("flat");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.partySearch:resetRegistrationSearch");
        element17.setOnClick(onClick2);
        checkOut3.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.SOUTH);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("cancel");
        element19.setDisplaySize(new Dimension(20, 20));
        element19.setNonBlocking(true);
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayout element20 = new StaticLayout();
        element20.onCheckOut();
        element20.setAdaptToContentSize(true);
        checkOut19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final List element21 = new List();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setCellSize(new Dimension(100.0f, 64));
        element21.setHorizontal(false);
        element21.setScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_DISPLAY);
        element21.setPrefSize(new Dimension(420, 0));
        element21.setExpandable(false);
        checkOut19.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setSize(new Dimension(100.0f, 100.0f));
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final ItemRenderer element23 = new ItemRenderer();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final AndCondition element25 = new AndCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemCondition element26 = new ItemCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final ItemCondition element28 = new ItemCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setField("monster");
        element25.addBasicElement(element28);
        element28.onAttributesInitialized();
        final NullCondition element29 = new NullCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        element23.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final DecoratorAppearance appearance11 = checkOut20.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final PlainBackground element30 = new PlainBackground();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        appearance11.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("color");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setValue("0.37,0.44,0.43,1");
        element32.setElseValue("0.45,0.52,0.51,1");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ListCondition element33 = new ListCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setKey("evenIndex");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final TrueCondition element34 = new TrueCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        appearance11.onChildrenAdded();
        final String id4 = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, data);
        }
        checkOut20.addBasicElement(data);
        data.onAttributesInitialized();
        this.method46(data);
        data.onChildrenAdded();
        this.method47(checkOut20);
        this.method48(checkOut20);
        this.method49(checkOut20);
        checkOut20.onChildrenAdded();
        element23.onChildrenAdded();
        this.method50(element21);
        this.method51(element21);
        this.method57(element21);
        this.method58(element21);
        this.method59(element21);
        element21.onChildrenAdded();
        this.method60(checkOut19);
        checkOut19.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method46(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        element.setField("monster");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method47(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "dungeonView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        element.setField("dungeon");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method48(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("title");
        element.setExpandable(false);
        element.setMinWidth(180);
        element.setMaxWidth(180);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method49(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 5));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("dungeonSmallIcon");
        element.setExpandable(false);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("modulationColor");
        element2.setField("dungeon/enabled");
        appearance2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("#ffffffff");
        element3.setElseValue("#ffffff77");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("bold");
        element5.setExpandable(false);
        element5.setMinWidth(160);
        element5.setMaxWidth(160);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("dungeon/name");
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("text");
        checkOut9.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setMinWidth(160);
        element8.setMaxWidth(160);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.CENTER);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("dungeon/level");
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("text");
        checkOut10.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Spacer element11 = new Spacer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ToggleButton element12 = new ToggleButton();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("roundBlue");
        element12.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(dungeonView)");
        element12.setOnSelectionChange(onSelectionChange);
        checkOut3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("visible");
        element13.setField("dungeon/enabled");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final ConditionResult element14 = new ConditionResult();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        final AndCondition element15 = new AndCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final TrueCondition element16 = new TrueCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final TrueCondition element17 = new TrueCondition();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("comparedValue");
        checkOut11.setName("partyOccupations");
        checkOut11.setField("selectionEnabled");
        element17.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        element14.onChildrenAdded();
        element13.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("selected");
        element18.setField("dungeon/selected");
        element12.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final RowLayoutData element19 = new RowLayoutData();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("partyOccupations");
        checkOut12.setAttribute("enabled");
        checkOut12.setField("isLeader");
        element12.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method50(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ItemCondition element6 = new ItemCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setField("dungeon");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NullCondition element7 = new NullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("color");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0.37,0.44,0.43,1");
        element10.setElseValue("0.45,0.52,0.51,1");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ListCondition element11 = new ListCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setKey("evenIndex");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final TrueCondition element12 = new TrueCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("value");
        element13.setField("monster");
        data.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "dungeonView";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("value");
        element14.setField("dungeon");
        data2.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        data2.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("title");
        element15.setExpandable(false);
        element15.setMinWidth(180);
        element15.setMaxWidth(180);
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element15.getAppearance();
        appearance2.setElementMap(elementMap);
        element15.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("text");
        checkOut2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 0, 5));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(true);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("smallMonster");
        element18.setExpandable(false);
        checkOut6.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("modulationColor");
        element19.setField("monster/enabled");
        appearance4.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setValue("#ffffffff");
        element20.setElseValue("#ffffff77");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final TrueCondition element21 = new TrueCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        appearance4.onChildrenAdded();
        element18.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("bold");
        element22.setExpandable(false);
        element22.setMinWidth(160);
        element22.setMaxWidth(160);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("monster/name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance5 = element22.getAppearance();
        appearance5.setElementMap(elementMap);
        element22.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("text");
        checkOut12.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element22.onChildrenAdded();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setExpandable(false);
        element25.setMinWidth(160);
        element25.setMaxWidth(160);
        checkOut10.addBasicElement(element25);
        element25.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.CENTER);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("monster/level");
        element25.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance6 = element25.getAppearance();
        appearance6.setElementMap(elementMap);
        element25.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Spacer element28 = new Spacer();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        checkOut6.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final ToggleButton element29 = new ToggleButton();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("roundBlue");
        element29.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(monsterView)");
        element29.setOnSelectionChange(onSelectionChange);
        checkOut6.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("visible");
        element30.setField("monster/enabled");
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ConditionResult element31 = new ConditionResult();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final AndCondition element32 = new AndCondition();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final TrueCondition element33 = new TrueCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final TrueCondition element34 = new TrueCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element32.addBasicElement(element34);
        element34.onAttributesInitialized();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("comparedValue");
        checkOut14.setName("partyOccupations");
        checkOut14.setField("selectionEnabled");
        element34.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element34.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        final ItemElement element35 = new ItemElement();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAttribute("selected");
        element35.setField("monster/selected");
        element29.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final RowLayoutData element36 = new RowLayoutData();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAlign(Alignment9.CENTER);
        element29.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("partyOccupations");
        checkOut15.setAttribute("enabled");
        checkOut15.setField("isLeader");
        element29.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method51(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("color");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("0.37,0.44,0.43,1");
        element7.setElseValue("0.45,0.52,0.51,1");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ListCondition element8 = new ListCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setKey("evenIndex");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final TrueCondition element9 = new TrueCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("value");
        element10.setField("monster");
        data.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "dungeonView";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("dungeon");
        data2.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        data2.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("title");
        element12.setExpandable(false);
        element12.setMinWidth(180);
        element12.setMaxWidth(180);
        checkOut.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element12.getAppearance();
        appearance2.setElementMap(elementMap);
        element12.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("text");
        checkOut2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("name");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final RowLayoutData element14 = new RowLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 0, 5));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(true);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("dungeonSmallIcon");
        element15.setExpandable(false);
        checkOut6.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element15.getAppearance();
        appearance4.setElementMap(elementMap);
        element15.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("modulationColor");
        element16.setField("dungeon/enabled");
        appearance4.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setValue("#ffffffff");
        element17.setElseValue("#ffffff77");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final TrueCondition element18 = new TrueCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        appearance4.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("bold");
        element19.setExpandable(false);
        element19.setMinWidth(160);
        element19.setMaxWidth(160);
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("dungeon/name");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance5 = element19.getAppearance();
        appearance5.setElementMap(elementMap);
        element19.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("text");
        checkOut12.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element19.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setMinWidth(160);
        element22.setMaxWidth(160);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("dungeon/level");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance6 = element22.getAppearance();
        appearance6.setElementMap(elementMap);
        element22.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Spacer element25 = new Spacer();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        checkOut6.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final ToggleButton element26 = new ToggleButton();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("roundBlue");
        element26.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(dungeonView)");
        element26.setOnSelectionChange(onSelectionChange);
        checkOut6.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("visible");
        element27.setField("dungeon/enabled");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        final ConditionResult element28 = new ConditionResult();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final AndCondition element29 = new AndCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        final TrueCondition element30 = new TrueCondition();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final TrueCondition element31 = new TrueCondition();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element29.addBasicElement(element31);
        element31.onAttributesInitialized();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setAttribute("comparedValue");
        checkOut14.setName("partyOccupations");
        checkOut14.setField("selectionEnabled");
        element31.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        element31.onChildrenAdded();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element27.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("selected");
        element32.setField("dungeon/selected");
        element26.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final RowLayoutData element33 = new RowLayoutData();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setAlign(Alignment9.CENTER);
        element26.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("partyOccupations");
        checkOut15.setAttribute("enabled");
        checkOut15.setField("isLeader");
        element26.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut16.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut16.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 10, 0, 5));
        appearance7.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHorizontal(true);
        checkOut16.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Image element34 = new Image();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setStyle("smallMonster");
        element34.setExpandable(false);
        checkOut16.addBasicElement(element34);
        element34.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element34.getAppearance();
        appearance8.setElementMap(elementMap);
        element34.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut19 = Margin.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setInsets(new Insets(0, 0, 0, 5));
        appearance8.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final ItemElement element35 = new ItemElement();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAttribute("modulationColor");
        element35.setField("monster/enabled");
        appearance8.addBasicElement(element35);
        element35.onAttributesInitialized();
        final ConditionResult element36 = new ConditionResult();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setValue("#ffffffff");
        element36.setElseValue("#ffffff77");
        element35.addBasicElement(element36);
        element36.onAttributesInitialized();
        final TrueCondition element37 = new TrueCondition();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element36.addBasicElement(element37);
        element37.onAttributesInitialized();
        element37.onChildrenAdded();
        element36.onChildrenAdded();
        element35.onChildrenAdded();
        appearance8.onChildrenAdded();
        element34.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setExpandable(false);
        checkOut16.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut20.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final TextView element38 = new TextView();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setStyle("bold");
        element38.setExpandable(false);
        element38.setMinWidth(160);
        element38.setMaxWidth(160);
        checkOut20.addBasicElement(element38);
        element38.onAttributesInitialized();
        final RowLayoutData element39 = new RowLayoutData();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setAlign(Alignment9.CENTER);
        element38.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final ItemElement element40 = new ItemElement();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        element40.setAttribute("text");
        element40.setField("monster/name");
        element38.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        final DecoratorAppearance appearance9 = element38.getAppearance();
        appearance9.setElementMap(elementMap);
        element38.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut22 = ColorElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setName("text");
        checkOut22.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance9.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance9.onChildrenAdded();
        element38.onChildrenAdded();
        final TextView element41 = new TextView();
        element41.onCheckOut();
        element41.setElementMap(elementMap);
        element41.setExpandable(false);
        element41.setMinWidth(160);
        element41.setMaxWidth(160);
        checkOut20.addBasicElement(element41);
        element41.onAttributesInitialized();
        this.method52(element41);
        this.method53(element41);
        this.method54(element41);
        element41.onChildrenAdded();
        checkOut20.onChildrenAdded();
        this.method55(checkOut16);
        this.method56(checkOut16);
        checkOut16.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method52(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final RowLayoutData element = new RowLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAlign(Alignment9.CENTER);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method53(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("text");
        element.setField("monster/level");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method54(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method55(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Spacer element = new Spacer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method56(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("roundBlue");
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectRegistrationOccupation(monsterView)");
        element.setOnSelectionChange(onSelectionChange);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("monster/enabled");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final AndCondition element4 = new AndCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final TrueCondition element5 = new TrueCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("comparedValue");
        checkOut.setName("partyOccupations");
        checkOut.setField("selectionEnabled");
        element6.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        element6.onChildrenAdded();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("selected");
        element7.setField("monster/selected");
        element.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        element.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("partyOccupations");
        checkOut2.setAttribute("enabled");
        checkOut2.setField("isLeader");
        element.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method57(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ListCondition element3 = new ListCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setKey("evenIndex");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setColor(new Color(0.37f, 0.44f, 0.43f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method58(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ListCondition element3 = new ListCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setKey("oddIndex");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method59(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupations");
        checkOut.setAttribute("content");
        checkOut.setField("pveOccupations");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method60(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("LineSeparatorVertical");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(7, 100.0f));
        element.setAlign(Alignment17.SOUTH_WEST);
        element.setXOffset(185);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(3, 0, 3, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method61(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element = new StaticLayout();
        element.onCheckOut();
        element.setAdaptToContentSize(true);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Button element2 = new Button();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setText("%unregister%".replace("%unregister%", Xulor.getInstance().getTranslatedString("unregister")));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.partySearch:unregister");
        element2.setOnClick(onClick);
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(50.0f, -2));
        element3.setAlign(Alignment17.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PropertyElement checkOut2 = PropertyElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setAttribute("enabled");
        checkOut2.setName("partyOccupations");
        checkOut2.setField("registered");
        element2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final ConditionResult element4 = new ConditionResult();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        checkOut2.addBasicElement(element4);
        element4.onAttributesInitialized();
        final AndCondition element5 = new AndCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final TrueCondition element6 = new TrueCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final TrueCondition element7 = new TrueCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        final PropertyElement checkOut3 = PropertyElement.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setName("partyOccupations");
        checkOut3.setAttribute("comparedValue");
        checkOut3.setField("isLeader");
        element7.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element7.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut2.onChildrenAdded();
        element2.onChildrenAdded();
        final Button element8 = new Button();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.partySearch:register(searchDescription)");
        element8.setOnClick(onClick2);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(50.0f, -2));
        element9.setAlign(Alignment17.EAST);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final PropertyElement checkOut4 = PropertyElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setAttribute("text");
        checkOut4.setName("partyOccupations");
        checkOut4.setField("registered");
        element8.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("%update%".replace("%update%", Xulor.getInstance().getTranslatedString("update")));
        element10.setElseValue("%register%".replace("%register%", Xulor.getInstance().getTranslatedString("register")));
        checkOut4.addBasicElement(element10);
        element10.onAttributesInitialized();
        final TrueCondition element11 = new TrueCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        checkOut4.onChildrenAdded();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setAttribute("enabled");
        checkOut5.setName("partyOccupations");
        checkOut5.setField("canRegister");
        element8.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final ConditionResult element12 = new ConditionResult();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        checkOut5.addBasicElement(element12);
        element12.onAttributesInitialized();
        final AndCondition element13 = new AndCondition();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final TrueCondition element14 = new TrueCondition();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element13.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final TrueCondition element15 = new TrueCondition();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element13.addBasicElement(element15);
        element15.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setName("partyOccupations");
        checkOut6.setAttribute("comparedValue");
        checkOut6.setField("isLeader");
        element15.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        element15.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method62(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("currentPage");
        checkOut.setAttribute("visible");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("0");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method63(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setStyle("white");
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(8, 8, 8, 8));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("title");
        element2.setText("%partySearch.memberChoice%".replace("%partySearch.memberChoice%", Xulor.getInstance().getTranslatedString("partySearch.memberChoice")));
        element2.setExpandable(false);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setExpandable(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHgap((short)30);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setStyle("bold");
        element4.setText("%breed%".replace("%breed%", Xulor.getInstance().getTranslatedString("breed")));
        checkOut7.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.WEST);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ComboBox element6 = new ComboBox();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setExpandable(false);
        element6.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectBreed");
        element6.setOnListSelectionChange(onListSelectionChange);
        checkOut7.addBasicElement(element6);
        element6.onAttributesInitialized();
        final RenderableContainer element7 = new RenderableContainer();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setPrefSize(new Dimension(0, 1));
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ItemRenderer element8 = new ItemRenderer();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        element8.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayout checkOut10 = RowLayout.checkOut();
        checkOut10.setAlign(Alignment9.WEST);
        checkOut9.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element9.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element9.setOnPopupHide(onPopupHide);
        element9.setPrefSize(new Dimension(24, 24));
        element9.setDisplaySize(new Dimension(32, 32));
        checkOut9.addBasicElement(element9);
        element9.onAttributesInitialized();
        final PopupElement element10 = new PopupElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAlign(Alignment9.NORTH);
        element10.setHotSpotPosition(Alignment9.SOUTH);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setPrefSize(new Dimension(10, 0));
        checkOut11.setStyle("popup");
        element10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final Label element11 = new Label();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setStyle("bold");
        element11.setText("%breed%".replace("%breed%", Xulor.getInstance().getTranslatedString("breed")));
        checkOut11.addBasicElement(element11);
        element11.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element11.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element11.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance2.onChildrenAdded();
        element11.onChildrenAdded();
        final Label element12 = new Label();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("PopupInformation");
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element12.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.WEST);
        element12.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("name");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut11.onChildrenAdded();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance4 = element9.getAppearance();
        appearance4.setElementMap(elementMap);
        element9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(2, 2, 2, 2));
        appearance4.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance4.onChildrenAdded();
        final PixmapElement checkOut15 = PixmapElement.checkOut();
        checkOut15.setElementMap(elementMap);
        element9.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("texture");
        element14.setField("iconUrl");
        checkOut15.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        checkOut15.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        final List element15 = new List();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setHorizontal(false);
        element15.setCellSize(new Dimension(140, 32));
        element6.addBasicElement(element15);
        element15.onAttributesInitialized();
        final ItemRenderer element16 = new ItemRenderer();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        element16.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final RowLayout checkOut17 = RowLayout.checkOut();
        checkOut17.setAlign(Alignment9.WEST);
        checkOut16.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final Image element17 = new Image();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setExpandable(false);
        element17.setDisplaySize(new Dimension(32, 32));
        checkOut16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final PixmapElement checkOut18 = PixmapElement.checkOut();
        checkOut18.setElementMap(elementMap);
        element17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("texture");
        element18.setField("iconUrl");
        checkOut18.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        checkOut18.onChildrenAdded();
        element17.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setExpandable(false);
        element19.setStyle("bold");
        element19.setEnableAutoZoomShrink(true);
        checkOut16.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("name");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance5 = element19.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        element19.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut19 = ColorElement.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setName("text");
        checkOut19.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(0, 5, 0, 0));
        appearance5.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance5.onChildrenAdded();
        element19.onChildrenAdded();
        checkOut16.onChildrenAdded();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        final PropertyElement checkOut21 = PropertyElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setAttribute("content");
        checkOut21.setName("partyOccupationsSearch");
        checkOut21.setField("breeds");
        element6.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final PropertyElement checkOut22 = PropertyElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setAttribute("selectedValue");
        checkOut22.setName("partyOccupationsSearch");
        checkOut22.setField("selectedBreed");
        element6.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut23 = Container.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut5.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        final RowLayout checkOut24 = RowLayout.checkOut();
        checkOut24.setHorizontal(false);
        checkOut23.addBasicElement(checkOut24);
        checkOut24.onAttributesInitialized();
        checkOut24.onChildrenAdded();
        final Label element22 = new Label();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("bold");
        element22.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut23.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.WEST);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        final ComboBox element24 = new ComboBox();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setExpandable(false);
        element24.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange2 = new ListSelectionChangedListener();
        onListSelectionChange2.setCallBackFunc("wakfu.partySearch:selectRole");
        element24.setOnListSelectionChange(onListSelectionChange2);
        checkOut23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final RenderableContainer element25 = new RenderableContainer();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setPrefSize(new Dimension(0, 1));
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemRenderer element26 = new ItemRenderer();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final Container checkOut25 = Container.checkOut();
        checkOut25.setElementMap(elementMap);
        element26.addBasicElement(checkOut25);
        checkOut25.onAttributesInitialized();
        final RowLayout checkOut26 = RowLayout.checkOut();
        checkOut26.setAlign(Alignment9.WEST);
        checkOut25.addBasicElement(checkOut26);
        checkOut26.onAttributesInitialized();
        checkOut26.onChildrenAdded();
        final Image element27 = new Image();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup");
        element27.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element27.setOnPopupHide(onPopupHide2);
        element27.setPrefSize(new Dimension(24, 24));
        element27.setDisplaySize(new Dimension(32, 32));
        checkOut25.addBasicElement(element27);
        element27.onAttributesInitialized();
        final PopupElement element28 = new PopupElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAlign(Alignment9.NORTH);
        element28.setHotSpotPosition(Alignment9.SOUTH);
        element27.addBasicElement(element28);
        element28.onAttributesInitialized();
        final Container checkOut27 = Container.checkOut();
        checkOut27.setElementMap(elementMap);
        checkOut27.setPrefSize(new Dimension(10, 0));
        checkOut27.setStyle("popup");
        element28.addBasicElement(checkOut27);
        checkOut27.onAttributesInitialized();
        final RowLayout checkOut28 = RowLayout.checkOut();
        checkOut28.setHorizontal(false);
        checkOut27.addBasicElement(checkOut28);
        checkOut28.onAttributesInitialized();
        checkOut28.onChildrenAdded();
        final Label element29 = new Label();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("bold");
        element29.setText("%partySearch.role%".replace("%partySearch.role%", Xulor.getInstance().getTranslatedString("partySearch.role")));
        checkOut27.addBasicElement(element29);
        element29.onAttributesInitialized();
        final DecoratorAppearance appearance6 = element29.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element29.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut29 = ColorElement.checkOut();
        checkOut29.setElementMap(elementMap);
        checkOut29.setName("text");
        checkOut29.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut29);
        checkOut29.onAttributesInitialized();
        checkOut29.onChildrenAdded();
        appearance6.onChildrenAdded();
        element29.onChildrenAdded();
        final Label element30 = new Label();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("PopupInformation");
        checkOut27.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance7 = element30.getAppearance();
        appearance7.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance7).setAlignment(Alignment9.WEST);
        element30.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        appearance7.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("text");
        element31.setField("name");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        checkOut27.onChildrenAdded();
        element28.onChildrenAdded();
        final DecoratorAppearance appearance8 = element27.getAppearance();
        appearance8.setElementMap(elementMap);
        element27.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut30 = Margin.checkOut();
        checkOut30.setElementMap(elementMap);
        checkOut30.setInsets(new Insets(2, 2, 2, 2));
        appearance8.addBasicElement(checkOut30);
        checkOut30.onAttributesInitialized();
        checkOut30.onChildrenAdded();
        appearance8.onChildrenAdded();
        final ItemElement element32 = new ItemElement();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAttribute("style");
        element32.setField("style");
        element27.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        final PixmapElement checkOut31 = PixmapElement.checkOut();
        checkOut31.setElementMap(elementMap);
        element27.addBasicElement(checkOut31);
        checkOut31.onAttributesInitialized();
        checkOut31.onChildrenAdded();
        element27.onChildrenAdded();
        checkOut25.onChildrenAdded();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        final List element33 = new List();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setHorizontal(false);
        element33.setCellSize(new Dimension(140, 32));
        element24.addBasicElement(element33);
        element33.onAttributesInitialized();
        this.method64(element33);
        element33.onChildrenAdded();
        this.method65(element24);
        this.method66(element24);
        element24.onChildrenAdded();
        checkOut23.onChildrenAdded();
        this.method67(checkOut5);
        this.method68(checkOut5);
        checkOut5.onChildrenAdded();
        checkOut3.onChildrenAdded();
        this.method69(checkOut);
        this.method81(checkOut);
        this.method82(checkOut);
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method64(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Image element2 = new Image();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setExpandable(false);
        element2.setDisplaySize(new Dimension(32, 32));
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("style");
        element3.setField("style");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final PixmapElement checkOut3 = PixmapElement.checkOut();
        checkOut3.setElementMap(elementMap);
        element2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        element2.onChildrenAdded();
        final TextView element4 = new TextView();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setExpandable(false);
        element4.setStyle("bold");
        element4.setEnableAutoZoomShrink(true);
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("text");
        element6.setField("name");
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance = element4.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlign(Alignment9.WEST);
        element4.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut4 = ColorElement.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setName("text");
        checkOut4.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Margin checkOut5 = Margin.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        appearance.onChildrenAdded();
        element4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method65(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("content");
        checkOut.setName("partyOccupationsSearch");
        checkOut.setField("roles");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method66(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setAttribute("selectedValue");
        checkOut.setName("partyOccupationsSearch");
        checkOut.setField("selectedRoles");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method67(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bold");
        element.setText("%partySearch.mood%".replace("%partySearch.mood%", Xulor.getInstance().getTranslatedString("partySearch.mood")));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.WEST);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        final ComboBox element3 = new ComboBox();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        element3.setStyle("blue2");
        final ListSelectionChangedListener onListSelectionChange = new ListSelectionChangedListener();
        onListSelectionChange.setCallBackFunc("wakfu.partySearch:selectMood");
        element3.setOnListSelectionChange(onListSelectionChange);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final RenderableContainer element4 = new RenderableContainer();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setPrefSize(new Dimension(0, 1));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final ItemRenderer element5 = new ItemRenderer();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        element5.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setAlign(Alignment9.WEST);
        checkOut3.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Image element6 = new Image();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup");
        element6.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element6.setOnPopupHide(onPopupHide);
        element6.setPrefSize(new Dimension(24, 24));
        element6.setDisplaySize(new Dimension(32, 32));
        checkOut3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final PopupElement element7 = new PopupElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment9.NORTH);
        element7.setHotSpotPosition(Alignment9.SOUTH);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setPrefSize(new Dimension(10, 0));
        checkOut5.setStyle("popup");
        element7.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final RowLayout checkOut6 = RowLayout.checkOut();
        checkOut6.setHorizontal(false);
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final Label element8 = new Label();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("bold");
        element8.setText("%partySearch.mood%".replace("%partySearch.mood%", Xulor.getInstance().getTranslatedString("partySearch.mood")));
        checkOut5.addBasicElement(element8);
        element8.onAttributesInitialized();
        final DecoratorAppearance appearance = element8.getAppearance();
        appearance.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance).setAlignment(Alignment9.WEST);
        element8.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut7 = ColorElement.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setName("text");
        checkOut7.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance.onChildrenAdded();
        element8.onChildrenAdded();
        final Label element9 = new Label();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setStyle("PopupInformation");
        checkOut5.addBasicElement(element9);
        element9.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element9.getAppearance();
        appearance2.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance2).setAlignment(Alignment9.WEST);
        element9.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("name");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element6.getAppearance();
        appearance3.setElementMap(elementMap);
        element6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(2, 2, 2, 2));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("style");
        element11.setField("style");
        element6.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final PixmapElement checkOut9 = PixmapElement.checkOut();
        checkOut9.setElementMap(elementMap);
        element6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        element6.onChildrenAdded();
        checkOut3.onChildrenAdded();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final List element12 = new List();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setHorizontal(false);
        element12.setCellSize(new Dimension(140, 32));
        element3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemRenderer element13 = new ItemRenderer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        element13.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setAlign(Alignment9.WEST);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final Image element14 = new Image();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setExpandable(false);
        element14.setDisplaySize(new Dimension(32, 32));
        checkOut10.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("style");
        element15.setField("style");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final PixmapElement checkOut12 = PixmapElement.checkOut();
        checkOut12.setElementMap(elementMap);
        element14.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        element14.onChildrenAdded();
        final TextView element16 = new TextView();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setExpandable(false);
        element16.setStyle("bold");
        element16.setEnableAutoZoomShrink(true);
        checkOut10.addBasicElement(element16);
        element16.onAttributesInitialized();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.CENTER);
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final ItemElement element18 = new ItemElement();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAttribute("text");
        element18.setField("name");
        element16.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final DecoratorAppearance appearance4 = element16.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.WEST);
        element16.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        final Margin checkOut14 = Margin.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setInsets(new Insets(0, 5, 0, 0));
        appearance4.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        appearance4.onChildrenAdded();
        element16.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element13.onChildrenAdded();
        element12.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setAttribute("content");
        checkOut15.setName("partyOccupationsSearch");
        checkOut15.setField("moods");
        element3.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setAttribute("selectedValue");
        checkOut16.setName("partyOccupationsSearch");
        checkOut16.setField("selectedMood");
        element3.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method68(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setExpandable(false);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final Container checkOut2 = Container.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setExpandable(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut2.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut2.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 0, 0, 4));
        appearance.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut4 = RowLayout.checkOut();
        checkOut4.setHorizontal(false);
        checkOut4.setAlign(Alignment9.NORTH);
        checkOut2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        final Label element = new Label();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("bold");
        element.setText("%levelShort%".replace("%levelShort%", Xulor.getInstance().getTranslatedString("levelShort")));
        element.setExpandable(false);
        checkOut2.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final Container checkOut5 = Container.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut2.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setStyle("ShortcutRowBackgroundFull");
        checkOut5.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut6.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Padding element2 = new Padding();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setInsets(new Insets(3, 3, 3, 3));
        appearance2.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(5, 0, 5, 0));
        appearance2.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id = "minRequesterLevelSearch";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textEditor);
        }
        textEditor.setStyle("withoutBorder");
        textEditor.setPrefSize(new Dimension(25, 0));
        textEditor.setRestrict("[0-9]");
        textEditor.setMaxChars(3);
        textEditor.setSelectOnFocus(true);
        checkOut6.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final PropertyElement checkOut8 = PropertyElement.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setAttribute("text");
        checkOut8.setName("partyOccupationsSearch");
        checkOut8.setField("requesterMinLevel");
        textEditor.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance3 = textEditor.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlign(Alignment9.WEST);
        textEditor.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Label element3 = new Label();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setText("-");
        element3.setExpandable(false);
        checkOut5.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("ShortcutRowBackgroundFull");
        checkOut5.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element4 = new Padding();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setInsets(new Insets(3, 3, 3, 3));
        appearance4.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Margin checkOut10 = Margin.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setInsets(new Insets(5, 0, 5, 0));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        final String id2 = "maxRequesterLevelSearch";
        final TextEditor textEditor2 = new TextEditor();
        textEditor2.onCheckOut();
        textEditor2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textEditor2);
        }
        textEditor2.setStyle("withoutBorder");
        textEditor2.setPrefSize(new Dimension(25, 0));
        textEditor2.setRestrict("[0-9]");
        textEditor2.setMaxChars(3);
        textEditor2.setSelectOnFocus(true);
        checkOut9.addBasicElement(textEditor2);
        textEditor2.onAttributesInitialized();
        final PropertyElement checkOut11 = PropertyElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setAttribute("text");
        checkOut11.setName("partyOccupationsSearch");
        checkOut11.setField("requesterMaxLevel");
        textEditor2.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final DecoratorAppearance appearance5 = textEditor2.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        textEditor2.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        textEditor2.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut5.onChildrenAdded();
        checkOut2.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method69(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("white");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(8, 8, 8, 4));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final TextView element2 = new TextView();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setStyle("title");
        element2.setText("%partySearch.occupationChoice%".replace("%partySearch.occupationChoice%", Xulor.getInstance().getTranslatedString("partySearch.occupationChoice")));
        element2.setExpandable(false);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.WEST);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut3.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 3, 5, 3));
        appearance2.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance2.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setExpandable(false);
        checkOut3.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final RowLayout checkOut7 = RowLayout.checkOut();
        checkOut7.setHorizontal(false);
        checkOut7.setAlign(Alignment9.NORTH);
        checkOut6.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 0, 5));
        appearance3.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance3.onChildrenAdded();
        final Label element4 = new Label();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setText("%partySearch.familyName%".replace("%partySearch.familyName%", Xulor.getInstance().getTranslatedString("partySearch.familyName")));
        element4.setExpandable(false);
        checkOut6.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setStyle("ShortcutRowBackgroundFull");
        checkOut9.setExpandable(false);
        checkOut6.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final RowLayoutData element5 = new RowLayoutData();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setAlign(Alignment9.CENTER);
        checkOut9.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        final DecoratorAppearance appearance4 = checkOut9.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut9.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Padding element6 = new Padding();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setInsets(new Insets(3, 3, 3, 3));
        appearance4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        appearance4.onChildrenAdded();
        final String id = "familySearch";
        final TextEditor textEditor = new TextEditor();
        textEditor.onCheckOut();
        textEditor.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, textEditor);
        }
        textEditor.setStyle("withoutBorder");
        textEditor.setPrefSize(new Dimension(250, 0));
        textEditor.setGhostText("%editSearch%".replace("%editSearch%", Xulor.getInstance().getTranslatedString("editSearch")));
        textEditor.setSelectOnFocus(true);
        final KeyPressedListener onKeyPress = new KeyPressedListener();
        onKeyPress.setCallBackFunc("wakfu.partySearch:keyPressSearchOccupations(familySearch,minLevelSearch,maxLevelSearch)");
        textEditor.setOnKeyPress(onKeyPress);
        checkOut9.addBasicElement(textEditor);
        textEditor.onAttributesInitialized();
        final DecoratorAppearance appearance5 = textEditor.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlign(Alignment9.WEST);
        textEditor.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setAttribute("text");
        checkOut10.setName("partyOccupationsSearch");
        checkOut10.setField("searchString");
        textEditor.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        textEditor.onChildrenAdded();
        checkOut9.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final RowLayout checkOut12 = RowLayout.checkOut();
        checkOut12.setHorizontal(false);
        checkOut12.setAlign(Alignment9.NORTH);
        checkOut11.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        final DecoratorAppearance appearance6 = checkOut11.getAppearance();
        appearance6.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final Margin checkOut13 = Margin.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setInsets(new Insets(0, 0, 0, 0));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        final Label element7 = new Label();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setText("%levelShort%".replace("%levelShort%", Xulor.getInstance().getTranslatedString("levelShort")));
        element7.setExpandable(false);
        checkOut11.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut11.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final Container checkOut15 = Container.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setStyle("ShortcutRowBackgroundFull");
        checkOut15.setExpandable(false);
        checkOut14.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        checkOut15.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final DecoratorAppearance appearance7 = checkOut15.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut15.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Padding element9 = new Padding();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setInsets(new Insets(3, 3, 3, 3));
        appearance7.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        appearance7.onChildrenAdded();
        final String id2 = "minLevelSearch";
        final TextEditor textEditor2 = new TextEditor();
        textEditor2.onCheckOut();
        textEditor2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, textEditor2);
        }
        textEditor2.setStyle("withoutBorder");
        textEditor2.setPrefSize(new Dimension(25, 0));
        textEditor2.setExpandable(false);
        textEditor2.setRestrict("[0-9]");
        textEditor2.setMaxChars(3);
        textEditor2.setSelectOnFocus(true);
        final KeyPressedListener onKeyPress2 = new KeyPressedListener();
        onKeyPress2.setCallBackFunc("wakfu.partySearch:keyPressSearchOccupations(familySearch,minLevelSearch,maxLevelSearch)");
        textEditor2.setOnKeyPress(onKeyPress2);
        checkOut15.addBasicElement(textEditor2);
        textEditor2.onAttributesInitialized();
        final DecoratorAppearance appearance8 = textEditor2.getAppearance();
        appearance8.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance8).setAlign(Alignment9.WEST);
        textEditor2.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        appearance8.onChildrenAdded();
        final PropertyElement checkOut16 = PropertyElement.checkOut();
        checkOut16.setElementMap(elementMap);
        checkOut16.setAttribute("text");
        checkOut16.setName("partyOccupationsSearch");
        checkOut16.setField("occupationMinLevel");
        textEditor2.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        textEditor2.onChildrenAdded();
        checkOut15.onChildrenAdded();
        final Label element10 = new Label();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setText("-");
        element10.setExpandable(false);
        checkOut14.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setStyle("ShortcutRowBackgroundFull");
        checkOut17.setExpandable(false);
        checkOut14.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayoutData element11 = new RowLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAlign(Alignment9.CENTER);
        checkOut17.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final DecoratorAppearance appearance9 = checkOut17.getAppearance();
        appearance9.setElementMap(elementMap);
        checkOut17.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final Padding element12 = new Padding();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setInsets(new Insets(3, 3, 3, 3));
        appearance9.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        appearance9.onChildrenAdded();
        final String id3 = "maxLevelSearch";
        final TextEditor textEditor3 = new TextEditor();
        textEditor3.onCheckOut();
        textEditor3.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, textEditor3);
        }
        textEditor3.setStyle("withoutBorder");
        textEditor3.setPrefSize(new Dimension(25, 0));
        textEditor3.setExpandable(false);
        textEditor3.setRestrict("[0-9]");
        textEditor3.setMaxChars(3);
        textEditor3.setSelectOnFocus(true);
        final KeyPressedListener onKeyPress3 = new KeyPressedListener();
        onKeyPress3.setCallBackFunc("wakfu.partySearch:keyPressSearchOccupations(familySearch,minLevelSearch,maxLevelSearch)");
        textEditor3.setOnKeyPress(onKeyPress3);
        checkOut17.addBasicElement(textEditor3);
        textEditor3.onAttributesInitialized();
        final DecoratorAppearance appearance10 = textEditor3.getAppearance();
        appearance10.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance10).setAlign(Alignment9.WEST);
        textEditor3.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        appearance10.onChildrenAdded();
        final PropertyElement checkOut18 = PropertyElement.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setAttribute("text");
        checkOut18.setName("partyOccupationsSearch");
        checkOut18.setField("occupationMaxLevel");
        textEditor3.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        textEditor3.onChildrenAdded();
        checkOut17.onChildrenAdded();
        checkOut14.onChildrenAdded();
        checkOut11.onChildrenAdded();
        final Spacer element13 = new Spacer();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        checkOut3.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final Button element14 = new Button();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setExpandable(false);
        element14.setStyle("flat");
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.partySearch:filterOccupations(familySearch,minLevelSearch,maxLevelSearch)");
        element14.setOnClick(onClick);
        checkOut3.addBasicElement(element14);
        element14.onAttributesInitialized();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.SOUTH);
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final Image element16 = new Image();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setStyle("magnifyingGlass2");
        element16.setDisplaySize(new Dimension(20, 20));
        element16.setNonBlocking(true);
        element14.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element14.onChildrenAdded();
        final Button element17 = new Button();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setExpandable(false);
        element17.setStyle("flat");
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.partySearch:resetSearch");
        element17.setOnClick(onClick2);
        checkOut3.addBasicElement(element17);
        element17.onAttributesInitialized();
        final RowLayoutData element18 = new RowLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setAlign(Alignment9.SOUTH);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        final Image element19 = new Image();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("cancel");
        element19.setDisplaySize(new Dimension(20, 20));
        element19.setNonBlocking(true);
        element17.addBasicElement(element19);
        element19.onAttributesInitialized();
        element19.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final StaticLayout element20 = new StaticLayout();
        element20.onCheckOut();
        element20.setAdaptToContentSize(true);
        checkOut19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final List element21 = new List();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setCellSize(new Dimension(100.0f, 64));
        element21.setHorizontal(false);
        element21.setScrollBarBehaviour(ScrollBar.ScrollBarBehaviour.FORCE_DISPLAY);
        element21.setPrefSize(new Dimension(420, 0));
        element21.setExpandable(false);
        checkOut19.addBasicElement(element21);
        element21.onAttributesInitialized();
        final StaticLayoutData element22 = new StaticLayoutData();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setSize(new Dimension(100.0f, 100.0f));
        element21.addBasicElement(element22);
        element22.onAttributesInitialized();
        element22.onChildrenAdded();
        final ItemRenderer element23 = new ItemRenderer();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element21.addBasicElement(element23);
        element23.onAttributesInitialized();
        final ConditionResult element24 = new ConditionResult();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        final AndCondition element25 = new AndCondition();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element24.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemCondition element26 = new ItemCondition();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        final NotNullCondition element27 = new NotNullCondition();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        element26.onChildrenAdded();
        final ItemCondition element28 = new ItemCondition();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setField("monster");
        element25.addBasicElement(element28);
        element28.onAttributesInitialized();
        final NullCondition element29 = new NullCondition();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        element25.onChildrenAdded();
        element24.onChildrenAdded();
        final Container checkOut20 = Container.checkOut();
        checkOut20.setElementMap(elementMap);
        element23.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        final DecoratorAppearance appearance11 = checkOut20.getAppearance();
        appearance11.setElementMap(elementMap);
        checkOut20.addBasicElement(appearance11);
        appearance11.onAttributesInitialized();
        final PlainBackground element30 = new PlainBackground();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        appearance11.addBasicElement(element30);
        element30.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("color");
        element30.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setValue("0.37,0.44,0.43,1");
        element32.setElseValue("0.45,0.52,0.51,1");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final ListCondition element33 = new ListCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element33.setKey("evenIndex");
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        final TrueCondition element34 = new TrueCondition();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element33.addBasicElement(element34);
        element34.onAttributesInitialized();
        element34.onChildrenAdded();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        element30.onChildrenAdded();
        appearance11.onChildrenAdded();
        final String id4 = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, data);
        }
        checkOut20.addBasicElement(data);
        data.onAttributesInitialized();
        this.method70(data);
        data.onChildrenAdded();
        this.method71(checkOut20);
        this.method72(checkOut20);
        this.method73(checkOut20);
        checkOut20.onChildrenAdded();
        element23.onChildrenAdded();
        this.method74(element21);
        this.method75(element21);
        this.method77(element21);
        this.method78(element21);
        this.method79(element21);
        element21.onChildrenAdded();
        this.method80(checkOut19);
        checkOut19.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method70(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        element.setField("monster");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method71(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final String id = "dungeonView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        basicElement.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("value");
        element.setField("dungeon");
        data.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        data.onChildrenAdded();
        return data;
    }
    
    public BasicElement method72(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final TextView element = new TextView();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("title");
        element.setExpandable(false);
        element.setMinWidth(180);
        element.setMaxWidth(180);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance = element.getAppearance();
        appearance.setElementMap(elementMap);
        element.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final ColorElement checkOut = ColorElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("text");
        checkOut.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 5, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("text");
        element2.setField("name");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayoutData element3 = new RowLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAlign(Alignment9.CENTER);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method73(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setHorizontal(false);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 10, 0, 5));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(true);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("dungeonSmallIcon");
        element.setExpandable(false);
        checkOut3.addBasicElement(element);
        element.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element.getAppearance();
        appearance2.setElementMap(elementMap);
        element.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 0, 0, 5));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("modulationColor");
        element2.setField("dungeon/enabled");
        appearance2.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ConditionResult element3 = new ConditionResult();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setValue("#ffffffff");
        element3.setElseValue("#ffffff77");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        appearance2.onChildrenAdded();
        element.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(false);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("bold");
        element5.setExpandable(false);
        element5.setMinWidth(160);
        element5.setMaxWidth(160);
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final ItemElement element7 = new ItemElement();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAttribute("text");
        element7.setField("dungeon/name");
        element5.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final ColorElement checkOut9 = ColorElement.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setName("text");
        checkOut9.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        final TextView element8 = new TextView();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setExpandable(false);
        element8.setMinWidth(160);
        element8.setMaxWidth(160);
        checkOut7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final RowLayoutData element9 = new RowLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAlign(Alignment9.CENTER);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("text");
        element10.setField("dungeon/level");
        element8.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut10 = ColorElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("text");
        checkOut10.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        appearance4.onChildrenAdded();
        element8.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Spacer element11 = new Spacer();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        checkOut3.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final ToggleButton element12 = new ToggleButton();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("roundBlue");
        element12.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectOccupation(dungeonView)");
        element12.setOnSelectionChange(onSelectionChange);
        checkOut3.addBasicElement(element12);
        element12.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("visible");
        element13.setField("dungeon/enabled");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("selected");
        element14.setField("dungeon/selected");
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final RowLayoutData element15 = new RowLayoutData();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        element12.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method74(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final AndCondition element3 = new AndCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final ItemCondition element4 = new ItemCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        final NotNullCondition element5 = new NotNullCondition();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element4.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        element4.onChildrenAdded();
        final ItemCondition element6 = new ItemCondition();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setField("dungeon");
        element3.addBasicElement(element6);
        element6.onAttributesInitialized();
        final NullCondition element7 = new NullCondition();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element8 = new PlainBackground();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        appearance.addBasicElement(element8);
        element8.onAttributesInitialized();
        final ItemElement element9 = new ItemElement();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setAttribute("color");
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setValue("0.37,0.44,0.43,1");
        element10.setElseValue("0.45,0.52,0.51,1");
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ListCondition element11 = new ListCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setKey("evenIndex");
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final TrueCondition element12 = new TrueCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("value");
        element13.setField("monster");
        data.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "dungeonView";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element14 = new ItemElement();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAttribute("value");
        element14.setField("dungeon");
        data2.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        data2.onChildrenAdded();
        final TextView element15 = new TextView();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("title");
        element15.setExpandable(false);
        element15.setMinWidth(180);
        element15.setMaxWidth(180);
        checkOut.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element15.getAppearance();
        appearance2.setElementMap(elementMap);
        element15.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("text");
        checkOut2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("text");
        element16.setField("name");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        final RowLayoutData element17 = new RowLayoutData();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAlign(Alignment9.CENTER);
        element15.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 0, 5));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(true);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Image element18 = new Image();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("smallMonster");
        element18.setExpandable(false);
        checkOut6.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element18.getAppearance();
        appearance4.setElementMap(elementMap);
        element18.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("modulationColor");
        element19.setField("monster/enabled");
        appearance4.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setValue("#ffffffff");
        element20.setElseValue("#ffffff77");
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final TrueCondition element21 = new TrueCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        appearance4.onChildrenAdded();
        element18.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setStyle("bold");
        element22.setExpandable(false);
        element22.setMinWidth(160);
        element22.setMaxWidth(160);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("monster/name");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance5 = element22.getAppearance();
        appearance5.setElementMap(elementMap);
        element22.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("text");
        checkOut12.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element22.onChildrenAdded();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setExpandable(false);
        element25.setMinWidth(160);
        element25.setMaxWidth(160);
        checkOut10.addBasicElement(element25);
        element25.onAttributesInitialized();
        final RowLayoutData element26 = new RowLayoutData();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAlign(Alignment9.CENTER);
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("text");
        element27.setField("monster/level");
        element25.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final DecoratorAppearance appearance6 = element25.getAppearance();
        appearance6.setElementMap(elementMap);
        element25.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        element25.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Spacer element28 = new Spacer();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        checkOut6.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final ToggleButton element29 = new ToggleButton();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setStyle("roundBlue");
        element29.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectOccupation(monsterView)");
        element29.setOnSelectionChange(onSelectionChange);
        checkOut6.addBasicElement(element29);
        element29.onAttributesInitialized();
        final ItemElement element30 = new ItemElement();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setAttribute("visible");
        element30.setField("monster/enabled");
        element29.addBasicElement(element30);
        element30.onAttributesInitialized();
        element30.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("selected");
        element31.setField("monster/selected");
        element29.addBasicElement(element31);
        element31.onAttributesInitialized();
        element31.onChildrenAdded();
        final RowLayoutData element32 = new RowLayoutData();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setAlign(Alignment9.CENTER);
        element29.addBasicElement(element32);
        element32.onAttributesInitialized();
        element32.onChildrenAdded();
        element29.onChildrenAdded();
        checkOut6.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method75(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ItemCondition element3 = new ItemCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final NotNullCondition element4 = new NotNullCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        final ItemElement element6 = new ItemElement();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAttribute("color");
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setValue("0.37,0.44,0.43,1");
        element7.setElseValue("0.45,0.52,0.51,1");
        element6.addBasicElement(element7);
        element7.onAttributesInitialized();
        final ListCondition element8 = new ListCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setKey("evenIndex");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        final TrueCondition element9 = new TrueCondition();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        element6.onChildrenAdded();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        final String id = "monsterView";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, data);
        }
        checkOut.addBasicElement(data);
        data.onAttributesInitialized();
        final ItemElement element10 = new ItemElement();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setAttribute("value");
        element10.setField("monster");
        data.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        data.onChildrenAdded();
        final String id2 = "dungeonView";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data2);
        }
        checkOut.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element11 = new ItemElement();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setAttribute("value");
        element11.setField("dungeon");
        data2.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        data2.onChildrenAdded();
        final TextView element12 = new TextView();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setStyle("title");
        element12.setExpandable(false);
        element12.setMinWidth(180);
        element12.setMaxWidth(180);
        checkOut.addBasicElement(element12);
        element12.onAttributesInitialized();
        final DecoratorAppearance appearance2 = element12.getAppearance();
        appearance2.setElementMap(elementMap);
        element12.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final ColorElement checkOut2 = ColorElement.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setName("text");
        checkOut2.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance2.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Margin checkOut3 = Margin.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setInsets(new Insets(0, 5, 0, 0));
        appearance2.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        appearance2.onChildrenAdded();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("text");
        element13.setField("name");
        element12.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        final RowLayoutData element14 = new RowLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setAlign(Alignment9.CENTER);
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        element12.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final Container checkOut6 = Container.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        final DecoratorAppearance appearance3 = checkOut6.getAppearance();
        appearance3.setElementMap(elementMap);
        checkOut6.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut7 = Margin.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setInsets(new Insets(0, 10, 0, 5));
        appearance3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        checkOut7.onChildrenAdded();
        appearance3.onChildrenAdded();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setHorizontal(true);
        checkOut6.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final Image element15 = new Image();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setStyle("dungeonSmallIcon");
        element15.setExpandable(false);
        checkOut6.addBasicElement(element15);
        element15.onAttributesInitialized();
        final DecoratorAppearance appearance4 = element15.getAppearance();
        appearance4.setElementMap(elementMap);
        element15.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 0, 0, 5));
        appearance4.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        final ItemElement element16 = new ItemElement();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setAttribute("modulationColor");
        element16.setField("dungeon/enabled");
        appearance4.addBasicElement(element16);
        element16.onAttributesInitialized();
        final ConditionResult element17 = new ConditionResult();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setValue("#ffffffff");
        element17.setElseValue("#ffffff77");
        element16.addBasicElement(element17);
        element17.onAttributesInitialized();
        final TrueCondition element18 = new TrueCondition();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        element16.onChildrenAdded();
        appearance4.onChildrenAdded();
        element15.onChildrenAdded();
        final Container checkOut10 = Container.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setExpandable(false);
        checkOut6.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final RowLayout checkOut11 = RowLayout.checkOut();
        checkOut11.setHorizontal(false);
        checkOut10.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        final TextView element19 = new TextView();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setStyle("bold");
        element19.setExpandable(false);
        element19.setMinWidth(160);
        element19.setMaxWidth(160);
        checkOut10.addBasicElement(element19);
        element19.onAttributesInitialized();
        final RowLayoutData element20 = new RowLayoutData();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element20.setAlign(Alignment9.CENTER);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        element20.onChildrenAdded();
        final ItemElement element21 = new ItemElement();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element21.setAttribute("text");
        element21.setField("dungeon/name");
        element19.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        final DecoratorAppearance appearance5 = element19.getAppearance();
        appearance5.setElementMap(elementMap);
        element19.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut12 = ColorElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("text");
        checkOut12.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance5.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance5.onChildrenAdded();
        element19.onChildrenAdded();
        final TextView element22 = new TextView();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setExpandable(false);
        element22.setMinWidth(160);
        element22.setMaxWidth(160);
        checkOut10.addBasicElement(element22);
        element22.onAttributesInitialized();
        final RowLayoutData element23 = new RowLayoutData();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element23.setAlign(Alignment9.CENTER);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        element23.onChildrenAdded();
        final ItemElement element24 = new ItemElement();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAttribute("text");
        element24.setField("dungeon/level");
        element22.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final DecoratorAppearance appearance6 = element22.getAppearance();
        appearance6.setElementMap(elementMap);
        element22.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("text");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance6.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance6.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut10.onChildrenAdded();
        final Spacer element25 = new Spacer();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        checkOut6.addBasicElement(element25);
        element25.onAttributesInitialized();
        element25.onChildrenAdded();
        final ToggleButton element26 = new ToggleButton();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setStyle("roundBlue");
        element26.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectOccupation(dungeonView)");
        element26.setOnSelectionChange(onSelectionChange);
        checkOut6.addBasicElement(element26);
        element26.onAttributesInitialized();
        final ItemElement element27 = new ItemElement();
        element27.onCheckOut();
        element27.setElementMap(elementMap);
        element27.setAttribute("visible");
        element27.setField("dungeon/enabled");
        element26.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final ItemElement element28 = new ItemElement();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setAttribute("selected");
        element28.setField("dungeon/selected");
        element26.addBasicElement(element28);
        element28.onAttributesInitialized();
        element28.onChildrenAdded();
        final RowLayoutData element29 = new RowLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setAlign(Alignment9.CENTER);
        element26.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element26.onChildrenAdded();
        checkOut6.onChildrenAdded();
        final Container checkOut14 = Container.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut4.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut14.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut14.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut15 = Margin.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setInsets(new Insets(0, 10, 0, 5));
        appearance7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut16 = RowLayout.checkOut();
        checkOut16.setHorizontal(true);
        checkOut14.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        checkOut16.onChildrenAdded();
        final Image element30 = new Image();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setStyle("smallMonster");
        element30.setExpandable(false);
        checkOut14.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element30.getAppearance();
        appearance8.setElementMap(elementMap);
        element30.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final Margin checkOut17 = Margin.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setInsets(new Insets(0, 0, 0, 5));
        appearance8.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        checkOut17.onChildrenAdded();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("modulationColor");
        element31.setField("monster/enabled");
        appearance8.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setValue("#ffffffff");
        element32.setElseValue("#ffffff77");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final TrueCondition element33 = new TrueCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        appearance8.onChildrenAdded();
        element30.onChildrenAdded();
        final Container checkOut18 = Container.checkOut();
        checkOut18.setElementMap(elementMap);
        checkOut18.setExpandable(false);
        checkOut14.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        final RowLayout checkOut19 = RowLayout.checkOut();
        checkOut19.setHorizontal(false);
        checkOut18.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        checkOut19.onChildrenAdded();
        final TextView element34 = new TextView();
        element34.onCheckOut();
        element34.setElementMap(elementMap);
        element34.setStyle("bold");
        element34.setExpandable(false);
        element34.setMinWidth(160);
        element34.setMaxWidth(160);
        checkOut18.addBasicElement(element34);
        element34.onAttributesInitialized();
        final RowLayoutData element35 = new RowLayoutData();
        element35.onCheckOut();
        element35.setElementMap(elementMap);
        element35.setAlign(Alignment9.CENTER);
        element34.addBasicElement(element35);
        element35.onAttributesInitialized();
        element35.onChildrenAdded();
        final ItemElement element36 = new ItemElement();
        element36.onCheckOut();
        element36.setElementMap(elementMap);
        element36.setAttribute("text");
        element36.setField("monster/name");
        element34.addBasicElement(element36);
        element36.onAttributesInitialized();
        element36.onChildrenAdded();
        final DecoratorAppearance appearance9 = element34.getAppearance();
        appearance9.setElementMap(elementMap);
        element34.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ColorElement checkOut20 = ColorElement.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setName("text");
        checkOut20.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance9.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        appearance9.onChildrenAdded();
        element34.onChildrenAdded();
        final TextView element37 = new TextView();
        element37.onCheckOut();
        element37.setElementMap(elementMap);
        element37.setExpandable(false);
        element37.setMinWidth(160);
        element37.setMaxWidth(160);
        checkOut18.addBasicElement(element37);
        element37.onAttributesInitialized();
        final RowLayoutData element38 = new RowLayoutData();
        element38.onCheckOut();
        element38.setElementMap(elementMap);
        element38.setAlign(Alignment9.CENTER);
        element37.addBasicElement(element38);
        element38.onAttributesInitialized();
        element38.onChildrenAdded();
        final ItemElement element39 = new ItemElement();
        element39.onCheckOut();
        element39.setElementMap(elementMap);
        element39.setAttribute("text");
        element39.setField("monster/level");
        element37.addBasicElement(element39);
        element39.onAttributesInitialized();
        element39.onChildrenAdded();
        final DecoratorAppearance appearance10 = element37.getAppearance();
        appearance10.setElementMap(elementMap);
        element37.addBasicElement(appearance10);
        appearance10.onAttributesInitialized();
        final ColorElement checkOut21 = ColorElement.checkOut();
        checkOut21.setElementMap(elementMap);
        checkOut21.setName("text");
        checkOut21.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance10.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        appearance10.onChildrenAdded();
        element37.onChildrenAdded();
        checkOut18.onChildrenAdded();
        final Spacer element40 = new Spacer();
        element40.onCheckOut();
        element40.setElementMap(elementMap);
        checkOut14.addBasicElement(element40);
        element40.onAttributesInitialized();
        element40.onChildrenAdded();
        this.method76(checkOut14);
        checkOut14.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method76(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ToggleButton element = new ToggleButton();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("roundBlue");
        element.setExpandable(false);
        final SelectionChangedListener onSelectionChange = new SelectionChangedListener();
        onSelectionChange.setCallBackFunc("wakfu.partySearch:selectOccupation(monsterView)");
        element.setOnSelectionChange(onSelectionChange);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ItemElement element2 = new ItemElement();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAttribute("visible");
        element2.setField("monster/enabled");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("selected");
        element3.setField("monster/selected");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final RowLayoutData element4 = new RowLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setAlign(Alignment9.CENTER);
        element.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method77(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ListCondition element3 = new ListCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setKey("evenIndex");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setColor(new Color(0.37f, 0.44f, 0.43f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method78(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final ListCondition element3 = new ListCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setKey("oddIndex");
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        final TrueCondition element4 = new TrueCondition();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final PlainBackground element5 = new PlainBackground();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setColor(new Color(0.45f, 0.52f, 0.51f, 1.0f));
        appearance.addBasicElement(element5);
        element5.onAttributesInitialized();
        element5.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method79(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setName("partyOccupationsSearch");
        checkOut.setAttribute("content");
        checkOut.setField("pveOccupations");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method80(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("LineSeparatorVertical");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(7, 100.0f));
        element.setAlign(Alignment17.SOUTH_WEST);
        element.setXOffset(185);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        appearance.setModulationColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(3, 0, 3, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method81(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setExpandable(false);
        element.setText("%search%".replace("%search%", Xulor.getInstance().getTranslatedString("search")));
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.partySearch:filterResult(minRequesterLevelSearch,maxRequesterLevelSearch)");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method82(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PropertyElement checkOut = PropertyElement.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setLocal(true);
        checkOut.setName("currentPage");
        checkOut.setAttribute("visible");
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ConditionResult element = new ConditionResult();
        element.onCheckOut();
        element.setElementMap(elementMap);
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        final EqualCondition element2 = new EqualCondition();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setValue("1");
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method83(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final DecoratorAppearance appearance = ((Widget)basicElement).getAppearance();
        appearance.setElementMap(elementMap);
        basicElement.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut = Margin.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setInsets(new Insets(0, 61, 0, 0));
        appearance.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        checkOut.onChildrenAdded();
        final Padding element = new Padding();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInsets(new Insets(10, 5, 12, 5));
        appearance.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        appearance.onChildrenAdded();
        return appearance;
    }
    
    public BasicElement method84(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, 100.0f));
        element.setAlign(Alignment17.WEST);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method85(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final RowLayout checkOut2 = RowLayout.checkOut();
        checkOut2.setAlign(Alignment9.WEST);
        checkOut.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setExpandable(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut3.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(40, 0, 0, 0));
        appearance.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance.onChildrenAdded();
        final RowLayoutData element2 = new RowLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setAlign(Alignment9.NORTH);
        checkOut3.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut3.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final String id = "currentPage";
        final RadioGroup radioGroup = new RadioGroup();
        radioGroup.onCheckOut();
        radioGroup.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, radioGroup);
        }
        checkOut3.addBasicElement(radioGroup);
        radioGroup.onAttributesInitialized();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setAttribute("value");
        checkOut6.setName("currentPage");
        radioGroup.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        radioGroup.onChildrenAdded();
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        checkOut7.setExpandable(false);
        checkOut3.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final DecoratorAppearance appearance2 = checkOut7.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut7.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut8 = Margin.checkOut();
        checkOut8.setElementMap(elementMap);
        checkOut8.setInsets(new Insets(0, 0, 10, 0));
        appearance2.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        appearance2.onChildrenAdded();
        final StaticLayout element3 = new StaticLayout();
        element3.onCheckOut();
        element3.setAdaptToContentSize(true);
        checkOut7.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        final RadioButton element4 = new RadioButton();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setGroupId("currentPage");
        element4.setValue("0");
        element4.setStyle("bigLeftWindow");
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("popup(registrationPopup)");
        element4.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("closePopup");
        element4.setOnPopupHide(onPopupHide);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("wakfu.partySearch:displayPage(0)");
        element4.setOnClick(onClick);
        checkOut7.addBasicElement(element4);
        element4.onAttributesInitialized();
        final String id2 = "registrationPopup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        element4.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut9 = Container.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setPrefSize(new Dimension(10, 0));
        checkOut9.setStyle("popup");
        popupElement.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("white");
        element5.setEnableShrinking(false);
        element5.setText("%partySearch.registration%".replace("%partySearch.registration%", Xulor.getInstance().getTranslatedString("partySearch.registration")));
        checkOut9.addBasicElement(element5);
        element5.onAttributesInitialized();
        final DecoratorAppearance appearance3 = element5.getAppearance();
        appearance3.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance3).setAlignment(Alignment9.CENTER);
        element5.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut9.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setSize(new Dimension(69, 58));
        element6.setAlign(Alignment17.SOUTH);
        element4.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setLocal(true);
        checkOut10.setAttribute("enabled");
        checkOut10.setName("currentPage");
        element4.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        final ConditionResult element7 = new ConditionResult();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        checkOut10.addBasicElement(element7);
        element7.onAttributesInitialized();
        final NotEqualCondition element8 = new NotEqualCondition();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setValue("0");
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        element7.onChildrenAdded();
        checkOut10.onChildrenAdded();
        element4.onChildrenAdded();
        final Image element9 = new Image();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setDisplaySize(new Dimension(40, 43));
        element9.setNonBlocking(true);
        element9.setStyle("scrollIcon");
        checkOut7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final StaticLayoutData element10 = new StaticLayoutData();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setSize(new Dimension(-2, -2));
        element10.setAlign(Alignment17.NORTH);
        element10.setYOffset(12);
        element10.setXOffset(0);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        element10.onChildrenAdded();
        element9.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final Container checkOut11 = Container.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setExpandable(false);
        checkOut3.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        final DecoratorAppearance appearance4 = checkOut11.getAppearance();
        appearance4.setElementMap(elementMap);
        checkOut11.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut12 = Margin.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setInsets(new Insets(0, 0, 10, 0));
        appearance4.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        appearance4.onChildrenAdded();
        final StaticLayout element11 = new StaticLayout();
        element11.onCheckOut();
        element11.setAdaptToContentSize(true);
        checkOut11.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        final RadioButton element12 = new RadioButton();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setGroupId("currentPage");
        element12.setValue("1");
        element12.setStyle("bigLeftWindow");
        final PopupDisplayListener onPopupDisplay2 = new PopupDisplayListener();
        onPopupDisplay2.setCallBackFunc("popup(searchPopup)");
        element12.setOnPopupDisplay(onPopupDisplay2);
        final PopupHideListener onPopupHide2 = new PopupHideListener();
        onPopupHide2.setCallBackFunc("closePopup");
        element12.setOnPopupHide(onPopupHide2);
        final MouseClickedListener onClick2 = new MouseClickedListener();
        onClick2.setCallBackFunc("wakfu.partySearch:displayPage(1)");
        element12.setOnClick(onClick2);
        checkOut11.addBasicElement(element12);
        element12.onAttributesInitialized();
        final String id3 = "searchPopup";
        final PopupElement popupElement2 = new PopupElement();
        popupElement2.onCheckOut();
        popupElement2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, popupElement2);
        }
        popupElement2.setAlign(Alignment9.NORTH);
        popupElement2.setHotSpotPosition(Alignment9.SOUTH);
        element12.addBasicElement(popupElement2);
        popupElement2.onAttributesInitialized();
        final Container checkOut13 = Container.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setPrefSize(new Dimension(10, 0));
        checkOut13.setStyle("popup");
        popupElement2.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        final TextView element13 = new TextView();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setStyle("white");
        element13.setEnableShrinking(false);
        element13.setText("%partySearch.search%".replace("%partySearch.search%", Xulor.getInstance().getTranslatedString("partySearch.search")));
        checkOut13.addBasicElement(element13);
        element13.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element13.getAppearance();
        appearance5.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance5).setAlignment(Alignment9.CENTER);
        element13.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        appearance5.onChildrenAdded();
        element13.onChildrenAdded();
        checkOut13.onChildrenAdded();
        popupElement2.onChildrenAdded();
        final StaticLayoutData element14 = new StaticLayoutData();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setSize(new Dimension(69, 58));
        element14.setAlign(Alignment17.SOUTH);
        element12.addBasicElement(element14);
        element14.onAttributesInitialized();
        element14.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setLocal(true);
        checkOut14.setAttribute("enabled");
        checkOut14.setName("currentPage");
        element12.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        final ConditionResult element15 = new ConditionResult();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        checkOut14.addBasicElement(element15);
        element15.onAttributesInitialized();
        final NotEqualCondition element16 = new NotEqualCondition();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setValue("1");
        element15.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        element15.onChildrenAdded();
        checkOut14.onChildrenAdded();
        element12.onChildrenAdded();
        final Image element17 = new Image();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setDisplaySize(new Dimension(44, 46));
        element17.setNonBlocking(true);
        element17.setStyle("preloading");
        checkOut11.addBasicElement(element17);
        element17.onAttributesInitialized();
        final StaticLayoutData element18 = new StaticLayoutData();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setSize(new Dimension(-2, -2));
        element18.setAlign(Alignment17.NORTH);
        element18.setYOffset(15);
        element18.setXOffset(0);
        element17.addBasicElement(element18);
        element18.onAttributesInitialized();
        element18.onChildrenAdded();
        element17.onChildrenAdded();
        checkOut11.onChildrenAdded();
        checkOut3.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method86(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-18);
        element2.setYOffset(-12);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final StaticLayoutData element3 = new StaticLayoutData();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setSize(new Dimension(-2, -2));
        element3.setAlign(Alignment17.NORTH_WEST);
        element3.setXOffset(488);
        element3.setYOffset(-12);
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method87(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(-2, -2));
        element.setAlign(Alignment17.CENTER);
        element.setInitValue(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
}
