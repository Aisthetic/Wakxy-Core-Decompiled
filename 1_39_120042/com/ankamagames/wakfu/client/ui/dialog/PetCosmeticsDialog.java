package com.ankamagames.wakfu.client.ui.dialog;

import java.util.*;
import com.ankamagames.xulor2.util.*;
import java.awt.*;
import com.ankamagames.xulor2.appearance.spacing.*;
import com.ankamagames.xulor2.core.*;
import com.ankamagames.framework.graphics.image.*;
import com.ankamagames.xulor2.layout.*;
import com.ankamagames.xulor2.core.renderer.*;
import com.ankamagames.xulor2.property.*;
import com.ankamagames.xulor2.nongraphical.*;
import com.ankamagames.xulor2.*;
import com.ankamagames.xulor2.core.renderer.condition.*;
import com.ankamagames.xulor2.util.alignment.*;
import com.ankamagames.xulor2.appearance.*;
import com.ankamagames.xulor2.component.*;
import com.ankamagames.xulor2.event.listener.*;

public class PetCosmeticsDialog implements BasicElementFactory
{
    private Stack<ElementMap> elementMaps;
    private Environment env;
    
    public PetCosmeticsDialog() {
        super();
        this.elementMaps = new Stack<ElementMap>();
    }
    
    @Override
    public BasicElement getElement(final Environment env, final ElementMap item) {
        this.env = env;
        this.elementMaps.push(item);
        final ElementMap elementMap = this.elementMaps.peek();
        final Window window = new Window();
        window.onCheckOut();
        window.setElementMap(elementMap);
        window.setNonBlocking(true);
        window.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setInitValue(true);
        element.setSize(new Dimension(-2, -2));
        window.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        window.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setStyle("challengeCurrent");
        window.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final DecoratorAppearance appearance = checkOut.getAppearance();
        appearance.setElementMap(elementMap);
        checkOut.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(68, 0, 0, 0));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        final Padding element3 = new Padding();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setInsets(new Insets(105, 22, 27, 22));
        appearance.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        appearance.onChildrenAdded();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final RowLayout checkOut3 = RowLayout.checkOut();
        checkOut3.setHorizontal(false);
        checkOut3.setAlign(Alignment9.NORTH);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        checkOut3.onChildrenAdded();
        final Container checkOut4 = Container.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        final RowLayout checkOut5 = RowLayout.checkOut();
        checkOut5.setHorizontal(false);
        checkOut4.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final DecoratorAppearance appearance2 = checkOut4.getAppearance();
        appearance2.setElementMap(elementMap);
        checkOut4.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        final Margin checkOut6 = Margin.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setInsets(new Insets(0, 12, 0, 12));
        appearance2.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        appearance2.onChildrenAdded();
        final String id = "selectedNameContainer";
        final Container checkOut7 = Container.checkOut();
        checkOut7.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, checkOut7);
        }
        checkOut7.setStyle("caracs");
        checkOut7.setExpandable(false);
        checkOut7.setPrefSize(new Dimension(0, 0));
        checkOut4.addBasicElement(checkOut7);
        checkOut7.onAttributesInitialized();
        final RowLayout checkOut8 = RowLayout.checkOut();
        checkOut8.setAlign(Alignment9.CENTER);
        checkOut7.addBasicElement(checkOut8);
        checkOut8.onAttributesInitialized();
        checkOut8.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut7.getAppearance();
        appearance3.setElementMap(elementMap);
        appearance3.setModulationColor(new Color(0.3019608f, 0.24705882f, 0.11764706f, 1.0f));
        checkOut7.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        final Margin checkOut9 = Margin.checkOut();
        checkOut9.setElementMap(elementMap);
        checkOut9.setInsets(new Insets(0, 8, 0, 8));
        appearance3.addBasicElement(checkOut9);
        checkOut9.onAttributesInitialized();
        checkOut9.onChildrenAdded();
        appearance3.onChildrenAdded();
        final TextView element5 = new TextView();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setStyle("bold");
        element5.setMinWidth(1);
        element5.setMaxWidth(238);
        element5.setPrefSize(new Dimension(0, 12));
        checkOut7.addBasicElement(element5);
        element5.onAttributesInitialized();
        final RowLayoutData element6 = new RowLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment9.CENTER);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final PropertyElement checkOut10 = PropertyElement.checkOut();
        checkOut10.setElementMap(elementMap);
        checkOut10.setName("localPlayer");
        checkOut10.setAttribute("text");
        checkOut10.setField("petCosmeticsInventory/selectedItem/name");
        element5.addBasicElement(checkOut10);
        checkOut10.onAttributesInitialized();
        checkOut10.onChildrenAdded();
        final DecoratorAppearance appearance4 = element5.getAppearance();
        appearance4.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance4).setAlign(Alignment9.CENTER);
        element5.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final ColorElement checkOut11 = ColorElement.checkOut();
        checkOut11.setElementMap(elementMap);
        checkOut11.setName("text");
        checkOut11.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        appearance4.addBasicElement(checkOut11);
        checkOut11.onAttributesInitialized();
        checkOut11.onChildrenAdded();
        appearance4.onChildrenAdded();
        element5.onChildrenAdded();
        checkOut7.onChildrenAdded();
        final String id2 = "pet";
        final Data data = new Data();
        data.onCheckOut();
        data.setElementMap(elementMap);
        if (elementMap != null && id2 != null) {
            elementMap.add(id2, data);
        }
        checkOut4.addBasicElement(data);
        data.onAttributesInitialized();
        final PropertyElement checkOut12 = PropertyElement.checkOut();
        checkOut12.setElementMap(elementMap);
        checkOut12.setName("pet");
        checkOut12.setAttribute("value");
        checkOut12.setLocal(true);
        data.addBasicElement(checkOut12);
        checkOut12.onAttributesInitialized();
        checkOut12.onChildrenAdded();
        data.onChildrenAdded();
        final List element7 = new List();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setCellSize(new Dimension(50, 50));
        element7.setAutoIdealSize(true);
        element7.setIdealSizeMinColumns(5);
        element7.setIdealSizeMaxColumns(5);
        element7.setIdealSizeMinRows(5);
        element7.setIdealSizeMaxRows(5);
        element7.setCanSelectNull(false);
        checkOut4.addBasicElement(element7);
        element7.onAttributesInitialized();
        final DecoratorAppearance appearance5 = element7.getAppearance();
        appearance5.setElementMap(elementMap);
        element7.addBasicElement(appearance5);
        appearance5.onAttributesInitialized();
        final ColorElement checkOut13 = ColorElement.checkOut();
        checkOut13.setElementMap(elementMap);
        checkOut13.setName("selection");
        checkOut13.setColor(new Color(1.0f, 1.0f, 1.0f, 0.5f));
        appearance5.addBasicElement(checkOut13);
        checkOut13.onAttributesInitialized();
        checkOut13.onChildrenAdded();
        appearance5.onChildrenAdded();
        final RowLayoutData element8 = new RowLayoutData();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setAlign(Alignment9.CENTER);
        element7.addBasicElement(element8);
        element8.onAttributesInitialized();
        element8.onChildrenAdded();
        final PropertyElement checkOut14 = PropertyElement.checkOut();
        checkOut14.setElementMap(elementMap);
        checkOut14.setName("localPlayer");
        checkOut14.setAttribute("content");
        checkOut14.setField("petCosmeticsInventory/items");
        element7.addBasicElement(checkOut14);
        checkOut14.onAttributesInitialized();
        checkOut14.onChildrenAdded();
        final PropertyElement checkOut15 = PropertyElement.checkOut();
        checkOut15.setElementMap(elementMap);
        checkOut15.setName("localPlayer");
        checkOut15.setAttribute("selectedValue");
        checkOut15.setField("petCosmeticsInventory/selectedItem");
        element7.addBasicElement(checkOut15);
        checkOut15.onAttributesInitialized();
        checkOut15.onChildrenAdded();
        final ItemRenderer element9 = new ItemRenderer();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        final ItemClickListener onItemClick = new ItemClickListener();
        onItemClick.setCallBackFunc("wakfu.petCosmetics:selectCostume(pet)");
        element9.setOnItemClick(onItemClick);
        element7.addBasicElement(element9);
        element9.onAttributesInitialized();
        final ConditionResult element10 = new ConditionResult();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element9.addBasicElement(element10);
        element10.onAttributesInitialized();
        final ItemCondition element11 = new ItemCondition();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        final NotNullCondition element12 = new NotNullCondition();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element11.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final String id3 = "item";
        final Data data2 = new Data();
        data2.onCheckOut();
        data2.setElementMap(elementMap);
        if (elementMap != null && id3 != null) {
            elementMap.add(id3, data2);
        }
        element9.addBasicElement(data2);
        data2.onAttributesInitialized();
        final ItemElement element13 = new ItemElement();
        element13.onCheckOut();
        element13.setElementMap(elementMap);
        element13.setAttribute("value");
        element13.setField("refItem");
        data2.addBasicElement(element13);
        element13.onAttributesInitialized();
        element13.onChildrenAdded();
        data2.onChildrenAdded();
        final Container checkOut16 = Container.checkOut();
        checkOut16.setElementMap(elementMap);
        final PopupDisplayListener onPopupDisplay = new PopupDisplayListener();
        onPopupDisplay.setCallBackFunc("wakfu.popupInfos:showPopup(item,popup,selectedNameContainer)");
        checkOut16.setOnPopupDisplay(onPopupDisplay);
        final PopupHideListener onPopupHide = new PopupHideListener();
        onPopupHide.setCallBackFunc("wakfu.popupInfos:closePopup");
        checkOut16.setOnPopupHide(onPopupHide);
        element9.addBasicElement(checkOut16);
        checkOut16.onAttributesInitialized();
        final String id4 = "popup";
        final PopupElement popupElement = new PopupElement();
        popupElement.onCheckOut();
        popupElement.setElementMap(elementMap);
        if (elementMap != null && id4 != null) {
            elementMap.add(id4, popupElement);
        }
        popupElement.setAlign(Alignment9.NORTH);
        popupElement.setHotSpotPosition(Alignment9.SOUTH);
        checkOut16.addBasicElement(popupElement);
        popupElement.onAttributesInitialized();
        final Container checkOut17 = Container.checkOut();
        checkOut17.setElementMap(elementMap);
        checkOut17.setPrefSize(new Dimension(10, 0));
        checkOut17.setStyle("popup");
        popupElement.addBasicElement(checkOut17);
        checkOut17.onAttributesInitialized();
        final RowLayout checkOut18 = RowLayout.checkOut();
        checkOut18.setHorizontal(false);
        checkOut18.setAlign(Alignment9.NORTH);
        checkOut17.addBasicElement(checkOut18);
        checkOut18.onAttributesInitialized();
        checkOut18.onChildrenAdded();
        final Label element14 = new Label();
        element14.onCheckOut();
        element14.setElementMap(elementMap);
        element14.setStyle("whiteBold");
        element14.setExpandable(false);
        checkOut17.addBasicElement(element14);
        element14.onAttributesInitialized();
        final ItemElement element15 = new ItemElement();
        element15.onCheckOut();
        element15.setElementMap(elementMap);
        element15.setAttribute("text");
        element15.setField("name");
        element14.addBasicElement(element15);
        element15.onAttributesInitialized();
        element15.onChildrenAdded();
        final DecoratorAppearance appearance6 = element14.getAppearance();
        appearance6.setElementMap(elementMap);
        ((TextWidgetAppearance)appearance6).setAlignment(Alignment9.WEST);
        element14.addBasicElement(appearance6);
        appearance6.onAttributesInitialized();
        appearance6.onChildrenAdded();
        element14.onChildrenAdded();
        final Container checkOut19 = Container.checkOut();
        checkOut19.setElementMap(elementMap);
        checkOut19.setStyle("backgroundPopupLight");
        checkOut19.setVisible(false);
        checkOut17.addBasicElement(checkOut19);
        checkOut19.onAttributesInitialized();
        final DecoratorAppearance appearance7 = checkOut19.getAppearance();
        appearance7.setElementMap(elementMap);
        checkOut19.addBasicElement(appearance7);
        appearance7.onAttributesInitialized();
        final Margin checkOut20 = Margin.checkOut();
        checkOut20.setElementMap(elementMap);
        checkOut20.setInsets(new Insets(5, 0, 0, 0));
        appearance7.addBasicElement(checkOut20);
        checkOut20.onAttributesInitialized();
        checkOut20.onChildrenAdded();
        final Padding element16 = new Padding();
        element16.onCheckOut();
        element16.setElementMap(elementMap);
        element16.setInsets(new Insets(7, 7, 7, 7));
        appearance7.addBasicElement(element16);
        element16.onAttributesInitialized();
        element16.onChildrenAdded();
        appearance7.onChildrenAdded();
        final RowLayout checkOut21 = RowLayout.checkOut();
        checkOut21.setHorizontal(false);
        checkOut19.addBasicElement(checkOut21);
        checkOut21.onAttributesInitialized();
        checkOut21.onChildrenAdded();
        final ItemElement element17 = new ItemElement();
        element17.onCheckOut();
        element17.setElementMap(elementMap);
        element17.setAttribute("visible");
        element17.setField("hasConditions");
        checkOut19.addBasicElement(element17);
        element17.onAttributesInitialized();
        element17.onChildrenAdded();
        final TextView element18 = new TextView();
        element18.onCheckOut();
        element18.setElementMap(elementMap);
        element18.setStyle("WhiteBold");
        element18.setMinWidth(1);
        element18.setMaxWidth(250);
        element18.setExpandable(false);
        element18.setText("%petCosmeticNotCompatible%".replace("%petCosmeticNotCompatible%", Xulor.getInstance().getTranslatedString("petCosmeticNotCompatible")));
        checkOut19.addBasicElement(element18);
        element18.onAttributesInitialized();
        final DecoratorAppearance appearance8 = element18.getAppearance();
        appearance8.setElementMap(elementMap);
        element18.addBasicElement(appearance8);
        appearance8.onAttributesInitialized();
        final ColorElement checkOut22 = ColorElement.checkOut();
        checkOut22.setElementMap(elementMap);
        checkOut22.setColor(new Color(0.8f, 0.26666668f, 0.26666668f, 1.0f));
        appearance8.addBasicElement(checkOut22);
        checkOut22.onAttributesInitialized();
        checkOut22.onChildrenAdded();
        appearance8.onChildrenAdded();
        final ItemElement element19 = new ItemElement();
        element19.onCheckOut();
        element19.setElementMap(elementMap);
        element19.setAttribute("visible");
        element19.setField("compatible");
        element18.addBasicElement(element19);
        element19.onAttributesInitialized();
        final ConditionResult element20 = new ConditionResult();
        element20.onCheckOut();
        element20.setElementMap(elementMap);
        element19.addBasicElement(element20);
        element20.onAttributesInitialized();
        final FalseCondition element21 = new FalseCondition();
        element21.onCheckOut();
        element21.setElementMap(elementMap);
        element20.addBasicElement(element21);
        element21.onAttributesInitialized();
        element21.onChildrenAdded();
        element20.onChildrenAdded();
        element19.onChildrenAdded();
        element18.onChildrenAdded();
        final StackList element22 = new StackList();
        element22.onCheckOut();
        element22.setElementMap(elementMap);
        element22.setHorizontal(false);
        element22.setInnerExpandable(false);
        checkOut19.addBasicElement(element22);
        element22.onAttributesInitialized();
        final PropertyElement checkOut23 = PropertyElement.checkOut();
        checkOut23.setElementMap(elementMap);
        checkOut23.setName("itemPopupDetail");
        checkOut23.setAttribute("content");
        checkOut23.setField("conditionDescription");
        element22.addBasicElement(checkOut23);
        checkOut23.onAttributesInitialized();
        checkOut23.onChildrenAdded();
        final ItemRenderer element23 = new ItemRenderer();
        element23.onCheckOut();
        element23.setElementMap(elementMap);
        element22.addBasicElement(element23);
        element23.onAttributesInitialized();
        final RowLayoutData element24 = new RowLayoutData();
        element24.onCheckOut();
        element24.setElementMap(elementMap);
        element24.setAlign(Alignment9.WEST);
        element23.addBasicElement(element24);
        element24.onAttributesInitialized();
        element24.onChildrenAdded();
        final TextView element25 = new TextView();
        element25.onCheckOut();
        element25.setElementMap(elementMap);
        element25.setStyle("WhiteBold");
        element25.setMinWidth(1);
        element25.setMaxWidth(250);
        element25.setExpandable(false);
        element23.addBasicElement(element25);
        element25.onAttributesInitialized();
        final ItemElement element26 = new ItemElement();
        element26.onCheckOut();
        element26.setElementMap(elementMap);
        element26.setAttribute("text");
        element25.addBasicElement(element26);
        element26.onAttributesInitialized();
        element26.onChildrenAdded();
        element25.onChildrenAdded();
        element23.onChildrenAdded();
        element22.onChildrenAdded();
        checkOut19.onChildrenAdded();
        checkOut17.onChildrenAdded();
        popupElement.onChildrenAdded();
        final StaticLayout element27 = new StaticLayout();
        element27.onCheckOut();
        element27.setAdaptToContentSize(true);
        checkOut16.addBasicElement(element27);
        element27.onAttributesInitialized();
        element27.onChildrenAdded();
        final Image element28 = new Image();
        element28.onCheckOut();
        element28.setElementMap(elementMap);
        element28.setStyle("iconEmptyEmote");
        element28.setExpandable(false);
        element28.setDisplaySize(new Dimension(48, 48));
        checkOut16.addBasicElement(element28);
        element28.onAttributesInitialized();
        final StaticLayoutData element29 = new StaticLayoutData();
        element29.onCheckOut();
        element29.setElementMap(elementMap);
        element29.setSize(new Dimension(100.0f, 100.0f));
        element28.addBasicElement(element29);
        element29.onAttributesInitialized();
        element29.onChildrenAdded();
        element28.onChildrenAdded();
        final Image element30 = new Image();
        element30.onCheckOut();
        element30.setElementMap(elementMap);
        element30.setExpandable(false);
        element30.setDisplaySize(new Dimension(48, 48));
        checkOut16.addBasicElement(element30);
        element30.onAttributesInitialized();
        final DecoratorAppearance appearance9 = element30.getAppearance();
        appearance9.setElementMap(elementMap);
        element30.addBasicElement(appearance9);
        appearance9.onAttributesInitialized();
        final ItemElement element31 = new ItemElement();
        element31.onCheckOut();
        element31.setElementMap(elementMap);
        element31.setAttribute("modulationColor");
        element31.setField("compatible");
        appearance9.addBasicElement(element31);
        element31.onAttributesInitialized();
        final ConditionResult element32 = new ConditionResult();
        element32.onCheckOut();
        element32.setElementMap(elementMap);
        element32.setValue("1,1,1,1");
        element32.setElseValue("1,1,1,0.5");
        element31.addBasicElement(element32);
        element32.onAttributesInitialized();
        final TrueCondition element33 = new TrueCondition();
        element33.onCheckOut();
        element33.setElementMap(elementMap);
        element32.addBasicElement(element33);
        element33.onAttributesInitialized();
        element33.onChildrenAdded();
        element32.onChildrenAdded();
        element31.onChildrenAdded();
        appearance9.onChildrenAdded();
        this.method0(element30);
        this.method1(element30);
        this.method2(element30);
        element30.onChildrenAdded();
        this.method3(checkOut16);
        checkOut16.onChildrenAdded();
        element9.onChildrenAdded();
        this.method4(element7);
        element7.onChildrenAdded();
        checkOut4.onChildrenAdded();
        checkOut.onChildrenAdded();
        this.method5(window);
        this.method6(window);
        window.onChildrenAdded();
        return window;
    }
    
    public BasicElement method0(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("visible");
        element.setField("noCostumes");
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final ConditionResult element2 = new ConditionResult();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        final FalseCondition element3 = new FalseCondition();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element2.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method1(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method2(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final PixmapElement checkOut = PixmapElement.checkOut();
        checkOut.setElementMap(elementMap);
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final ItemElement element = new ItemElement();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setAttribute("texture");
        element.setField("iconUrl");
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method3(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Image element = new Image();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("iconUnknownEmote");
        element.setExpandable(false);
        element.setDisplaySize(new Dimension(48, 48));
        element.setNonBlocking(true);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(100.0f, 100.0f));
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final ItemElement element3 = new ItemElement();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setAttribute("visible");
        element3.setField("noCostumes");
        element.addBasicElement(element3);
        element3.onAttributesInitialized();
        element3.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method4(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final ItemRenderer element = new ItemRenderer();
        element.onCheckOut();
        element.setElementMap(elementMap);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        element.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final Image element3 = new Image();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setStyle("iconEmptyEmote");
        element3.setExpandable(false);
        element3.setDisplaySize(new Dimension(48, 48));
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 100.0f));
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        element3.onChildrenAdded();
        checkOut.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
    
    public BasicElement method5(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Container checkOut = Container.checkOut();
        checkOut.setElementMap(elementMap);
        checkOut.setPrefSize(new Dimension(0, 200));
        basicElement.addBasicElement(checkOut);
        checkOut.onAttributesInitialized();
        final StaticLayoutData element = new StaticLayoutData();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setSize(new Dimension(100.0f, 100.0f));
        checkOut.addBasicElement(element);
        element.onAttributesInitialized();
        element.onChildrenAdded();
        final StaticLayout element2 = new StaticLayout();
        element2.onCheckOut();
        element2.setAdaptToContentSize(true);
        checkOut.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        final WindowMovePoint element3 = new WindowMovePoint();
        element3.onCheckOut();
        element3.setElementMap(elementMap);
        element3.setExpandable(false);
        checkOut.addBasicElement(element3);
        element3.onAttributesInitialized();
        final StaticLayoutData element4 = new StaticLayoutData();
        element4.onCheckOut();
        element4.setElementMap(elementMap);
        element4.setSize(new Dimension(100.0f, 20));
        element4.setAlign(Alignment17.NORTH);
        element4.setYOffset(-75);
        element3.addBasicElement(element4);
        element4.onAttributesInitialized();
        element4.onChildrenAdded();
        final DecoratorAppearance appearance = element3.getAppearance();
        appearance.setElementMap(elementMap);
        element3.addBasicElement(appearance);
        appearance.onAttributesInitialized();
        final Margin checkOut2 = Margin.checkOut();
        checkOut2.setElementMap(elementMap);
        checkOut2.setInsets(new Insets(0, 30, 0, 30));
        appearance.addBasicElement(checkOut2);
        checkOut2.onAttributesInitialized();
        checkOut2.onChildrenAdded();
        appearance.onChildrenAdded();
        element3.onChildrenAdded();
        final WindowMovePoint element5 = new WindowMovePoint();
        element5.onCheckOut();
        element5.setElementMap(elementMap);
        element5.setNonBlocking(false);
        checkOut.addBasicElement(element5);
        element5.onAttributesInitialized();
        final StaticLayoutData element6 = new StaticLayoutData();
        element6.onCheckOut();
        element6.setElementMap(elementMap);
        element6.setAlign(Alignment17.NORTH);
        element6.setSize(new Dimension(160, 160));
        element6.setYOffset(0);
        element5.addBasicElement(element6);
        element6.onAttributesInitialized();
        element6.onChildrenAdded();
        final DecoratorAppearance appearance2 = element5.getAppearance();
        appearance2.setElementMap(elementMap);
        appearance2.setShape(WidgetShape.CIRCLE);
        element5.addBasicElement(appearance2);
        appearance2.onAttributesInitialized();
        appearance2.onChildrenAdded();
        element5.onChildrenAdded();
        final Container checkOut3 = Container.checkOut();
        checkOut3.setElementMap(elementMap);
        checkOut3.setNonBlocking(false);
        checkOut.addBasicElement(checkOut3);
        checkOut3.onAttributesInitialized();
        final StaticLayoutData element7 = new StaticLayoutData();
        element7.onCheckOut();
        element7.setElementMap(elementMap);
        element7.setAlign(Alignment17.NORTH);
        element7.setSize(new Dimension(160, 160));
        element7.setYOffset(-20);
        checkOut3.addBasicElement(element7);
        element7.onAttributesInitialized();
        element7.onChildrenAdded();
        final DecoratorAppearance appearance3 = checkOut3.getAppearance();
        appearance3.setElementMap(elementMap);
        appearance3.setShape(WidgetShape.CIRCLE);
        checkOut3.addBasicElement(appearance3);
        appearance3.onAttributesInitialized();
        appearance3.onChildrenAdded();
        checkOut3.onChildrenAdded();
        final Image element8 = new Image();
        element8.onCheckOut();
        element8.setElementMap(elementMap);
        element8.setStyle("petWindowTop");
        element8.setNonBlocking(true);
        element8.setExpandable(false);
        checkOut.addBasicElement(element8);
        element8.onAttributesInitialized();
        final StaticLayoutData element9 = new StaticLayoutData();
        element9.onCheckOut();
        element9.setElementMap(elementMap);
        element9.setSize(new Dimension(-2, -2));
        element9.setAlign(Alignment17.NORTH);
        element8.addBasicElement(element9);
        element9.onAttributesInitialized();
        element9.onChildrenAdded();
        final DecoratorAppearance appearance4 = element8.getAppearance();
        appearance4.setElementMap(elementMap);
        element8.addBasicElement(appearance4);
        appearance4.onAttributesInitialized();
        final Margin checkOut4 = Margin.checkOut();
        checkOut4.setElementMap(elementMap);
        checkOut4.setInsets(new Insets(0, 27, 0, 27));
        appearance4.addBasicElement(checkOut4);
        checkOut4.onAttributesInitialized();
        checkOut4.onChildrenAdded();
        appearance4.onChildrenAdded();
        element8.onChildrenAdded();
        final Image element10 = new Image();
        element10.onCheckOut();
        element10.setElementMap(elementMap);
        element10.setStyle("petPedestal");
        element10.setNonBlocking(true);
        element10.setExpandable(false);
        checkOut.addBasicElement(element10);
        element10.onAttributesInitialized();
        final StaticLayoutData element11 = new StaticLayoutData();
        element11.onCheckOut();
        element11.setElementMap(elementMap);
        element11.setSize(new Dimension(-2, -2));
        element11.setAlign(Alignment17.NORTH);
        element11.setYOffset(-80);
        element10.addBasicElement(element11);
        element11.onAttributesInitialized();
        element11.onChildrenAdded();
        element10.onChildrenAdded();
        final String id = "petDisplay";
        final AnimatedElementViewer animatedElementViewer = new AnimatedElementViewer();
        animatedElementViewer.onCheckOut();
        animatedElementViewer.setElementMap(elementMap);
        if (elementMap != null && id != null) {
            elementMap.add(id, animatedElementViewer);
        }
        animatedElementViewer.setOffsetY(-20.0f);
        animatedElementViewer.setOffsetX(0.0f);
        animatedElementViewer.setScale(2.5f);
        animatedElementViewer.setAnimName("AnimStatiqueCadre");
        animatedElementViewer.setDirection(3);
        animatedElementViewer.setNonBlocking(true);
        checkOut.addBasicElement(animatedElementViewer);
        animatedElementViewer.onAttributesInitialized();
        final PropertyElement checkOut5 = PropertyElement.checkOut();
        checkOut5.setElementMap(elementMap);
        checkOut5.setLocal(true);
        checkOut5.setName("pet");
        checkOut5.setAttribute("animatedElement");
        checkOut5.setField("animatedElement");
        animatedElementViewer.addBasicElement(checkOut5);
        checkOut5.onAttributesInitialized();
        checkOut5.onChildrenAdded();
        final PropertyElement checkOut6 = PropertyElement.checkOut();
        checkOut6.setElementMap(elementMap);
        checkOut6.setLocal(true);
        checkOut6.setName("pet");
        checkOut6.setAttribute("equipment");
        checkOut6.setField("petAnimationEquipment");
        animatedElementViewer.addBasicElement(checkOut6);
        checkOut6.onAttributesInitialized();
        checkOut6.onChildrenAdded();
        final StaticLayoutData element12 = new StaticLayoutData();
        element12.onCheckOut();
        element12.setElementMap(elementMap);
        element12.setAlign(Alignment17.NORTH);
        element12.setSize(new Dimension(64, 64));
        element12.setYOffset(-40);
        animatedElementViewer.addBasicElement(element12);
        element12.onAttributesInitialized();
        element12.onChildrenAdded();
        animatedElementViewer.onChildrenAdded();
        checkOut.onChildrenAdded();
        return checkOut;
    }
    
    public BasicElement method6(final BasicElement basicElement) {
        final ElementMap elementMap = this.elementMaps.peek();
        final Button element = new Button();
        element.onCheckOut();
        element.setElementMap(elementMap);
        element.setStyle("close");
        element.setExpandable(false);
        final MouseClickedListener onClick = new MouseClickedListener();
        onClick.setCallBackFunc("unloadDialog");
        element.setOnClick(onClick);
        basicElement.addBasicElement(element);
        element.onAttributesInitialized();
        final StaticLayoutData element2 = new StaticLayoutData();
        element2.onCheckOut();
        element2.setElementMap(elementMap);
        element2.setSize(new Dimension(-2, -2));
        element2.setAlign(Alignment17.NORTH_EAST);
        element2.setXOffset(-32);
        element2.setYOffset(-75);
        element.addBasicElement(element2);
        element2.onAttributesInitialized();
        element2.onChildrenAdded();
        element.onChildrenAdded();
        return element;
    }
}
